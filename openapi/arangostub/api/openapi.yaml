openapi: 3.0.2
info:
  description: ArangoDB REST API Interface
  license:
    name: "Apache License, Version 2.0"
  title: ArangoDB
  version: "1.0"
servers:
- url: /_db/_system/
paths:
  /_api/user:
    post:
      description: |
        Create a new user. You need server access level *Administrate* in order to
        execute this REST call.
      operationId: _apiUserPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_user_post_request'
      responses:
        "201":
          description: |
            Returned if the user can be added by the server
        "400":
          description: |
            If the JSON representation is malformed or mandatory data is missing
            from the request.
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
        "409":
          description: |
            Returned if a user with the same name already exists.
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
  /_api/user/{user}/database/{dbname}:
    delete:
      description: |
        Clears the database access level for the database *dbname* of user *user*. As
        consequence the default database access level is used. If there is no defined
        default database access level, it defaults to *No access*. You need permission
        to the *_system* database in order to execute this REST call.
      operationId: _apiUserUserDatabaseDbnameDELETE
      parameters:
      - description: |
          The name of the user.
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the database.
        explode: false
        in: path
        name: dbname
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: |
            Returned if the access permissions were changed successfully.
        "400":
          description: |
            If the JSON representation is malformed or mandatory data is missing
            from the request.
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
    get:
      description: |
        Fetch the database access level for a specific database
      operationId: _apiUserUserDatabaseDbnameGET
      parameters:
      - description: |
          The name of the user for which you want to query the databases.
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the database to query
        explode: false
        in: path
        name: dbname
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Returned if the access level can be returned
        "400":
          description: |
            If the access privileges are not right etc.
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
    put:
      description: |
        Sets the database access levels for the database *dbname* of user *user*. You
        need the *Administrate* server access level in order to execute this REST
        call.
      operationId: _apiUserUserDatabaseDbnamePUT
      parameters:
      - description: |
          The name of the user.
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the database.
        explode: false
        in: path
        name: dbname
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_user__user__database__dbname__delete_request'
      responses:
        "200":
          description: |
            Returned if the access level was changed successfully.
        "400":
          description: |
            If the JSON representation is malformed or mandatory data is missing
            from the request.
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
  /_api/user/{user}/database/{dbname}/{collection}:
    delete:
      description: |
        Clears the collection access level for the collection *collection* in the
        database *dbname* of user *user*.  As consequence the default collection
        access level is used. If there is no defined default collection access level,
        it defaults to *No access*.  You need permissions to the *_system* database in
        order to execute this REST call.
      operationId: _apiUserUserDatabaseDbnameCollectionDELETE
      parameters:
      - description: |
          The name of the user.
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the database.
        explode: false
        in: path
        name: dbname
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: |
            Returned if the access permissions were changed successfully.
        "400":
          description: |
            If there was an error
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
    get:
      description: |
        Returns the collection access level for a specific collection
      operationId: _apiUserUserDatabaseDbnameCollectionGET
      parameters:
      - description: |
          The name of the user for which you want to query the databases.
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the database to query
        explode: false
        in: path
        name: dbname
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the collection
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Returned if the access level can be returned
        "400":
          description: |
            If the access privileges are not right etc.
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
    put:
      description: |
        Sets the collection access level for the *collection* in the database *dbname*
        for user *user*. You need the *Administrate* server access level in order to
        execute this REST call.
      operationId: _apiUserUserDatabaseDbnameCollectionPUT
      parameters:
      - description: |
          The name of the user.
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the database.
        explode: false
        in: path
        name: dbname
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_user__user__database__dbname___collection__delete_request'
      responses:
        "200":
          description: |
            Returned if the access permissions were changed successfully.
        "400":
          description: |
            If the JSON representation is malformed or mandatory data is missing
            from the request.
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
  /_api/user/{user}/database/:
    get:
      description: |
        Fetch the list of databases available to the specified *user*. You need
        *Administrate* for the server access level in order to execute this REST call.
        The call will return a JSON object with the per-database access
        privileges for the specified user. The *result* object will contain
        the databases names as object keys, and the associated privileges
        for the database as values.
        In case you specified *full*, the result will contain the permissions
        for the databases as well as the permissions for the collections.
      operationId: _apiUserUserDatabaseGET
      parameters:
      - description: |
          The name of the user for which you want to query the databases.
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Return the full set of access levels for all databases and all collections.
        explode: true
        in: query
        name: full
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            Returned if the list of available databases can be returned.
        "400":
          description: |
            If the access privileges are not right etc.
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
  /_api/user/{user}:
    delete:
      description: |
        Removes an existing user, identified by *user*.  You need *Administrate* for
        the server access level in order to execute this REST call.
      operationId: _apiUserUserDELETE
      parameters:
      - description: |
          The name of the user
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: |
            Is returned if the user was removed by the server
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
        "404":
          description: |
            The specified user does not exist
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
    patch:
      description: |
        Partially updates the data of an existing user. You need server access level
        *Administrate* in order to execute this REST call. Additionally, a user can
        change his/her own data.
      operationId: _apiUserUserPATCH
      parameters:
      - description: |
          The name of the user.
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_user__user__delete_request_1'
      responses:
        "200":
          description: |
            Is returned if the user data can be replaced by the server.
        "400":
          description: |
            The JSON representation is malformed or mandatory data is missing from the request.
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
        "404":
          description: |
            The specified user does not exist
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
    put:
      description: |
        Replaces the data of an existing user. You need server access level
        *Administrate* in order to execute this REST call. Additionally, a user can
        change his/her own data.
      operationId: _apiUserUserPUT
      parameters:
      - description: |
          The name of the user.
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_user__user__delete_request'
      responses:
        "200":
          description: |
            Is returned if the user data can be replaced by the server.
        "400":
          description: |
            The JSON representation is malformed or mandatory data is missing from the request
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
        "404":
          description: |
            The specified user does not exist
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
  /_api/user/:
    get:
      description: |
        Fetches data about all users.  You need the *Administrate* server access level
        in order to execute this REST call.  Otherwise, you will only get information
        about yourself.
        The call will return a JSON object with at least the following
        attributes on success:
        - *user*: The name of the user as a string.
        - *active*: An optional flag that specifies whether the user is active.
        - *extra*: A JSON object with extra user information. It is used by the web
          interface to store graph viewer settings and saved queries.
      operationId: _apiUserGET
      responses:
        "200":
          description: |
            The users that were found.
        "401":
          description: |
            Returned if you have *No access* database access level to the *_system*
            database.
        "403":
          description: |
            Returned if you have *No access* server access level.
      tags:
      - User Management
      x-eov-operation-handler: controllers/UserManagementController
  /_api/analyzer:
    get:
      description: |
        Retrieves a an array of all Analyzer definitions.
        The resulting array contains objects with the following attributes:
        - *name*: the Analyzer name
        - *type*: the Analyzer type
        - *properties*: the properties used to configure the specified type
        - *features*: the set of features to set on the Analyzer generated fields
      operationId: _apiAnalyzerGET
      responses:
        "200":
          description: |
            The Analyzer definitions was retrieved successfully.
      tags:
      - Analyzers
      x-eov-operation-handler: controllers/AnalyzersController
    post:
      description: |
        Creates a new Analyzer based on the provided configuration.
      operationId: _apiAnalyzerPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_analyzer_get_request'
      responses:
        "200":
          description: |
            An Analyzer with a matching name and definition already exists.
        "201":
          description: |
            A new Analyzer definition was successfully created.
        "400":
          description: |
            One or more of the required parameters is missing or one or more of the parameters
            is not valid.
        "403":
          description: |
            The user does not have permission to create and Analyzer with this configuration.
      tags:
      - Analyzers
      x-eov-operation-handler: controllers/AnalyzersController
  /_api/analyzer/{analyzer-name}:
    delete:
      description: |
        Removes an Analyzer configuration identified by *analyzer-name*.
        If the Analyzer definition was successfully dropped, an object is returned with
        the following attributes:
        - *error*: *false*
        - *name*: The name of the removed Analyzer
      operationId: _apiAnalyzerAnalyzerNameDELETE
      parameters:
      - description: |
          The name of the Analyzer to remove.
        explode: false
        in: path
        name: analyzer-name
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The Analyzer configuration should be removed even if it is in-use.
          The default value is *false*.
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            The Analyzer configuration was removed successfully.
        "400":
          description: |
            The *analyzer-name* was not supplied or another request parameter was not
            valid.
        "403":
          description: |
            The user does not have permission to remove this Analyzer configuration.
        "404":
          description: |
            Such an Analyzer configuration does not exist.
        "409":
          description: |
            The specified Analyzer configuration is still in use and *force* was omitted or
            *false* specified.
      tags:
      - Analyzers
      x-eov-operation-handler: controllers/AnalyzersController
    get:
      description: |
        Retrieves the full definition for the specified Analyzer name.
        The resulting object contains the following attributes:
        - *name*: the Analyzer name
        - *type*: the Analyzer type
        - *properties*: the properties used to configure the specified type
        - *features*: the set of features to set on the Analyzer generated fields
      operationId: _apiAnalyzerAnalyzerNameGET
      parameters:
      - description: |
          The name of the Analyzer to retrieve.
        explode: false
        in: path
        name: analyzer-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            The Analyzer definition was retrieved successfully.
        "404":
          description: |
            Such an Analyzer configuration does not exist.
      tags:
      - Analyzers
      x-eov-operation-handler: controllers/AnalyzersController
  /_api/explain:
    post:
      description: |
        To explain how an AQL query would be executed on the server, the query string
        can be sent to the server via an HTTP POST request. The server will then validate
        the query and create an execution plan for it. The execution plan will be
        returned, but the query will not be executed.
        The execution plan that is returned by the server can be used to estimate the
        probable performance of the query. Though the actual performance will depend
        on many different factors, the execution plan normally can provide some rough
        estimates on the amount of work the server needs to do in order to actually run
        the query.
        By default, the explain operation will return the optimal plan as chosen by
        the query optimizer The optimal plan is the plan with the lowest total estimated
        cost. The plan will be returned in the attribute *plan* of the response object.
        If the option *allPlans* is specified in the request, the result will contain
        all plans created by the optimizer. The plans will then be returned in the
        attribute *plans*.
        The result will also contain an attribute *warnings*, which is an array of
        warnings that occurred during optimization or execution plan creation. Additionally,
        a *stats* attribute is contained in the result with some optimizer statistics.
        If *allPlans* is set to *false*, the result will contain an attribute *cacheable*
        that states whether the query results can be cached on the server if the query
        result cache were used. The *cacheable* attribute is not present when *allPlans*
        is set to *true*.
        Each plan in the result is a JSON object with the following attributes:
        - *nodes*: the array of execution nodes of the plan.
        - *estimatedCost*: the total estimated cost for the plan. If there are multiple
          plans, the optimizer will choose the plan with the lowest total cost.
        - *collections*: an array of collections used in the query
        - *rules*: an array of rules the optimizer applied.
        - *variables*: array of variables used in the query (note: this may contain
          internal variables created by the optimizer)
      operationId: _apiExplainPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_explain_post_request'
      responses:
        "200":
          description: |
            If the query is valid, the server will respond with *HTTP 200* and
            return the optimal execution plan in the *plan* attribute of the response.
            If option *allPlans* was set in the request, an array of plans will be returned
            in the *allPlans* attribute instead.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request,
            or if the query contains a parse error. The body of the response will
            contain the error details embedded in a JSON object.
            Omitting bind variables if the query references any will also result
            in an *HTTP 400* error.
        "404":
          description: |
            The server will respond with *HTTP 404* in case a non-existing collection is
            accessed in the query.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/query:
    post:
      description: |
        This endpoint is for query validation only. To actually query the database,
        see `/api/cursor`.
      operationId: _apiQueryPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_query_post_request'
      responses:
        "200":
          description: |
            If the query is valid, the server will respond with *HTTP 200* and
            return the names of the bind parameters it found in the query (if any) in
            the *bindVars* attribute of the response. It will also return an array
            of the collections used in the query in the *collections* attribute.
            If a query can be parsed successfully, the *ast* attribute of the returned
            JSON will contain the abstract syntax tree representation of the query.
            The format of the *ast* is subject to change in future versions of
            ArangoDB, but it can be used to inspect how ArangoDB interprets a given
            query. Note that the abstract syntax tree will be returned without any
            optimizations applied to it.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request,
            or if the query contains a parse error. The body of the response will
            contain the error details embedded in a JSON object.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/query/rules:
    get:
      description: |
        A list of all optimizer rules and their properties.
      operationId: _apiQueryRulesGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_query_rules_get_200_response'
          description: |
            is returned if the list of optimizer rules can be retrieved successfully.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/query/properties:
    get:
      description: |
        Returns the current query tracking configuration. The configuration is a
        JSON object with the following properties:
        - *enabled*: if set to *true*, then queries will be tracked. If set to
          *false*, neither queries nor slow queries will be tracked.
        - *trackSlowQueries*: if set to *true*, then slow queries will be tracked
          in the list of slow queries if their runtime exceeds the value set in
          *slowQueryThreshold*. In order for slow queries to be tracked, the *enabled*
          property must also be set to *true*.
        - *trackBindVars*: if set to *true*, then bind variables used in queries will
          be tracked.
        - *maxSlowQueries*: the maximum number of slow queries to keep in the list
          of slow queries. If the list of slow queries is full, the oldest entry in
          it will be discarded when additional slow queries occur.
        - *slowQueryThreshold*: the threshold value for treating a query as slow. A
          query with a runtime greater or equal to this threshold value will be
          put into the list of slow queries when slow query tracking is enabled.
          The value for *slowQueryThreshold* is specified in seconds.
        - *maxQueryStringLength*: the maximum query string length to keep in the
          list of queries. Query strings can have arbitrary lengths, and this property
          can be used to save memory in case very long query strings are used. The
          value is specified in bytes.
      operationId: _apiQueryPropertiesGET
      responses:
        "200":
          description: |
            Is returned if properties were retrieved successfully.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request,
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
    put:
      description: |
        The properties need to be passed in the attribute *properties* in the body
        of the HTTP request. *properties* needs to be a JSON object.
        After the properties have been changed, the current set of properties will
        be returned in the HTTP response.
      operationId: _apiQueryPropertiesPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_query_properties_get_request'
      responses:
        "200":
          description: |
            Is returned if the properties were changed successfully.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request,
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/query/current:
    get:
      description: |
        Returns an array containing the AQL queries currently running in the selected
        database. Each query is a JSON object with the following attributes:
        - *id*: the query's id
        - *database*: the name of the database the query runs in
        - *user*: the name of the user that started the query
        - *query*: the query string (potentially truncated)
        - *bindVars*: the bind parameter values used by the query
        - *started*: the date and time when the query was started
        - *runTime*: the query's run time up to the point the list of queries was
          queried
        - *state*: the query's current execution state (as a string). One of:
          - `"initializing"`
          - `"parsing"`
          - `"optimizing ast"`
          - `"loading collections"`
          - `"instantiating plan"`
          - `"optimizing plan"`
          - `"executing"`
          - `"finalizing"`
          - `"finished"`
          - `"killed"`
          - `"invalid"`
        - *stream*: whether or not the query uses a streaming cursor
      operationId: _apiQueryCurrentGET
      parameters:
      - description: |
          If set to *true*, will return the currently running queries in all databases,
          not just the selected one.
          Using the parameter is only allowed in the system database and with superuser
          privileges.
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            Is returned when the list of queries can be retrieved successfully.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request,
        "403":
          description: |
            *HTTP 403* is returned in case the *all* parameter was used, but the request
            was made in a different database than _system, or by an non-privileged user.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/query/slow:
    delete:
      description: |
        Clears the list of slow AQL queries in the currently selected database
      operationId: _apiQuerySlowDELETE
      parameters:
      - description: |
          If set to *true*, will clear the slow query history in all databases, not just
          the selected one.
          Using the parameter is only allowed in the system database and with superuser
          privileges.
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            The server will respond with *HTTP 200* when the list of queries was
            cleared successfully.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
    get:
      description: |
        Returns an array containing the last AQL queries that are finished and
        have exceeded the slow query threshold in the selected database.
        The maximum amount of queries in the list can be controlled by setting
        the query tracking property `maxSlowQueries`. The threshold for treating
        a query as *slow* can be adjusted by setting the query tracking property
        `slowQueryThreshold`.
        Each query is a JSON object with the following attributes:
        - *id*: the query's id
        - *database*: the name of the database the query runs in
        - *user*: the name of the user that started the query
        - *query*: the query string (potentially truncated)
        - *bindVars*: the bind parameter values used by the query
        - *started*: the date and time when the query was started
        - *runTime*: the query's total run time
        - *state*: the query's current execution state (will always be "finished"
          for the list of slow queries)
        - *stream*: whether or not the query uses a streaming cursor
      operationId: _apiQuerySlowGET
      parameters:
      - description: |
          If set to *true*, will return the slow queries from all databases, not just
          the selected one.
          Using the parameter is only allowed in the system database and with superuser
          privileges.
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            Is returned when the list of queries can be retrieved successfully.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request,
        "403":
          description: |
            *HTTP 403* is returned in case the *all* parameter was used, but the request
            was made in a different database than _system, or by an non-privileged user.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/query/{query-id}:
    delete:
      description: "\nKills a running query in the currently selected database. The\
        \ query will be \nterminated at the next cancelation point.\n\n"
      operationId: _apiQueryQueryIdDELETE
      parameters:
      - description: |
          The id of the query.
        explode: false
        in: path
        name: query-id
        required: true
        schema:
          type: string
        style: simple
      - description: "If set to *true*, will attempt to kill the specified query in\
          \ all databases, \nnot just the selected one.\nUsing the parameter is only\
          \ allowed in the system database and with superuser\nprivileges.\n\n"
        explode: true
        in: query
        name: all
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            The server will respond with *HTTP 200* when the query was still running when
            the kill request was executed and the query's kill flag was set.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request.
        "403":
          description: |
            *HTTP 403* is returned in case the *all* parameter was used, but the request
            was made in a different database than _system, or by an non-privileged user.
        "404":
          description: |
            The server will respond with *HTTP 404* when no query with the specified
            id was found.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/control_pregel:
    get:
      description: |
        Returns a list of currently running and recently finished Pregel jobs without
        retrieving their results.
      operationId: _apiControlPregelGET
      responses:
        "200":
          description: |
            Is returned when the list of jobs can be retrieved successfully.
      tags:
      - Pregel
      x-eov-operation-handler: controllers/PregelController
    post:
      description: |
        To start an execution you need to specify the algorithm name and a named graph
        (SmartGraph in cluster). Alternatively you can specify the vertex and edge
        collections. Additionally you can specify custom parameters which vary for each
        algorithm, see [Pregel - Available Algorithms](https://www.arangodb.com/docs/stable/graphs-pregel.html#available-algorithms).
      operationId: _apiControlPregelPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_control_pregel_get_request'
      responses:
        "200":
          description: |
            HTTP 200 is returned in case the Pregel was successfully created and the reply
            body is a string with the `id` to query for the status or to cancel the
            execution.
        "400":
          description: |
            An HTTP 400 error is returned if the set of collections for the Pregel job includes
            a system collection, or if the collections to not conform to the sharding requirements
            for Pregel jobs.
        "403":
          description: |
            An HTTP 403 error is returned if there are not sufficient privileges to access
            the collections specified for the Pregel job.
        "404":
          description: "\nAn HTTP 404 error is returned if the specified \"algorithm\"\
            \ is not found, or the\ngraph specified in \"graphName\" is not found,\
            \ or at least one the collections \nspecified in \"vertexCollections\"\
            \ or \"edgeCollections\" is not found.\n"
      tags:
      - Pregel
      x-eov-operation-handler: controllers/PregelController
  /_api/control_pregel/{id}:
    delete:
      description: |
        Cancel an execution which is still running, and discard any intermediate
        results. This immediately frees all memory taken up by the execution, and
        makes you lose all intermediary data.
        You might get inconsistent results if you requested to store the results and
        then cancel an execution when it is already in its `"storing"` state (or
        `"done"` state in versions prior to 3.7.1). The data is written multi-threaded
        into all collection shards at once. This means there are multiple transactions
        simultaneously. A transaction might already be committed when you cancel the
        execution job. Therefore, you might see some updated documents, while other
        documents have no or stale results from a previous execution.
      operationId: _apiControlPregelIdDELETE
      parameters:
      - description: |
          Pregel execution identifier.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: number
        style: simple
      responses:
        "200":
          description: |
            HTTP 200 is returned if the job execution ID was valid.
        "404":
          description: |
            An HTTP 404 error is returned if no Pregel job with the specified execution number
            is found or the execution number is invalid.
      tags:
      - Pregel
      x-eov-operation-handler: controllers/PregelController
    get:
      description: |
        Returns the current state of the execution, the current global superstep, the
        runtime, the global aggregator values as well as the number of sent and
        received messages.
      operationId: _apiControlPregelIdGET
      parameters:
      - description: |
          Pregel execution identifier.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: number
        style: simple
      responses:
        "200":
          description: |
            HTTP 200 is returned in case the job execution ID was valid and the state is
            returned along with the response.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_control_pregel__id__delete_404_response'
          description: |
            An HTTP 404 error is returned if no Pregel job with the specified execution number
            is found or the execution number is invalid.
      tags:
      - Pregel
      x-eov-operation-handler: controllers/PregelController
  /_admin/server/jwt:
    get:
      description: |
        Get information about the currently loaded secrets.
        To utilize the API a superuser JWT token is necessary, otherwise the response
        will be _HTTP 403 Forbidden_.
      operationId: _adminServerJwtGET
      responses:
        "200":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_server_jwt_get_403_response'
          description: |
            if the request was not authenticated as a user with sufficient rights
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
    post:
      description: |
        Sending a request without payload to this endpoint reloads the JWT secret(s)
        from disk. Only the files specified via the arangod startup option
        `--server.jwt-secret-keyfile` or `--server.jwt-secret-folder` are used.
        It is not possible to change the locations where files are loaded from
        without restarting the process.
        To utilize the API a superuser JWT token is necessary, otherwise the response
        will be _HTTP 403 Forbidden_.
      operationId: _adminServerJwtPOST
      responses:
        "200":
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_server_jwt_get_403_response'
          description: |
            if the request was not authenticated as a user with sufficient rights
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_api/cluster/endpoints:
    get:
      description: |
        Returns an object with an attribute `endpoints`, which contains an
        array of objects, which each have the attribute `endpoint`, whose value
        is a string with the endpoint description. There is an entry for each
        Coordinator in the cluster. This method only works on Coordinators in
        cluster mode. In case of an error the `error` attribute is set to
        `true`.
      operationId: _apiClusterEndpointsGET
      responses:
        "200":
          description: |
            is returned when everything went well.
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_cluster_endpoints_get_501_response'
          description: |
            server is not a Coordinator or method was not GET.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_api/endpoint:
    get:
      description: |
        Returns an array of all configured endpoints the server is listening on.
        The result is a JSON array of JSON objects, each with `"entrypoint"` as
        the only attribute, and with the value being a string describing the
        endpoint.
        **Note**: retrieving the array of all endpoints is allowed in the system database
        only. Calling this action in any other database will make the server return
        an error.
      operationId: _apiEndpointGET
      responses:
        "200":
          description: |
            is returned when the array of endpoints can be determined successfully.
        "400":
          description: |
            is returned if the action is not carried out in the system database.
        "405":
          description: |
            The server will respond with *HTTP 405* if an unsupported HTTP method is used.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/backup/create:
    post:
      description: |
        Creates a consistent backup "as soon as possible", very much
        like a snapshot in time, with a given label. The ambiguity in the
        phrase "as soon as possible" refers to the next window during which a
        global write lock across all databases can be obtained in order to
        guarantee consistency. Note that the backup at first resides on the
        same machine and hard drive as the original data. Make sure to upload
        it to a remote site for an actual backup.
      operationId: _adminBackupCreatePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_backup_create_post_request'
      responses:
        "201":
          description: |
            If all is well, code 201 is returned.
        "400":
          description: |
            If the create command is invoked with bad parameters or any HTTP
            method other than `POST`, then an *HTTP 400* is returned. The specifics
            are detailed in the returned error document.
        "408":
          description: |
            If the operation cannot obtain a global transaction lock
            within the timeout, then an *HTTP 408* is returned.
      tags:
      - BackupRestore
      x-eov-operation-handler: controllers/BackupRestoreController
  /_admin/backup/restore:
    post:
      description: |
        Restores a consistent backup from a
        snapshot in time, with a given id. The backup snapshot must reside on
        the ArangoDB service locally.
      operationId: _adminBackupRestorePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_backup_restore_post_request'
      responses:
        "200":
          description: |
            Is returned if the backup could be restored. Note that there is an
            inevitable discrepancy between the single server and the cluster. In a
            single server, the request returns successfully, but the restore is
            only executed afterwards. In the cluster, the request only returns when
            the restore operation has been completed successfully. The cluster
            behaviour is obviously the desired one, but in a single instance, one
            cannot keep a connection open across a restart.
        "400":
          description: |
            If the restore command is invoked with bad parameters or any HTTP
            method other than `POST`, then an *HTTP 400* is returned. The specifics
            are detailed in the returned error document.
      tags:
      - BackupRestore
      x-eov-operation-handler: controllers/BackupRestoreController
  /_admin/backup/delete:
    post:
      description: |
        Delete a specific local backup identified by the given `id`.
      operationId: _adminBackupDeletePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_backup_delete_post_request'
      responses:
        "200":
          description: |
            If all is well, this code 200 is returned.
        "400":
          description: |
            If the delete command is invoked with bad parameters or any HTTP
            method other than `POST`, then an *HTTP 400* is returned.
        "404":
          description: |
            If a backup corresponding to the identifier `id` cannot be found.
      tags:
      - BackupRestore
      x-eov-operation-handler: controllers/BackupRestoreController
  /_admin/backup/list:
    post:
      description: |
        Lists all locally found backups.
      operationId: _adminBackupListPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_backup_list_post_request'
      responses:
        "200":
          description: |
            If all is well, code 200 is returned.
        "400":
          description: |
            If the list command is invoked with bad parameters, then an *HTTP 400*
            is returned.
        "404":
          description: |
            If an `id` or a list of ids was given and the given ids were not found
            as identifiers of a backup, an *HTTP 404 NOT FOUND* is returned.
        "405":
          description: |
            If the list command is invoked with any HTTP
            method other than `POST`, then an *HTTP 405 METHOD NOT ALLOWED* is returned.
      tags:
      - BackupRestore
      x-eov-operation-handler: controllers/BackupRestoreController
  /_admin/backup/upload:
    post:
      description: |
        Upload a specific local backup to a remote repository, or query
        progress on a previously scheduled upload operation, or abort
        a running upload operation.
      operationId: _adminBackupUploadPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_backup_upload_post_request'
      responses:
        "200":
          description: |
            If all is well, code 200 is returned if progress is inquired or the
            operation is aborted.
        "202":
          description: |
            If all is well, code 202 is returned if a new operation is scheduled.
        "400":
          description: |
            If the upload command is invoced with bad parameters or any HTTP
            method other than `POST`, then an *HTTP 400* is returned.
        "401":
          description: |
            If the authentication to the rempote repository fails, then an *HTTP
            400* is returned.
        "404":
          description: |
            If a backup corresponding to the identifier `id`  cannot be found, or if
            there is no known upload operation with the given `uploadId`.
      tags:
      - BackupRestore
      x-eov-operation-handler: controllers/BackupRestoreController
  /_admin/backup/download:
    post:
      description: |
        Download a specific local backup from a remote repository, or query
        progress on a previously scheduled download operation, or abort
        a running download operation.
      operationId: _adminBackupDownloadPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_backup_download_post_request'
      responses:
        "200":
          description: |
            If all is well, code 200 is returned if progress is inquired or the
            operation is aborted.
        "202":
          description: |
            If all is well, code 202 is returned if a new operation is scheduled.
        "400":
          description: |
            If the download command is invoked with bad parameters or any HTTP
            method other than `POST`, then an *HTTP 400* is returned.
        "401":
          description: |
            If the authentication to the rempote repository fails, then an *HTTP
            401* is returned.
        "404":
          description: |
            If a backup corresponding to the identifier `id`  cannot be found, or if
            there is no known download operation with the given `downloadId`.
      tags:
      - BackupRestore
      x-eov-operation-handler: controllers/BackupRestoreController
  /_api/version:
    get:
      description: |
        Returns the server name and version number. The response is a JSON object
        with the following attributes:
      operationId: _apiVersionGET
      parameters:
      - description: |
          If set to *true*, the response will contain a *details* attribute with
          additional information about included components and their versions. The
          attribute names and internals of the *details* object may vary depending on
          platform and ArangoDB version.
        explode: true
        in: query
        name: details
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_version_get_200_response'
          description: |
            is returned in all cases.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_api/engine:
    get:
      description: |
        Returns the storage engine the server is configured to use.
        The response is a JSON object with the following attributes:
      operationId: _apiEngineGET
      responses:
        "200":
          description: |
            is returned in all cases.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/time:
    get:
      description: |
        The call returns an object with the attribute *time*. This contains the
        current system time as a Unix timestamp with microsecond precision.
      operationId: _adminTimeGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_time_get_200_response'
          description: |
            Time was returned successfully.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/echo:
    post:
      description: |
        The call returns an object with the servers request information
      operationId: _adminEchoPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_echo_post_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_echo_post_200_response'
          description: |
            Echo was returned successfully.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/database/target-version:
    get:
      description: |
        Returns the database version that this server requires.
        The version is returned in the *version* attribute of the result.
      operationId: _adminDatabaseTargetVersionGET
      responses:
        "200":
          description: |
            Is returned in all cases.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/shutdown:
    delete:
      description: |
        This call initiates a clean shutdown sequence. Requires administrative privileges.
      operationId: _adminShutdownDELETE
      parameters:
      - description: |
          <small>Introduced in v3.7.12, v3.8.1, v3.9.0</small>
          If set to `true`, this initiates a soft shutdown. This is only available
          on Coordinators. When issued, the Coordinator tracks a number of ongoing
          operations, waits until all have finished, and then shuts itself down
          normally. It will still accept new operations.
          This feature can be used to make restart operations of Coordinators less
          intrusive for clients. It is designed for setups with a load balancer in front
          of Coordinators. Remove the designated Coordinator from the load balancer before
          issuing the soft-shutdown. The remaining Coordinators will internally forward
          requests that need to be handled by the designated Coordinator. All other
          requests will be handled by the remaining Coordinators, reducing the designated
          Coordinator's load.
          The following types of operations are tracked
           - AQL cursors (in particular streaming cursors)
           - Transactions (in particular stream transactions)
           - Pregel runs (conducted by this Coordinator)
           - Ongoing asynchronous requests (using the `x-arango-async store` HTTP header
           - Finished asynchronous requests, whose result has not yet been
             collected
           - Queued low priority requests (most normal requests)
           - Ongoing low priority requests
        explode: true
        in: query
        name: soft
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            is returned in all cases, `OK` will be returned in the result buffer on success.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
    get:
      description: |
        <small>Introduced in: v3.7.12, v3.8.1, v3.9.0</small>
        This call reports progress about a soft Coordinator shutdown (see
        documentation of `DELETE /_admin/shutdown?soft=true`).
        In this case, the following types of operations are tracked:
         - AQL cursors (in particular streaming cursors)
         - Transactions (in particular stream transactions)
         - Pregel runs (conducted by this Coordinator)
         - Ongoing asynchronous requests (using the `x-arango-async: store` HTTP header
         - Finished asynchronous requests, whose result has not yet been
           collected
         - Queued low priority requests (most normal requests)
         - Ongoing low priority requests
        This API is only available on Coordinators.
      operationId: _adminShutdownGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_shutdown_delete_200_response'
          description: |
            The response indicates the fact that a soft shutdown is ongoing and the
            number of active operations of the various types. Once all numbers have gone
            to 0, the flag `allClear` is set and the Coordinator shuts down automatically.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/execute:
    post:
      description: |
        Executes the javascript code in the body on the server as the body
        of a function with no arguments. If you have a *return* statement
        then the return value you produce will be returned as content type
        *application/json*. If the parameter *returnAsJSON* is set to
        *true*, the result will be a JSON object describing the return value
        directly, otherwise a string produced by JSON.stringify will be
        returned.
        Note that this API endpoint will only be present if the server was
        started with the option `--javascript.allow-admin-execute true`.
        The default value of this option is `false`, which disables the execution of
        user-defined code and disables this API endpoint entirely.
        This is also the recommended setting for production.
      operationId: _adminExecutePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_execute_post_request'
      responses:
        "200":
          description: |
            is returned when everything went well, or if a timeout occurred. In the
            latter case a body of type application/json indicating the timeout
            is returned. depending on *returnAsJSON* this is a json object or a plain string.
        "403":
          description: |
            is returned if ArangoDB is not running in cluster mode.
        "404":
          description: |
            is returned if ArangoDB was not compiled for cluster operation.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/status:
    get:
      description: |
        Returns status information about the server.
      operationId: _adminStatusGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_status_get_200_response'
          description: |
            Status information was returned successfully.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/license:
    get:
      description: |
        View the license information and status of an Enterprise Edition instance.
        Can be called on single servers, Coordinators, and DB-Servers.
      operationId: _adminLicenseGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_license_get_200_response'
          description: ""
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
    put:
      description: |
        Set a new license for an Enterprise Edition instance.
        Can be called on single servers, Coordinators, and DB-Servers.
      operationId: _adminLicensePUT
      parameters:
      - description: |
          Set to `true` to change the license even if it expires sooner than the current one.
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_license_get_request'
      responses:
        "400":
          description: |
            If the license expires earlier than the previously installed one.
        "201":
          description: |
            License successfully deployed.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_api/job/{job-id}:
    get:
      description: |
        Returns the processing status of the specified job. The processing status
        can be
        determined by peeking into the HTTP response code of the response.
      operationId: _apiJobJobIdGET
      parameters:
      - description: |
          The async job id.
        explode: false
        in: path
        name: job-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            is returned if the job requested via job-id has been executed
            and its result is ready to fetch.
        "204":
          description: |
            is returned if the job requested via job-id is still in the queue of pending
            (or not yet finished) jobs.
        "404":
          description: |
            is returned if the job was not found or already deleted or fetched from the
            job result list.
      tags:
      - job
      x-eov-operation-handler: controllers/JobController
    put:
      description: |
        Returns the result of an async job identified by job-id. If the async job
        result is present on the server, the result will be removed from the list of
        result. That means this method can be called for each job-id once.
        The method will return the original job result's headers and body, plus the
        additional HTTP header x-arango-async-job-id. If this header is present,
        then
        the job was found and the response contains the original job's result. If
        the header is not present, the job was not found and the response contains
        status information from the job manager.
      operationId: _apiJobJobIdPUT
      parameters:
      - description: |
          The async job id.
        explode: false
        in: path
        name: job-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: |
            is returned if the job requested via job-id is still in the queue of pending
            (or not yet finished) jobs. In this case, no x-arango-async-id HTTP header
            will be returned.
        "400":
          description: |
            is returned if no job-id was specified in the request. In this case,
            no x-arango-async-id HTTP header will be returned.
        "404":
          description: |
            is returned if the job was not found or already deleted or fetched from
            the job result list. In this case, no x-arango-async-id HTTP header will
            be returned.
      tags:
      - job
      x-eov-operation-handler: controllers/JobController
  /_api/job/{job-id}/cancel:
    put:
      description: |
        Cancels the currently running job identified by job-id. Note that it still
        might take some time to actually cancel the running async job.
      operationId: _apiJobJobIdCancelPUT
      parameters:
      - description: |
          The async job id.
        explode: false
        in: path
        name: job-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            cancel has been initiated.
        "400":
          description: |
            is returned if no job-id was specified in the request. In this case,
            no x-arango-async-id HTTP header will be returned.
        "404":
          description: |
            is returned if the job was not found or already deleted or fetched from
            the job result list. In this case, no x-arango-async-id HTTP header will
            be returned.
      tags:
      - job
      x-eov-operation-handler: controllers/JobController
  /_api/job/{type}#by-type:
    delete:
      description: |
        Deletes either all job results, expired job results, or the result of a
        specific job.
        Clients can use this method to perform an eventual garbage collection of job
        results.
      operationId: _apiJobTypebyTypeDELETE
      parameters:
      - description: |
          The type of jobs to delete. type can be
          * *all* Deletes all jobs results. Currently executing or queued async
            jobs will not be stopped by this call.
          * *expired* Deletes expired results. To determine the expiration status of a
            result, pass the stamp query parameter. stamp needs to be a UNIX timestamp,
            and all async job results created at a lower timestamp will be deleted.
          * *an actual job-id* In this case, the call will remove the result of the
            specified async job. If the job is currently executing or queued, it will
            not be aborted.
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      - description: |
          A UNIX timestamp specifying the expiration threshold when type is expired.
        explode: true
        in: query
        name: stamp
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          description: |
            is returned if the deletion operation was carried out successfully.
            This code will also be returned if no results were deleted.
        "400":
          description: |
            is returned if type is not specified or has an invalid value.
        "404":
          description: |
            is returned if type is a job-id but no async job with the specified id was
            found.
      tags:
      - job
      x-eov-operation-handler: controllers/JobController
    get:
      description: |
        Returns the list of ids of async jobs with a specific status (either done or
        pending).
        The list can be used by the client to get an overview of the job system
        status and
        to retrieve completed job results later.
      operationId: _apiJobTypebyTypeGET
      parameters:
      - description: |
          The type of jobs to return. The type can be either done or pending. Setting
          the type to done will make the method return the ids of already completed
          async
          jobs for which results can be fetched. Setting the type to pending will
          return
          the ids of not yet finished async jobs.
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The maximum number of ids to return per call. If not specified, a
          server-defined maximum value will be used.
        explode: true
        in: query
        name: count
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          description: |
            is returned if the list can be compiled successfully. Note the list might
            be empty.
        "400":
          description: |
            is returned if type is not specified or has an invalid value.
      tags:
      - job
      x-eov-operation-handler: controllers/JobController
  /_api/query-cache/entries:
    get:
      description: |
        Returns an array containing the AQL query results currently stored in the query results
        cache of the selected database. Each result is a JSON object with the following attributes:
        - *hash*: the query result's hash
        - *query*: the query string
        - *bindVars*: the query's bind parameters. this attribute is only shown if tracking for
          bind variables was enabled at server start
        - *size*: the size of the query result and bind parameters, in bytes
        - *results*: number of documents/rows in the query result
        - *started*: the date and time when the query was stored in the cache
        - *hits*: number of times the result was served from the cache (can be
          *0* for queries that were only stored in the cache but were never accessed
          again afterwards)
        - *runTime*: the query's run time
        - *dataSources*: an array of collections/Views the query was using
      operationId: _apiQueryCacheEntriesGET
      responses:
        "200":
          description: |
            Is returned when the list of results can be retrieved successfully.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request,
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/query-cache:
    delete:
      description: |
        clears the query results cache for the current database
      operationId: _apiQueryCacheDELETE
      responses:
        "200":
          description: |
            The server will respond with *HTTP 200* when the cache was cleared
            successfully.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/query-cache/properties:
    get:
      description: |
        Returns the global AQL query results cache configuration. The configuration is a
        JSON object with the following properties:
        - *mode*: the mode the AQL query results cache operates in. The mode is one of the following
          values: *off*, *on* or *demand*.
        - *maxResults*: the maximum number of query results that will be stored per database-specific
          cache.
        - *maxResultsSize*: the maximum cumulated size of query results that will be stored per
          database-specific cache.
        - *maxEntrySize*: the maximum individual result size of queries that will be stored per
          database-specific cache.
        - *includeSystem*: whether or not results of queries that involve system collections will be
          stored in the query results cache.
      operationId: _apiQueryCachePropertiesGET
      responses:
        "200":
          description: |
            Is returned if the properties can be retrieved successfully.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request,
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
    put:
      description: |
        After the properties have been changed, the current set of properties will
        be returned in the HTTP response.
        Note: changing the properties may invalidate all results in the cache.
        The global properties for AQL query cache.
        The properties need to be passed in the attribute *properties* in the body
        of the HTTP request. *properties* needs to be a JSON object with the following
        properties:
      operationId: _apiQueryCachePropertiesPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_query_cache_properties_get_request'
      responses:
        "200":
          description: |
            Is returned if the properties were changed successfully.
        "400":
          description: |
            The server will respond with *HTTP 400* in case of a malformed request,
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/tasks/:
    get:
      description: |
        fetches all existing tasks on the server
      operationId: _apiTasksGET
      responses:
        "200":
          description: |
            The list of tasks
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_api/tasks/{id}:
    delete:
      description: |
        Deletes the task identified by *id* on the server.
      operationId: _apiTasksIdDELETE
      parameters:
      - description: |
          The id of the task to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            If the task was deleted, *HTTP 200* is returned.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_tasks__id__delete_404_response'
          description: |
            If the task *id* is unknown, then an *HTTP 404* is returned.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
    get:
      description: |
        fetches one existing task on the server specified by *id*
      operationId: _apiTasksIdGET
      parameters:
      - description: |
          The id of the task to fetch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            The requested task
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
    put:
      description: |
        registers a new task with the specified id
      operationId: _apiTasksIdPUT
      parameters:
      - description: |
          The id of the task to create
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_tasks__id__delete_request'
      responses:
        "400":
          description: |
            If the task *id* already exists or the rest body is not accurate, *HTTP 400* is returned.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_api/tasks:
    post:
      description: |
        creates a new task with a generated id
      operationId: _apiTasksPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_tasks__id__delete_request'
      responses:
        "200":
          description: |
            The task was registered
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_tasks_post_400_response'
          description: |
            If the post body is not accurate, a *HTTP 400* is returned.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_api/aqlfunction:
    get:
      description: |
        Returns all registered AQL user functions.
        The call will return a JSON array with status codes and all user functions found under *result*.
      operationId: _apiAqlfunctionGET
      parameters:
      - description: |
          Returns all registered AQL user functions from namespace *namespace* under *result*.
        explode: true
        in: query
        name: namespace
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            on success *HTTP 200* is returned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_aqlfunction_get_400_response'
          description: |
            If the user function name is malformed, the server will respond with *HTTP 400*.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
    post:
      description: |
        In case of success, HTTP 200 is returned.
        If the function isn't valid etc. HTTP 400 including a detailed error message will be returned.
      operationId: _apiAqlfunctionPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_aqlfunction_get_request'
      responses:
        "200":
          description: |
            If the function already existed and was replaced by the
            call, the server will respond with *HTTP 200*.
        "201":
          description: |
            If the function can be registered by the server, the server will respond with
            *HTTP 201*.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_aqlfunction_get_400_response_1'
          description: |
            If the JSON representation is malformed or mandatory data is missing from the
            request, the server will respond with *HTTP 400*.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_api/aqlfunction/{name}:
    delete:
      description: |
        Removes an existing AQL user function or function group, identified by *name*.
      operationId: _apiAqlfunctionNameDELETE
      parameters:
      - description: |
          the name of the AQL user function.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: |
          - *true* The function name provided in *name* is treated as
            a namespace prefix, and all functions in the specified namespace will be deleted.
            The returned number of deleted functions may become 0 if none matches the string.
          - *false* The function name provided in *name* must be fully
            qualified, including any namespaces. If none matches the *name*, HTTP 404 is returned.
        explode: true
        in: query
        name: group
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            If the function can be removed by the server, the server will respond with
            *HTTP 200*.
        "400":
          description: |
            If the user function name is malformed, the server will respond with *HTTP 400*.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_aqlfunction__name__delete_404_response'
          description: |
            If the specified user user function does not exist, the server will respond with *HTTP 404*.
      tags:
      - AQL
      x-eov-operation-handler: controllers/AQLController
  /_admin/metrics/v2:
    get:
      description: |
        Returns the instance's current metrics in Prometheus format. The
        returned document collects all instance metrics, which are measured
        at any given time and exposes them for collection by Prometheus.
        The document contains different metrics and metrics groups dependent
        on the role of the queried instance. All exported metrics are
        published with the prefix `arangodb_` or `rocksdb_` to distinguish them from
        other collected data.
        The API then needs to be added to the Prometheus configuration file
        for collection.
      operationId: _adminMetricsV2GET
      parameters:
      - description: |
          Returns metrics of the specified server. If no serverId is given, the asked
          server will reply. This parameter is only meaningful on Coordinators.
        explode: true
        in: query
        name: serverId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Metrics were returned successfully.
        "404":
          description: |
            The metrics API may be disabled using `--server.export-metrics-api false`
            setting in the server. In this case, the result of the call indicates the API
            to be not found.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/metrics:
    get:
      description: "\nReturns the instance's current metrics in Prometheus format.\
        \ The\nreturned document collects all instance metrics, which are measured\n\
        at any given time and exposes them for collection by Prometheus.\n\nThe document\
        \ contains different metrics and metrics groups dependent\non the role of\
        \ the queried instance. All exported metrics are\npublished with the `arangodb_`\
        \ or `rocksdb_` string to distinguish\nthem from other collected data. \n\n\
        The API then needs to be added to the Prometheus configuration file\nfor collection.\n\
        \n"
      operationId: _adminMetricsGET
      parameters:
      - description: "Returns metrics of the specified server. If no serverId is given,\
          \ the asked \nserver will reply. This parameter is only meaningful on Coordinators.\n\
          \n"
        explode: true
        in: query
        name: serverId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Metrics were returned successfully.
        "404":
          description: |
            The metrics API may be disabled using `--server.export-metrics-api false`
            setting in the server. In this case, the result of the call indicates the API
            to be not found.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/server/tls:
    get:
      description: |
        Return a summary of the TLS data. The JSON response will contain a field
        `result` with the following components:
          - `keyfile`: Information about the key file.
          - `clientCA`: Information about the CA for client certificate
            verification.
        If server name indication (SNI) is used and multiple key files are
        configured for different server names, then there is an additional
        attribute `SNI`, which contains for each configured server name
        the corresponding information about the key file for that server name.
        In all cases the value of the attribute will be a JSON object, which
        has a subset of the following attributes (whatever is appropriate):
          - `sha256`: The value is a string with the SHA256 of the whole input
            file.
          - `certificates`: The value is a JSON array with the public
            certificates in the chain in the file.
          - `privateKeySha256`: In cases where there is a private key (`keyfile`
            but not `clientCA`), this field is present and contains a
            JSON string with the SHA256 of the private key.
        This API requires authentication.
      operationId: _adminServerTlsGET
      responses:
        "200":
          description: |
            This API will return HTTP 200 if everything is ok
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
    post:
      description: |
        This API call triggers a reload of all the TLS data and then
        returns a summary. The JSON response is exactly as in the corresponding
        GET request (see there).
        This is a protected API and can only be executed with superuser rights.
      operationId: _adminServerTlsPOST
      responses:
        "200":
          description: |
            This API will return HTTP 200 if everything is ok
        "403":
          description: |
            This API will return HTTP 403 FORBIDDEN if it is not called with
            superuser rights.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/server/encryption:
    post:
      description: |
        Change the user supplied encryption at rest key by sending a request without
        payload to this endpoint. The file supplied via `--rocksdb.encryption-keyfolder`
        will be reloaded and the internal encryption key will be re-encrypted with the
        new user key.
        This is a protected API and can only be executed with superuser rights.
        This API is not available on coordinator nodes.
        The API returns HTTP 404 in case encryption key rotation is disabled.
      operationId: _adminServerEncryptionPOST
      responses:
        "200":
          description: |
            This API will return HTTP 200 if everything is ok
        "403":
          description: |
            This API will return HTTP 403 FORBIDDEN if it is not called with
            superuser rights.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_server_encryption_post_404_response'
          description: |
            This API will return HTTP 404 in case encryption key rotation is disabled.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/server/mode:
    get:
      description: |
        Return mode information about a server. The json response will contain
        a field `mode` with the value `readonly` or `default`. In a read-only server
        all write operations will fail with an error code of `1004` (_ERROR_READ_ONLY_).
        Creating or dropping of databases and collections will also fail with error code `11` (_ERROR_FORBIDDEN_).
        This API requires authentication.
      operationId: _adminServerModeGET
      responses:
        "200":
          description: |
            This API will return HTTP 200 if everything is ok
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
    put:
      description: |
        Update mode information about a server. The json response will contain
        a field `mode` with the value `readonly` or `default`. In a read-only server
        all write operations will fail with an error code of `1004` (_ERROR_READ_ONLY_).
        Creating or dropping of databases and collections will also fail with error
        code `11` (_ERROR_FORBIDDEN_).
        This is a protected API. It requires authentication and administrative
        server rights.
      operationId: _adminServerModePUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_server_mode_get_request'
      responses:
        "200":
          description: |
            This API will return HTTP 200 if everything is ok
        "401":
          description: |
            if the request was not authenticated as a user with sufficient rights
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/server/id:
    get:
      description: |
        Returns the id of a server in a cluster. The request will fail if the
        server is not running in cluster mode.
      operationId: _adminServerIdGET
      responses:
        "200":
          description: |
            Is returned when the server is running in cluster mode.
        "500":
          description: |
            Is returned when the server is not running in cluster mode.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/server/role:
    get:
      description: |
        Returns the role of a server in a cluster.
        The role is returned in the *role* attribute of the result.
        Possible return values for *role* are:
        - *SINGLE*: the server is a standalone server without clustering
        - *COORDINATOR*: the server is a Coordinator in a cluster
        - *PRIMARY*: the server is a DB-Server in a cluster
        - *SECONDARY*: this role is not used anymore
        - *AGENT*: the server is an Agency node in a cluster
        - *UNDEFINED*: in a cluster, *UNDEFINED* is returned if the server role cannot be
           determined.
      operationId: _adminServerRoleGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_server_role_get_200_response'
          description: |
            Is returned in all cases.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/server/availability:
    get:
      description: |
        Return availability information about a server.
        This is a public API so it does *not* require authentication. It is meant to be
        used only in the context of server monitoring.
      operationId: _adminServerAvailabilityGET
      responses:
        "200":
          description: |
            This API will return HTTP 200 in case the server is up and running and usable for
            arbitrary operations, is not set to read-only mode and is currently not a follower
            in case of an active failover setup.
        "503":
          description: |
            HTTP 503 will be returned in case the server is during startup or during shutdown,
            is set to read-only mode or is currently a follower in an active failover setup.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/cluster/statistics:
    get:
      description: |
        Queries the statistics of the given DB-Server
      operationId: _adminClusterStatisticsGET
      parameters:
      - description: ""
        explode: true
        in: query
        name: DBserver
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            is returned when everything went well.
        "400":
          description: |
            the parameter DBserver was not given or is not the ID of a DB-Server
        "403":
          description: |
            server is not a DB-Server.
      tags:
      - Cluster
      x-eov-operation-handler: controllers/ClusterController
  /_admin/cluster/health:
    get:
      description: |
        Queries the health of the cluster for monitoring purposes. The response is a JSON object, containing the standard `code`, `error`, `errorNum`, and `errorMessage` fields as appropriate. The endpoint-specific fields are as follows:
        - `ClusterId`: A UUID string identifying the cluster
        - `Health`: An object containing a descriptive sub-object for each node in the cluster.
          - `<nodeID>`: Each entry in `Health` will be keyed by the node ID and contain the following attributes:
            - `Endpoint`: A string representing the network endpoint of the server.
            - `Role`: The role the server plays. Possible values are `"AGENT"`, `"COORDINATOR"`, and `"DBSERVER"`.
            - `CanBeDeleted`: Boolean representing whether the node can safely be removed from the cluster.
            - `Version`: Version String of ArangoDB used by that node.
            - `Engine`: Storage Engine used by that node.
            - `Status`: A string indicating the health of the node as assessed by the supervision (Agency). This should be considered primary source of truth for Coordinator and DB-Servers node health. If the node is responding normally to requests, it is `"GOOD"`. If it has missed one heartbeat, it is `"BAD"`. If it has been declared failed by the supervision, which occurs after missing heartbeats for about 15 seconds, it will be marked `"FAILED"`.
            Additionally it will also have the following attributes for:
            **Coordinators** and **DB-Servers**
            - `SyncStatus`: The last sync status reported by the node. This value is primarily used to determine the value of `Status`. Possible values include `"UNKNOWN"`, `"UNDEFINED"`, `"STARTUP"`, `"STOPPING"`, `"STOPPED"`, `"SERVING"`, `"SHUTDOWN"`.
            - `LastAckedTime`: ISO 8601 timestamp specifying the last heartbeat received.
            - `ShortName`: A string representing the shortname of the server, e.g. `"Coordinator0001"`.
            - `Timestamp`: ISO 8601 timestamp specifying the last heartbeat received. (deprecated)
            - `Host`: An optional string, specifying the host machine if known.
            **Coordinators** only
            - `AdvertisedEndpoint`: A string representing the advertised endpoint, if set. (e.g. external IP address or load balancer, optional)
            **Agents**
            - `Leader`: ID of the Agent this node regards as leader.
            - `Leading`: Whether this Agent is the leader (true) or not (false).
            - `LastAckedTime`: Time since last `acked` in seconds.
      operationId: _adminClusterHealthGET
      responses:
        "200":
          description: |
            is returned when everything went well.
      tags:
      - Cluster
      x-eov-operation-handler: controllers/ClusterController
  /_admin/cluster/rebalance:
    get:
      description: "\nComputes the current cluster imbalance and returns the result.\
        \ \nIt additionally shows the amount of ongoing and pending move shard operations.\n\
        \n"
      operationId: _adminClusterRebalanceGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_cluster_rebalance_get_200_response'
          description: |
            This API returns HTTP 200.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
    post:
      description: |
        Compute a set of move shard operations to improve balance.
      operationId: _adminClusterRebalancePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_cluster_rebalance_get_request'
      responses:
        "200":
          description: |
            This API returns HTTP 200.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
    put:
      description: |
        Compute a set of move shard operations to improve balance.
        These moves are then immediately executed.
      operationId: _adminClusterRebalancePUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_cluster_rebalance_get_request'
      responses:
        "200":
          description: |
            This API returns HTTP 200.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/cluster/rebalance/execute:
    post:
      description: |
        Execute the given set of move shard operations. You can use the
        `POST /_admin/cluster/rebalance` endpoint to calculate these operations to improve
        the balance of shards, leader shards, and follower shards.
      operationId: _adminClusterRebalanceExecutePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_cluster_rebalance_execute_post_request'
      responses:
        "200":
          description: |
            This API returns HTTP 200 if no operations are provided.
        "202":
          description: |
            This API returns HTTP 202 if the operations have been accepted and scheduled for execution.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/compact:
    put:
      description: |
        This endpoint can be used to reclaim disk space after substantial data
        deletions have taken place. It requires superuser access.
      operationId: _adminCompactPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_compact_put_request'
      responses:
        "200":
          description: |
            Compaction started successfully
        "401":
          description: |
            if the request was not authenticated as a user with sufficient rights
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_admin/routing/reload:
    post:
      description: |
        Reloads the routing information from the collection *routing*.
      operationId: _adminRoutingReloadPOST
      responses:
        "200":
          description: |
            Routing information was reloaded successfully.
      tags:
      - Administration
      x-eov-operation-handler: controllers/AdministrationController
  /_api/index#inverted:
    post:
      description: |
        Creates an inverted index for the collection `collection-name`, if
        it does not already exist. The call expects an object containing the index
        details.
      operationId: _apiIndexinvertedPOST
      parameters:
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_index_inverted_post_request'
      responses:
        "200":
          description: |
            If the index already exists, then a *HTTP 200* is returned.
        "201":
          description: |
            If the index does not already exist and can be created, then a *HTTP 201*
            is returned.
        "404":
          description: |
            If the `collection-name` is unknown, then a *HTTP 404* is returned.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
  /_api/index#ttl:
    post:
      description: |
        Creates a TTL index for the collection *collection-name* if it
        does not already exist. The call expects an object containing the index
        details.
      operationId: _apiIndexttlPOST
      parameters:
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_index_ttl_post_request'
      responses:
        "200":
          description: |
            If the index already exists, then a *HTTP 200* is returned.
        "201":
          description: |
            If the index does not already exist and could be created, then a *HTTP 201*
            is returned.
        "400":
          description: |
            If the collection already contains another TTL index, then an *HTTP 400* is
            returned, as there can be at most one TTL index per collection.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
  /_api/index/{index-id}:
    delete:
      description: |
        Deletes an index with *index-id*.
      operationId: _apiIndexIndexIdDELETE
      parameters:
      - description: |
          The index id.
        explode: false
        in: path
        name: index-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            If the index could be deleted, then an *HTTP 200* is
            returned.
        "404":
          description: |
            If the *index-id* is unknown, then an *HTTP 404* is returned.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
    get:
      description: |
        The result is an object describing the index. It has at least the following
        attributes:
        - *id*: the identifier of the index
        - *type*: the index type
        All other attributes are type-dependent. For example, some indexes provide
        *unique* or *sparse* flags, whereas others don't. Some indexes also provide
        a selectivity estimate in the *selectivityEstimate* attribute of the result.
      operationId: _apiIndexIndexIdGET
      parameters:
      - description: |
          The index identifier.
        explode: false
        in: path
        name: index-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            If the index exists, then a *HTTP 200* is returned.
        "404":
          description: |
            If the index does not exist, then a *HTTP 404*
            is returned.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
  /_api/index#general:
    post:
      description: |
        Creates a new index in the collection `collection`. Expects
        an object containing the index details.
        The type of the index to be created must specified in the **type**
        attribute of the index details. Depending on the index type, additional
        other attributes may need to specified in the request in order to create
        the index.
        Indexes require the to be indexed attribute(s) in the **fields** attribute
        of the index details. Depending on the index type, a single attribute or
        multiple attributes can be indexed. In the latter case, an array of
        strings is expected.
        The `.` character denotes sub-attributes in attribute paths. Attributes with
        literal `.` in their name cannot be indexed. Attributes with the name `_id`
        cannot be indexed either, neither as a top-level attribute nor as a sub-attribute.
        Optionally, an index name may be specified as a string in the **name** attribute.
        Index names have the same restrictions as collection names. If no value is
        specified, one will be auto-generated.
        Persistent indexes (including vertex-centric indexes) can be created as unique
        or non-unique variants. Uniqueness can be controlled by specifying the
        **unique** option for the index definition. Setting it to `true` creates a
        unique index. Setting it to `false` or omitting the `unique` attribute creates a
        non-unique index.
        **Note**: Unique indexes on non-shard keys are not supported in a cluster.
        Persistent indexes can optionally be created in a sparse
        variant. A sparse index will be created if the **sparse** attribute in
        the index details is set to `true`. Sparse indexes do not index documents
        for which any of the index attributes is either not set or is `null`.
        The optional **deduplicate** attribute is supported by persistent array indexes.
        It controls whether inserting duplicate index values
        from the same document into a unique array index will lead to a unique constraint
        error or not. The default value is `true`, so only a single instance of each
        non-unique index value will be inserted into the index per document. Trying to
        insert a value into the index that already exists in the index always fails,
        regardless of the value of this attribute.
        The optional **estimates** attribute is supported by persistent indexes.
        This attribute controls whether index selectivity estimates are
        maintained for the index. Not maintaining index selectivity estimates can have
        a slightly positive impact on write performance.
        The downside of turning off index selectivity estimates will be that
        the query optimizer will not be able to determine the usefulness of different
        competing indexes in AQL queries when there are multiple candidate indexes to
        choose from.
        The `estimates` attribute is optional and defaults to `true` if not set. It will
        have no effect on indexes other than persistent indexes.
        The optional attribute **cacheEnabled** is supported by indexes of type
        *persistent*. This attribute controls whether an extra in-memory hash cache is
        created for the index. The hash cache can be used to speed up index lookups.
        The cache can only be used for queries that look up all index attributes via
        an equality lookup (`==`). The hash cache cannot be used for range scans,
        partial lookups or sorting.
        The cache will be populated lazily upon reading data from the index. Writing data
        into the collection or updating existing data will invalidate entries in the
        cache. The cache may have a negative effect on performance in case index values
        are updated more often than they are read.
        The maximum size of cache entries that can be stored is currently 4 MB, i.e.
        the cumulated size of all index entries for any index lookup value must be
        less than 4 MB. This limitation is there to avoid storing the index entries
        of "super nodes" in the cache.
        `cacheEnabled` defaults to `false` and should only be used for indexes that
        are known to benefit from an extra layer of caching.
        The optional attribute **inBackground** can be set to `true` to create the index
        in the background, which will not write-lock the underlying collection for
        as long as if the index is built in the foreground.
      operationId: _apiIndexgeneralPOST
      parameters:
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_index_general_post_request'
      responses:
        "200":
          description: |
            If the index already exists, then an *HTTP 200* is returned.
        "201":
          description: |
            If the index does not already exist and could be created, then an *HTTP 201*
            is returned.
        "400":
          description: |
            If an invalid index description is posted or attributes are used that the
            target index will not support, then an *HTTP 400* is returned.
        "404":
          description: |
            If *collection* is unknown, then an *HTTP 404* is returned.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
  /_api/index:
    get:
      description: |
        Returns an object with an attribute *indexes* containing an array of all
        index descriptions for the given collection. The same information is also
        available in the *identifiers* as an object with the index handles as
        keys.
      operationId: _apiIndexGET
      parameters:
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      - description: |
          Whether to include figures and estimates in the result.
        explode: true
        in: query
        name: withStats
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Whether to include hidden indexes in the result.
        explode: true
        in: query
        name: withHidden
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            returns a JSON object containing a list of indexes on that collection.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
  /_api/index#geo:
    post:
      description: |
        Creates a geo-spatial index in the collection `collection`, if
        it does not already exist. Expects an object containing the index details.
        Geo indexes are always sparse, meaning that documents that do not contain
        the index attributes or have non-numeric values in the index attributes
        will not be indexed.
      operationId: _apiIndexgeoPOST
      parameters:
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_index_geo_post_request'
      responses:
        "200":
          description: |
            If the index already exists, then a *HTTP 200* is returned.
        "201":
          description: |
            If the index does not already exist and could be created, then a *HTTP 201*
            is returned.
        "404":
          description: |
            If the `collection` is unknown, then a *HTTP 404* is returned.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
  /_api/index#persistent:
    post:
      description: |
        Creates a persistent index for the collection `collection-name`, if
        it does not already exist. The call expects an object containing the index
        details.
        In a sparse index all documents will be excluded from the index that do not
        contain at least one of the specified index attributes (i.e. `fields`) or that
        have a value of `null` in any of the specified index attributes. Such documents
        will not be indexed, and not be taken into account for uniqueness checks if
        the `unique` flag is set.
        In a non-sparse index, these documents will be indexed (for non-present
        indexed attributes, a value of `null` will be used) and will be taken into
        account for uniqueness checks if the `unique` flag is set.
        **Note**: Unique indexes on non-shard keys are not supported in a cluster.
      operationId: _apiIndexpersistentPOST
      parameters:
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_index_persistent_post_request'
      responses:
        "200":
          description: |
            If the index already exists, then a *HTTP 200* is
            returned.
        "201":
          description: |
            If the index does not already exist and could be created, then a *HTTP 201*
            is returned.
        "400":
          description: |
            If the collection already contains documents and you try to create a unique
            persistent index in such a way that there are documents violating the
            uniqueness, then a *HTTP 400* is returned.
        "404":
          description: |
            If the `collection-name` is unknown, then a *HTTP 404* is returned.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
  /_api/index#multi-dim:
    post:
      description: |
        Creates a multi-dimensional index for the collection *collection-name*, if
        it does not already exist. The call expects an object containing the index
        details.
      operationId: _apiIndexmultiDimPOST
      parameters:
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_index_multi_dim_post_request'
      responses:
        "200":
          description: |
            If the index already exists, then a *HTTP 200* is
            returned.
        "201":
          description: |
            If the index does not already exist and could be created, then a *HTTP 201*
            is returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404* is returned.
        "400":
          description: |
            If the index definition is invalid, then a *HTTP 400* is returned.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
  /_api/index#fulltext:
    post:
      description: |
        Creates a fulltext index for the collection *collection-name*, if
        it does not already exist. The call expects an object containing the index
        details.
      operationId: _apiIndexfulltextPOST
      parameters:
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_index_fulltext_post_request'
      responses:
        "200":
          description: |
            If the index already exists, then a *HTTP 200* is
            returned.
        "201":
          description: |
            If the index does not already exist and could be created, then a *HTTP 201*
            is returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Indexes
      x-eov-operation-handler: controllers/IndexesController
  /_api/document/{collection}/{key}:
    delete:
      description: |
        If `silent` is not set to `true`, the body of the response contains a JSON
        object with the information about the identifier and the revision. The attribute
        `_id` contains the known *document ID* of the removed document, `_key`
        contains the key which uniquely identifies a document in a given collection,
        and the attribute `_rev` contains the document revision.
        If the `waitForSync` parameter is not specified or set to `false`,
        then the collection's default `waitForSync` behavior is applied.
        The `waitForSync` query parameter cannot be used to disable
        synchronization for collections that have a default `waitForSync`
        value of `true`.
        If the query parameter `returnOld` is `true`, then
        the complete previous revision of the document
        is returned under the `old` attribute in the result.
      operationId: _apiDocumentCollectionKeyDELETE
      parameters:
      - description: |
          Name of the `collection` in which the document is to be deleted.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The document key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Wait until deletion operation has been synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete previous revision of the changed
          document under the attribute `old` in the result.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, an empty object is returned as response if the document operation
          succeeds. No meta-data is returned for the deleted document. If the
          operation raises an error, an error object is returned.
          You can use this option to save network traffic.
        explode: true
        in: query
        name: silent
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          You can conditionally remove a document based on a target revision id by
          using the `if-match` HTTP header.
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            is returned if the document was removed successfully and
            `waitForSync` was `true`.
        "202":
          description: |
            is returned if the document was removed successfully and
            `waitForSync` was `false`.
        "404":
          description: |
            is returned if the collection or the document was not found.
            The response body contains an error document in this case.
        "412":
          description: |
            is returned if a "If-Match" header or `rev` is given and the found
            document has a different version. The response also contain the found
            document's current revision in the `_rev` attribute. Additionally, the
            attributes `_id` and `_key` are returned.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
    get:
      description: |
        Returns the document identified by *document-id*. The returned
        document contains three special attributes: *_id* containing the document
        identifier, *_key* containing key which uniquely identifies a document
        in a given collection and *_rev* containing the revision.
      operationId: _apiDocumentCollectionKeyGET
      parameters:
      - description: |
          Name of the *collection* from which the document is to be read.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The document key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: |
          If the "If-None-Match" header is given, then it must contain exactly one
          Etag. The document is returned, if it has a different revision than the
          given Etag. Otherwise an *HTTP 304* is returned.
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: |
          If the "If-Match" header is given, then it must contain exactly one
          Etag. The document is returned, if it has the same revision as the
          given Etag. Otherwise a *HTTP 412* is returned.
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: |
          Set this header to `true` to allow the Coordinator to ask any shard replica for
          the data, not only the shard leader. This may result in "dirty reads".
          The header is ignored if this operation is part of a Stream Transaction
          (`x-arango-trx-id` header). The header set when creating the transaction decides
          about dirty reads for the entire transaction, not the individual read operations.
        explode: false
        in: header
        name: x-arango-allow-dirty-read
        required: false
        schema:
          type: boolean
        style: simple
      - description: |
          To make this operation a part of a Stream Transaction, set this header to the
          transaction ID returned by the `POST /_api/transaction/begin` call.
        explode: false
        in: header
        name: x-arango-trx-id
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            is returned if the document was found
        "304":
          description: |
            is returned if the "If-None-Match" header is given and the document has
            the same version
        "404":
          description: |
            is returned if the document or collection was not found
        "412":
          description: |
            is returned if an "If-Match" header is given and the found
            document has a different version. The response will also contain the found
            document's current revision in the *_rev* attribute. Additionally, the
            attributes *_id* and *_key* will be returned.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
    head:
      description: |
        Like *GET*, but only returns the header fields and not the body. You
        can use this call to get the current revision of a document or check if
        the document was deleted.
      operationId: _apiDocumentCollectionKeyHEAD
      parameters:
      - description: |
          Name of the *collection* from which the document is to be read.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The document key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: |
          If the "If-None-Match" header is given, then it must contain exactly one
          Etag. If the current document revision is not equal to the specified Etag,
          an *HTTP 200* response is returned. If the current document revision is
          identical to the specified Etag, then an *HTTP 304* is returned.
        explode: false
        in: header
        name: If-None-Match
        required: false
        schema:
          type: string
        style: simple
      - description: |
          If the "If-Match" header is given, then it must contain exactly one
          Etag. The document is returned, if it has the same revision as the
          given Etag. Otherwise a *HTTP 412* is returned.
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      - description: |
          Set this header to `true` to allow the Coordinator to ask any shard replica for
          the data, not only the shard leader. This may result in "dirty reads".
          The header is ignored if this operation is part of a Stream Transaction
          (`x-arango-trx-id` header). The header set when creating the transaction decides
          about dirty reads for the entire transaction, not the individual read operations.
        explode: false
        in: header
        name: x-arango-allow-dirty-read
        required: false
        schema:
          type: boolean
        style: simple
      - description: |
          To make this operation a part of a Stream Transaction, set this header to the
          transaction ID returned by the `POST /_api/transaction/begin` call.
        explode: false
        in: header
        name: x-arango-trx-id
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            is returned if the document was found
        "304":
          description: |
            is returned if the "If-None-Match" header is given and the document has
            the same version
        "404":
          description: |
            is returned if the document or collection was not found
        "412":
          description: |
            is returned if an "If-Match" header is given and the found
            document has a different version. The response will also contain the found
            document's current revision in the *Etag* header.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
    patch:
      description: |
        Partially updates the document identified by the *document ID*.
        The body of the request must contain a JSON document with the
        attributes to patch (the patch document). All attributes from the
        patch document are added to the existing document if they do not
        yet exist, and overwritten in the existing document if they do exist
        there.
        The value of the `_key` attribute as well as attributes
        used as sharding keys may not be changed.
        Setting an attribute value to `null` in the patch document causes a
        value of `null` to be saved for the attribute by default.
        If the `If-Match` header is specified and the revision of the
        document in the database is unequal to the given revision, the
        precondition is violated.
        If `If-Match` is not given and `ignoreRevs` is `false` and there
        is a `_rev` attribute in the body and its value does not match
        the revision of the document in the database, the precondition is
        violated.
        If a precondition is violated, an *HTTP 412* is returned.
        If the document exists and can be updated, then an *HTTP 201* or
        an *HTTP 202* is returned (depending on `waitForSync`, see below),
        the `Etag` header field contains the new revision of the document
        (in double quotes) and the `Location` header contains a complete URL
        under which the document can be queried.
        Cluster only: The patch document _may_ contain
        values for the collection's pre-defined shard keys. Values for the shard keys
        are treated as hints to improve performance. Should the shard keys
        values be incorrect ArangoDB may answer with a `not found` error
        Optionally, the query parameter `waitForSync` can be used to force
        synchronization of the updated document operation to disk even in case
        that the `waitForSync` flag had been disabled for the entire collection.
        Thus, the `waitForSync` query parameter can be used to force synchronization
        of just specific operations. To use this, set the `waitForSync` parameter
        to `true`. If the `waitForSync` parameter is not specified or set to
        `false`, then the collection's default `waitForSync` behavior is
        applied. The `waitForSync` query parameter cannot be used to disable
        synchronization for collections that have a default `waitForSync` value
        of `true`.
        If `silent` is not set to `true`, the body of the response contains a JSON
        object with the information about the identifier and the revision. The attribute
        `_id` contains the known *document ID* of the updated document, `_key`
        contains the key which uniquely identifies a document in a given collection,
        and the attribute `_rev` contains the new document revision.
        If the query parameter `returnOld` is `true`, then
        the complete previous revision of the document
        is returned under the `old` attribute in the result.
        If the query parameter `returnNew` is `true`, then
        the complete new document is returned under
        the `new` attribute in the result.
        If the document does not exist, then a *HTTP 404* is returned and the
        body of the response contains an error document.
      operationId: _apiDocumentCollectionKeyPATCH
      parameters:
      - description: |
          Name of the `collection` in which the document is to be updated.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The document key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: |
          If the intention is to delete existing attributes with the patch
          command, the URL query parameter `keepNull` can be used with a value
          of `false`. This modifies the behavior of the patch command to
          remove any attributes from the existing document that are contained
          in the patch document with an attribute value of `null`.
        explode: true
        in: query
        name: keepNull
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Controls whether objects (not arrays) are merged if present in
          both the existing and the patch document. If set to `false`, the
          value in the patch document overwrites the existing document's
          value. If set to `true`, objects are merged. The default is
          `true`.
        explode: true
        in: query
        name: mergeObjects
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Wait until document has been synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          By default, or if this is set to `true`, the `_rev` attributes in
          the given document is ignored. If this is set to `false`, then
          the `_rev` attribute given in the body document is taken as a
          precondition. The document is only updated if the current revision
          is the one specified.
        explode: true
        in: query
        name: ignoreRevs
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete previous revision of the changed
          document under the attribute `old` in the result.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete new document under the attribute `new`
          in the result.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, an empty object is returned as response if the document operation
          succeeds. No meta-data is returned for the updated document. If the
          operation raises an error, an error object is returned.
          You can use this option to save network traffic.
        explode: true
        in: query
        name: silent
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          You can conditionally update a document based on a target revision id by
          using the `if-match` HTTP header.
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_document__collection___key__delete_request_1'
      responses:
        "201":
          description: |
            is returned if the document was updated successfully and
            `waitForSync` was `true`.
        "202":
          description: |
            is returned if the document was updated successfully and
            `waitForSync` was `false`.
        "400":
          description: |
            is returned if the body does not contain a valid JSON representation
            of a document. The response body contains
            an error document in this case.
        "404":
          description: |
            is returned if the collection or the document was not found.
        "409":
          description: "\nis returned if the update causes a unique constraint violation\
            \ in \na secondary index.\n"
        "412":
          description: |
            is returned if the precondition was violated. The response also contains
            the found documents' current revisions in the `_rev` attributes.
            Additionally, the attributes `_id` and `_key` are returned.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
    put:
      description: |
        Replaces the specified document with the one in the body, provided there is
        such a document and no precondition is violated.
        The value of the `_key` attribute as well as attributes
        used as sharding keys may not be changed.
        If the `If-Match` header is specified and the revision of the
        document in the database is unequal to the given revision, the
        precondition is violated.
        If `If-Match` is not given and `ignoreRevs` is `false` and there
        is a `_rev` attribute in the body and its value does not match
        the revision of the document in the database, the precondition is
        violated.
        If a precondition is violated, an *HTTP 412* is returned.
        If the document exists and can be updated, then an *HTTP 201* or
        an *HTTP 202* is returned (depending on `waitForSync`, see below),
        the `Etag` header field contains the new revision of the document
        and the `Location` header contains a complete URL under which the
        document can be queried.
        Cluster only: The replace documents _may_ contain
        values for the collection's pre-defined shard keys. Values for the shard keys
        are treated as hints to improve performance. Should the shard keys
        values be incorrect ArangoDB may answer with a *not found* error.
        Optionally, the query parameter `waitForSync` can be used to force
        synchronization of the document replacement operation to disk even in case
        that the `waitForSync` flag had been disabled for the entire collection.
        Thus, the `waitForSync` query parameter can be used to force synchronization
        of just specific operations. To use this, set the `waitForSync` parameter
        to `true`. If the `waitForSync` parameter is not specified or set to
        `false`, then the collection's default `waitForSync` behavior is
        applied. The `waitForSync` query parameter cannot be used to disable
        synchronization for collections that have a default `waitForSync` value
        of `true`.
        If `silent` is not set to `true`, the body of the response contains a JSON
        object with the information about the identifier and the revision. The attribute
        `_id` contains the known *document ID* of the updated document, `_key`
        contains the key which uniquely identifies a document in a given collection,
        and the attribute `_rev` contains the new document revision.
        If the query parameter `returnOld` is `true`, then
        the complete previous revision of the document
        is returned under the `old` attribute in the result.
        If the query parameter `returnNew` is `true`, then
        the complete new document is returned under
        the `new` attribute in the result.
        If the document does not exist, then a *HTTP 404* is returned and the
        body of the response contains an error document.
      operationId: _apiDocumentCollectionKeyPUT
      parameters:
      - description: |
          Name of the `collection` in which the document is to be replaced.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The document key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Wait until document has been synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          By default, or if this is set to `true`, the `_rev` attributes in
          the given document is ignored. If this is set to `false`, then
          the `_rev` attribute given in the body document is taken as a
          precondition. The document is only replaced if the current revision
          is the one specified.
        explode: true
        in: query
        name: ignoreRevs
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete previous revision of the changed
          document under the attribute `old` in the result.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete new document under the attribute `new`
          in the result.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, an empty object is returned as response if the document operation
          succeeds. No meta-data is returned for the replaced document. If the
          operation raises an error, an error object is returned.
          You can use this option to save network traffic.
        explode: true
        in: query
        name: silent
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          You can conditionally replace a document based on a target revision id by
          using the `if-match` HTTP header.
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_document__collection___key__delete_request'
      responses:
        "201":
          description: |
            is returned if the document was replaced successfully and
            `waitForSync` was `true`.
        "202":
          description: |
            is returned if the document was replaced successfully and
            `waitForSync` was `false`.
        "400":
          description: |
            is returned if the body does not contain a valid JSON representation
            of a document. The response body contains
            an error document in this case.
        "404":
          description: |
            is returned if the collection or the document was not found.
        "409":
          description: "\nis returned if the replace causes a unique constraint violation\
            \ in \na secondary index.\n"
        "412":
          description: |
            is returned if the precondition is violated. The response also contains
            the found documents' current revisions in the `_rev` attributes.
            Additionally, the attributes `_id` and `_key` are returned.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
  /_api/document/{collection}:
    delete:
      description: |
        The body of the request is an array consisting of selectors for
        documents. A selector can either be a string with a key or a string
        with a document identifier or an object with a `_key` attribute. This
        API call removes all specified documents from `collection`.
        If the `ignoreRevs` query parameter is `false` and the
        selector is an object and has a `_rev` attribute, it is a
        precondition that the actual revision of the removed document in the
        collection is the specified one.
        The body of the response is an array of the same length as the input
        array. For each input selector, the output contains a JSON object
        with the information about the outcome of the operation. If no error
        occurred, an object is built in which the attribute `_id` contains
        the known *document ID* of the removed document, `_key` contains
        the key which uniquely identifies a document in a given collection,
        and the attribute `_rev` contains the document revision. In case of
        an error, an object with the attribute `error` set to `true` and
        `errorCode` set to the error code is built.
        If the `waitForSync` parameter is not specified or set to `false`,
        then the collection's default `waitForSync` behavior is applied.
        The `waitForSync` query parameter cannot be used to disable
        synchronization for collections that have a default `waitForSync`
        value of `true`.
        If the query parameter `returnOld` is `true`, then
        the complete previous revision of the document
        is returned under the `old` attribute in the result.
        Note that if any precondition is violated or an error occurred with
        some of the documents, the return code is still 200 or 202, but
        the additional HTTP header `X-Arango-Error-Codes` is set, which
        contains a map of the error codes that occurred together with their
        multiplicities, as in: `1200:17,1205:10` which means that in 17
        cases the error 1200 "revision conflict" and in 10 cases the error
        1205 "illegal document handle" has happened.
      operationId: _apiDocumentCollectionDELETE
      parameters:
      - description: |
          Collection from which documents are removed.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Wait until deletion operation has been synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete previous revision of the changed
          document under the attribute `old` in the result.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, an empty object is returned as response if all document operations
          succeed. No meta-data is returned for the deleted documents. If at least one of
          the operations raises an error, an array with the error object(s) is returned.
          You can use this option to save network traffic but you cannot map any errors
          to the inputs of your request.
        explode: true
        in: query
        name: silent
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, ignore any `_rev` attribute in the selectors. No
          revision check is performed. If set to `false` then revisions are checked.
          The default is `true`.
        explode: true
        in: query
        name: ignoreRevs
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_document__collection__delete_request_2'
      responses:
        "200":
          description: |
            is returned if `waitForSync` was `true`.
        "202":
          description: |
            is returned if `waitForSync` was `false`.
        "404":
          description: |
            is returned if the collection was not found.
            The response body contains an error document in this case.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
    patch:
      description: |
        Partially updates documents, the documents to update are specified
        by the `_key` attributes in the body objects. The body of the
        request must contain a JSON array of document updates with the
        attributes to patch (the patch documents). All attributes from the
        patch documents are added to the existing documents if they do
        not yet exist, and overwritten in the existing documents if they do
        exist there.
        The value of the `_key` attribute as well as attributes
        used as sharding keys may not be changed.
        Setting an attribute value to `null` in the patch documents causes a
        value of `null` to be saved for the attribute by default.
        If `ignoreRevs` is `false` and there is a `_rev` attribute in a
        document in the body and its value does not match the revision of
        the corresponding document in the database, the precondition is
        violated.
        Cluster only: The patch document _may_ contain
        values for the collection's pre-defined shard keys. Values for the shard keys
        are treated as hints to improve performance. Should the shard keys
        values be incorrect ArangoDB may answer with a *not found* error
        Optionally, the query parameter `waitForSync` can be used to force
        synchronization of the document replacement operation to disk even in case
        that the `waitForSync` flag had been disabled for the entire collection.
        Thus, the `waitForSync` query parameter can be used to force synchronization
        of just specific operations. To use this, set the `waitForSync` parameter
        to `true`. If the `waitForSync` parameter is not specified or set to
        `false`, then the collection's default `waitForSync` behavior is
        applied. The `waitForSync` query parameter cannot be used to disable
        synchronization for collections that have a default `waitForSync` value
        of `true`.
        The body of the response contains a JSON array of the same length
        as the input array with the information about the identifier and the
        revision of the updated documents. In each entry, the attribute
        `_id` contains the known *document ID* of each updated document,
        `_key` contains the key which uniquely identifies a document in a
        given collection, and the attribute `_rev` contains the new document
        revision. In case of an error or violated precondition, an error
        object with the attribute `error` set to `true` and the attribute
        `errorCode` set to the error code is built.
        If the query parameter `returnOld` is `true`, then, for each
        generated document, the complete previous revision of the document
        is returned under the `old` attribute in the result.
        If the query parameter `returnNew` is `true`, then, for each
        generated document, the complete new document is returned under
        the `new` attribute in the result.
        Note that if any precondition is violated or an error occurred with
        some of the documents, the return code is still 201 or 202, but
        the additional HTTP header `X-Arango-Error-Codes` is set, which
        contains a map of the error codes that occurred together with their
        multiplicities, as in: `1200:17,1205:10` which means that in 17
        cases the error 1200 "revision conflict" and in 10 cases the error
        1205 "illegal document handle" has happened.
      operationId: _apiDocumentCollectionPATCH
      parameters:
      - description: |
          Name of the `collection` in which the documents are to be updated.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          If the intention is to delete existing attributes with the patch
          command, the URL query parameter `keepNull` can be used with a value
          of `false`. This modifies the behavior of the patch command to
          remove any attributes from the existing document that are contained
          in the patch document with an attribute value of `null`.
        explode: true
        in: query
        name: keepNull
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Controls whether objects (not arrays) are merged if present in
          both the existing and the patch document. If set to `false`, the
          value in the patch document overwrites the existing document's
          value. If set to `true`, objects are merged. The default is
          `true`.
        explode: true
        in: query
        name: mergeObjects
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Wait until the new documents have been synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          By default, or if this is set to `true`, the `_rev` attributes in
          the given documents are ignored. If this is set to `false`, then
          any `_rev` attribute given in a body document is taken as a
          precondition. The document is only updated if the current revision
          is the one specified.
        explode: true
        in: query
        name: ignoreRevs
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete previous revision of the changed
          documents under the attribute `old` in the result.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete new documents under the attribute `new`
          in the result.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, an empty object is returned as response if all document operations
          succeed. No meta-data is returned for the updated documents. If at least one
          operation raises an error, an array with the error object(s) is returned.
          You can use this option to save network traffic but you cannot map any errors
          to the inputs of your request.
        explode: true
        in: query
        name: silent
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_document__collection__delete_request_3'
      responses:
        "201":
          description: |
            is returned if `waitForSync` was `true` and operations were processed.
        "202":
          description: |
            is returned if `waitForSync` was `false` and operations were processed.
        "400":
          description: |
            is returned if the body does not contain a valid JSON representation
            of an array of documents. The response body contains
            an error document in this case.
        "404":
          description: |
            is returned if the collection was not found.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
    post:
      description: |
        Creates a new document from the document given in the body, unless there
        is already a document with the `_key` given. If no `_key` is given, a new
        unique `_key` is generated automatically.
        Possibly given `_id` and `_rev` attributes in the body are always ignored,
        the URL part or the query parameter collection respectively counts.
        If the document was created successfully, then the `Location` header
        contains the path to the newly created document. The `Etag` header field
        contains the revision of the document. Both are only set in the single
        document case.
        If `silent` is not set to `true`, the body of the response contains a
        JSON object with the following attributes:
          - `_id` contains the document identifier of the newly created document
          - `_key` contains the document key
          - `_rev` contains the document revision
        If the collection parameter `waitForSync` is `false`, then the call
        returns as soon as the document has been accepted. It does not wait
        until the documents have been synced to disk.
        Optionally, the query parameter `waitForSync` can be used to force
        synchronization of the document creation operation to disk even in
        case that the `waitForSync` flag had been disabled for the entire
        collection. Thus, the `waitForSync` query parameter can be used to
        force synchronization of just this specific operations. To use this,
        set the `waitForSync` parameter to `true`. If the `waitForSync`
        parameter is not specified or set to `false`, then the collection's
        default `waitForSync` behavior is applied. The `waitForSync` query
        parameter cannot be used to disable synchronization for collections
        that have a default `waitForSync` value of `true`.
        If the query parameter `returnNew` is `true`, then, for each
        generated document, the complete new document is returned under
        the `new` attribute in the result.
      operationId: _apiDocumentCollectionPOST
      parameters:
      - description: |
          Name of the `collection` in which the document is to be created.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the collection. This query parameter is only for backward compatibility.
          In ArangoDB versions < 3.0, the URL path was `/_api/document` and
          this query parameter was required. This combination still works, but
          the recommended way is to specify the collection in the URL path.
        explode: true
        in: query
        name: collection
        required: false
        schema:
          type: string
        style: form
      - description: |
          Wait until document has been synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Additionally return the complete new document under the attribute `new`
          in the result.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Additionally return the complete old document under the attribute `old`
          in the result. Only available if the overwrite option is used.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, an empty object is returned as response if the document operation
          succeeds. No meta-data is returned for the created document. If the
          operation raises an error, an error object is returned.
          You can use this option to save network traffic.
        explode: true
        in: query
        name: silent
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, the insert becomes a replace-insert. If a document with the
          same `_key` already exists, the new document is not rejected with unique
          constraint violation error but replaces the old document. Note that operations
          with `overwrite` parameter require a `_key` attribute in the request payload,
          therefore they can only be performed on collections sharded by `_key`.
        explode: true
        in: query
        name: overwrite
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          This option supersedes `overwrite` and offers the following modes
          - `"ignore"` if a document with the specified `_key` value exists already,
            nothing is done and no write operation is carried out. The
            insert operation returns success in this case. This mode does not
            support returning the old document version using `RETURN OLD`. When using
            `RETURN NEW`, `null` is returned in case the document already existed.
          - `"replace"` if a document with the specified `_key` value exists already,
            it is overwritten with the specified document value. This mode is
            also used when no overwrite mode is specified but the `overwrite`
            flag is set to `true`.
          - `"update"` if a document with the specified `_key` value exists already,
            it is patched (partially updated) with the specified document value.
            The overwrite mode can be further controlled via the `keepNull` and
            `mergeObjects` parameters.
          - `"conflict"` if a document with the specified `_key` value exists already,
            return a unique constraint violation error so that the insert operation
            fails. This is also the default behavior in case the overwrite mode is
            not set, and the `overwrite` flag is `false` or not set either.
        explode: true
        in: query
        name: overwriteMode
        required: false
        schema:
          type: string
        style: form
      - description: |
          If the intention is to delete existing attributes with the update-insert
          command, the URL query parameter `keepNull` can be used with a value of
          `false`. This modifies the behavior of the patch command to remove any
          attributes from the existing document that are contained in the patch document
          with an attribute value of `null`.
          This option controls the update-insert behavior only.
        explode: true
        in: query
        name: keepNull
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Controls whether objects (not arrays) are merged if present in both, the
          existing and the update-insert document. If set to `false`, the value in the
          patch document overwrites the existing document's value. If set to `true`,
          objects are merged. The default is `true`.
          This option controls the update-insert behavior only.
        explode: true
        in: query
        name: mergeObjects
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_document__collection__delete_request_1'
      responses:
        "201":
          description: |
            is returned if the documents were created successfully and
            `waitForSync` was `true`.
        "202":
          description: |
            is returned if the documents were created successfully and
            `waitForSync` was `false`.
        "400":
          description: |
            is returned if the body does not contain a valid JSON representation
            of one document. The response body contains
            an error document in this case.
        "404":
          description: |
            is returned if the collection specified by `collection` is unknown.
            The response body contains an error document in this case.
        "409":
          description: |
            is returned in the single document case if a document with the
            same qualifiers in an indexed attribute conflicts with an already
            existing document and thus violates that unique constraint. The
            response body contains an error document in this case.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
    put:
      description: |
        Replaces multiple documents in the specified collection with the
        ones in the body, the replaced documents are specified by the `_key`
        attributes in the body documents.
        The value of the `_key` attribute as well as attributes
        used as sharding keys may not be changed.
        If `ignoreRevs` is `false` and there is a `_rev` attribute in a
        document in the body and its value does not match the revision of
        the corresponding document in the database, the precondition is
        violated.
        Cluster only: The replace documents _may_ contain
        values for the collection's pre-defined shard keys. Values for the shard keys
        are treated as hints to improve performance. Should the shard keys
        values be incorrect ArangoDB may answer with a `not found` error.
        Optionally, the query parameter `waitForSync` can be used to force
        synchronization of the document replacement operation to disk even in case
        that the `waitForSync` flag had been disabled for the entire collection.
        Thus, the `waitForSync` query parameter can be used to force synchronization
        of just specific operations. To use this, set the `waitForSync` parameter
        to `true`. If the `waitForSync` parameter is not specified or set to
        `false`, then the collection's default `waitForSync` behavior is
        applied. The `waitForSync` query parameter cannot be used to disable
        synchronization for collections that have a default `waitForSync` value
        of `true`.
        The body of the response contains a JSON array of the same length
        as the input array with the information about the identifier and the
        revision of the replaced documents. In each entry, the attribute
        `_id` contains the known `document-id` of each updated document,
        `_key` contains the key which uniquely identifies a document in a
        given collection, and the attribute `_rev` contains the new document
        revision. In case of an error or violated precondition, an error
        object with the attribute `error` set to `true` and the attribute
        `errorCode` set to the error code is built.
        If the query parameter `returnOld` is `true`, then, for each
        generated document, the complete previous revision of the document
        is returned under the `old` attribute in the result.
        If the query parameter `returnNew` is `true`, then, for each
        generated document, the complete new document is returned under
        the `new` attribute in the result.
        Note that if any precondition is violated or an error occurred with
        some of the documents, the return code is still 201 or 202, but
        the additional HTTP header `X-Arango-Error-Codes` is set, which
        contains a map of the error codes that occurred together with their
        multiplicities, as in: `1200:17,1205:10` which means that in 17
        cases the error 1200 "revision conflict" and in 10 cases the error
        1205 "illegal document handle" has happened.
      operationId: _apiDocumentCollectionPUT
      parameters:
      - description: |
          This URL parameter is the name of the collection in which the
          documents are replaced.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Wait until the new documents have been synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          By default, or if this is set to `true`, the `_rev` attributes in
          the given documents are ignored. If this is set to `false`, then
          any `_rev` attribute given in a body document is taken as a
          precondition. The document is only replaced if the current revision
          is the one specified.
        explode: true
        in: query
        name: ignoreRevs
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete previous revision of the changed
          documents under the attribute `old` in the result.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Return additionally the complete new documents under the attribute `new`
          in the result.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, an empty object is returned as response if all document operations
          succeed. No meta-data is returned for the replaced documents. If at least one
          operation raises an error, an array with the error object(s) is returned.
          You can use this option to save network traffic but you cannot map any errors
          to the inputs of your request.
        explode: true
        in: query
        name: silent
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_document__collection__delete_request'
      responses:
        "201":
          description: |
            is returned if `waitForSync` was `true` and operations were processed.
        "202":
          description: |
            is returned if `waitForSync` was `false` and operations were processed.
        "400":
          description: |
            is returned if the body does not contain a valid JSON representation
            of an array of documents. The response body contains
            an error document in this case.
        "404":
          description: |
            is returned if the collection was not found.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
  /_api/document/{collection}#get:
    put:
      description: |
        Returns the documents identified by their *_key* in the body objects.
        The body of the request _must_ contain a JSON array of either
        strings (the *_key* values to lookup) or search documents.
        A search document _must_ contain at least a value for the *_key* field.
        A value for `_rev` _may_ be specified to verify whether the document
        has the same revision value, unless _ignoreRevs_ is set to false.
        Cluster only: The search document _may_ contain
        values for the collection's pre-defined shard keys. Values for the shard keys
        are treated as hints to improve performance. Should the shard keys
        values be incorrect ArangoDB may answer with a *not found* error.
        The returned array of documents contain three special attributes: *_id* containing the document
        identifier, *_key* containing key which uniquely identifies a document
        in a given collection and *_rev* containing the revision.
      operationId: _apiDocumentCollectiongetPUT
      parameters:
      - description: |
          Name of the *collection* from which the documents are to be read.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          This parameter is required to be **true**, otherwise a replace
          operation is executed!
        explode: true
        in: query
        name: onlyget
        required: true
        schema:
          type: boolean
        style: form
      - description: |
          Should the value be *true* (the default)
          If a search document contains a value for the *_rev* field,
          then the document is only returned if it has the same revision value.
          Otherwise a precondition failed error is returned.
        explode: true
        in: query
        name: ignoreRevs
        required: false
        schema:
          type: string
        style: form
      - description: |
          Set this header to `true` to allow the Coordinator to ask any shard replica for
          the data, not only the shard leader. This may result in "dirty reads".
          The header is ignored if this operation is part of a Stream Transaction
          (`x-arango-trx-id` header). The header set when creating the transaction decides
          about dirty reads for the entire transaction, not the individual read operations.
        explode: false
        in: header
        name: x-arango-allow-dirty-read
        required: false
        schema:
          type: boolean
        style: simple
      - description: |
          To make this operation a part of a Stream Transaction, set this header to the
          transaction ID returned by the `POST /_api/transaction/begin` call.
        explode: false
        in: header
        name: x-arango-trx-id
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            is returned if no error happened
        "400":
          description: |
            is returned if the body does not contain a valid JSON representation
            of an array of documents. The response body contains
            an error document in this case.
        "404":
          description: |
            is returned if the collection was not found.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
  /_api/document/{collection}#multiple:
    post:
      description: |
        Creates new documents from the documents given in the body, unless there
        is already a document with the `_key` given. If no `_key` is given, a new
        unique `_key` is generated automatically.
        The result body contains a JSON array of the
        same length as the input array, and each entry contains the result
        of the operation for the corresponding input. In case of an error
        the entry is a document with attributes `error` set to `true` and
        errorCode set to the error code that has happened.
        Possibly given `_id` and `_rev` attributes in the body are always ignored,
        the URL part or the query parameter collection respectively counts.
        If `silent` is not set to `true`, the body of the response contains an
        array of JSON objects with the following attributes:
          - `_id` contains the document identifier of the newly created document
          - `_key` contains the document key
          - `_rev` contains the document revision
        If the collection parameter `waitForSync` is `false`, then the call
        returns as soon as the documents have been accepted. It does not wait
        until the documents have been synced to disk.
        Optionally, the query parameter `waitForSync` can be used to force
        synchronization of the document creation operation to disk even in
        case that the `waitForSync` flag had been disabled for the entire
        collection. Thus, the `waitForSync` query parameter can be used to
        force synchronization of just this specific operations. To use this,
        set the `waitForSync` parameter to `true`. If the `waitForSync`
        parameter is not specified or set to `false`, then the collection's
        default `waitForSync` behavior is applied. The `waitForSync` query
        parameter cannot be used to disable synchronization for collections
        that have a default `waitForSync` value of `true`.
        If the query parameter `returnNew` is `true`, then, for each
        generated document, the complete new document is returned under
        the `new` attribute in the result.
        Should an error have occurred with some of the documents
        the additional HTTP header `X-Arango-Error-Codes` is set, which
        contains a map of the error codes that occurred together with their
        multiplicities, as in: `1205:10,1210:17` which means that in 10
        cases the error 1205 "illegal document handle" and in 17 cases the
        error 1210 "unique constraint violated" has happened.
      operationId: _apiDocumentCollectionmultiplePOST
      parameters:
      - description: |
          Name of the `collection` in which the documents are to be created.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the collection. This is only for backward compatibility.
          In ArangoDB versions < 3.0, the URL path was `/_api/document` and
          this query parameter was required. This combination still works, but
          the recommended way is to specify the collection in the URL path.
        explode: true
        in: query
        name: collection
        required: false
        schema:
          type: string
        style: form
      - description: |
          Wait until document has been synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Additionally return the complete new document under the attribute `new`
          in the result.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Additionally return the complete old document under the attribute `old`
          in the result. Only available if the overwrite option is used.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, an empty object is returned as response if all document operations
          succeed. No meta-data is returned for the created documents. If any of the
          operations raises an error, an array with the error object(s) is returned.
          You can use this option to save network traffic but you cannot map any errors
          to the inputs of your request.
        explode: true
        in: query
        name: silent
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true`, the insert becomes a replace-insert. If a document with the
          same `_key` already exists, the new document is not rejected with a unique
          constraint violation error but replaces the old document. Note that operations
          with `overwrite` parameter require a `_key` attribute in the request payload,
          therefore they can only be performed on collections sharded by `_key`.
        explode: true
        in: query
        name: overwrite
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          This option supersedes `overwrite` and offers the following modes
          - `"ignore"` if a document with the specified `_key` value exists already,
            nothing is done and no write operation is carried out. The
            insert operation returns success in this case. This mode does not
            support returning the old document version using `RETURN OLD`. When using
            `RETURN NEW`, `null` is returned in case the document already existed.
          - `"replace"` if a document with the specified `_key` value exists already,
            it is overwritten with the specified document value. This mode is
            also used when no overwrite mode is specified but the `overwrite`
            flag is set to `true`.
          - `"update"` if a document with the specified `_key` value exists already,
            it is patched (partially updated) with the specified document value.
            The overwrite mode can be further controlled via the `keepNull` and
            `mergeObjects` parameters.
          - `"conflict"` if a document with the specified `_key` value exists already,
            return a unique constraint violation error so that the insert operation
            fails. This is also the default behavior in case the overwrite mode is
            not set, and the `overwrite` flag is `false` or not set either.
        explode: true
        in: query
        name: overwriteMode
        required: false
        schema:
          type: string
        style: form
      - description: |
          If the intention is to delete existing attributes with the update-insert
          command, the URL query parameter `keepNull` can be used with a value of
          `false`. This modifies the behavior of the patch command to remove any
          attributes from the existing document that are contained in the patch document
          with an attribute value of `null`.
          This option controls the update-insert behavior only.
        explode: true
        in: query
        name: keepNull
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Controls whether objects (not arrays) are merged if present in both, the
          existing and the update-insert document. If set to `false`, the value in the
          patch document overwrites the existing document's value. If set to `true`,
          objects are merged. The default is `true`.
          This option controls the update-insert behavior only.
        explode: true
        in: query
        name: mergeObjects
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_document__collection__multiple_post_request'
      responses:
        "201":
          description: |
            is returned if `waitForSync` was `true` and operations were processed.
        "202":
          description: |
            is returned if `waitForSync` was `false` and operations were processed.
        "400":
          description: |
            is returned if the body does not contain a valid JSON representation
            of an array of documents. The response body contains
            an error document in this case.
        "404":
          description: |
            is returned if the collection specified by `collection` is unknown.
            The response body contains an error document in this case.
      tags:
      - Documents
      x-eov-operation-handler: controllers/DocumentsController
  /_api/edges/{collection-id}:
    get:
      description: |
        Returns an array of edges starting or ending in the vertex identified by
        *vertex*.
      operationId: _apiEdgesCollectionIdGET
      parameters:
      - description: |
          The id of the collection.
        explode: false
        in: path
        name: collection-id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The id of the start vertex.
        explode: true
        in: query
        name: vertex
        required: true
        schema:
          type: string
        style: form
      - description: |
          Selects *in* or *out* direction for edges. If not set, any edges are
          returned.
        explode: true
        in: query
        name: direction
        required: false
        schema:
          type: string
        style: form
      - description: |
          Set this header to `true` to allow the Coordinator to ask any shard replica for
          the data, not only the shard leader. This may result in "dirty reads".
        explode: false
        in: header
        name: x-arango-allow-dirty-read
        required: false
        schema:
          type: boolean
        style: simple
      responses:
        "200":
          description: |
            is returned if the edge collection was found and edges were retrieved.
        "400":
          description: |
            is returned if the request contains invalid parameters.
        "404":
          description: |
            is returned if the edge collection was not found.
      tags:
      - Graph Edges
      x-eov-operation-handler: controllers/GraphEdgesController
  /_api/batch:
    post:
      description: |
        Executes a batch request. A batch request can contain any number of
        other requests that can be sent to ArangoDB in isolation. The benefit of
        using batch requests is that batching requests requires less client/server
        roundtrips than when sending isolated requests.
        All parts of a batch request are executed serially on the server. The
        server will return the results of all parts in a single response when all
        parts are finished.
        Technically, a batch request is a multipart HTTP request, with
        content-type `multipart/form-data`. A batch request consists of an
        envelope and the individual batch part actions. Batch part actions
        are "regular" HTTP requests, including full header and an optional body.
        Multiple batch parts are separated by a boundary identifier. The
        boundary identifier is declared in the batch envelope. The MIME content-type
        for each individual batch part must be `application/x-arango-batchpart`.
        Please note that when constructing the individual batch parts, you must
        use CRLF (`\r\n`) as the line terminator as in regular HTTP messages.
        The response sent by the server will be an `HTTP 200` response, with an
        optional error summary header `x-arango-errors`. This header contains the
        number of batch part operations that failed with an HTTP error code of at
        least 400. This header is only present in the response if the number of
        errors is greater than zero.
        The response sent by the server is a multipart response, too. It contains
        the individual HTTP responses for all batch parts, including the full HTTP
        result header (with status code and other potential headers) and an
        optional result body. The individual batch parts in the result are
        seperated using the same boundary value as specified in the request.
        The order of batch parts in the response will be the same as in the
        original client request. Client can additionally use the `Content-Id`
        MIME header in a batch part to define an individual id for each batch part.
        The server will return this id is the batch part responses, too.
      operationId: _apiBatchPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_batch_post_request'
      responses:
        "200":
          description: |
            is returned if the batch was received successfully. HTTP 200 is returned
            even if one or multiple batch part actions failed.
        "400":
          description: |
            is returned if the batch envelope is malformed or incorrectly formatted.
            This code will also be returned if the content-type of the overall batch
            request or the individual MIME parts is not as expected.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
      tags:
      - Bulk
      x-eov-operation-handler: controllers/BulkController
  /_api/import#document:
    post:
      description: |
        Creates documents in the collection identified by `collection-name`.
        The first line of the request body must contain a JSON-encoded array of
        attribute names. All following lines in the request body must contain
        JSON-encoded arrays of attribute values. Each line is interpreted as a
        separate document, and the values specified will be mapped to the array
        of attribute names specified in the first header line.
        The response is a JSON object with the following attributes:
        - `created`: number of documents imported.
        - `errors`: number of documents that were not imported due to an error.
        - `empty`: number of empty lines found in the input (will only contain a
          value greater zero for types `documents` or `auto`).
        - `updated`: number of updated/replaced documents (in case `onDuplicate`
          was set to either `update` or `replace`).
        - `ignored`: number of failed but ignored insert operations (in case
          `onDuplicate` was set to `ignore`).
        - `details`: if query parameter `details` is set to true, the result will
          contain a `details` attribute which is an array with more detailed
          information about which documents could not be inserted.
      operationId: _apiImportdocumentPOST
      parameters:
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      - description: |
          An optional prefix for the values in `_from` attributes. If specified, the
          value is automatically prepended to each `_from` input value. This allows
          specifying just the keys for `_from`.
        explode: true
        in: query
        name: fromPrefix
        required: false
        schema:
          type: string
        style: form
      - description: |
          An optional prefix for the values in `_to` attributes. If specified, the
          value is automatically prepended to each `_to` input value. This allows
          specifying just the keys for `_to`.
        explode: true
        in: query
        name: toPrefix
        required: false
        schema:
          type: string
        style: form
      - description: |
          If this parameter has a value of `true` or `yes`, then all data in the
          collection will be removed prior to the import. Note that any existing
          index definitions will be preserved.
        explode: true
        in: query
        name: overwrite
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Wait until documents have been synced to disk before returning.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Controls what action is carried out in case of a unique key constraint
          violation. Possible values are
          - `error` this will not import the current document because of the unique
            key constraint violation. This is the default setting.
          - `update` this will update an existing document in the database with the
            data specified in the request. Attributes of the existing document that
            are not present in the request will be preserved.
          - `replace` this will replace an existing document in the database with the
            data specified in the request.
          - `ignore` this will not update an existing document and simply ignore the
            error caused by the unique key constraint violation.
          Note that `update`, `replace` and `ignore` will only work when the
          import document in the request contains the `_key` attribute. `update` and
          `replace` may also fail because of secondary unique key constraint
          violations.
        explode: true
        in: query
        name: onDuplicate
        required: false
        schema:
          type: string
        style: form
      - description: |
          If set to `true` or `yes`, it will make the whole import fail if any error
          occurs. Otherwise the import will continue even if some documents cannot
          be imported.
        explode: true
        in: query
        name: complete
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true` or `yes`, the result will include an attribute `details`
          with details about documents that could not be imported.
        explode: true
        in: query
        name: details
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_import_document_post_request'
      responses:
        "201":
          description: |
            is returned if all documents could be imported successfully.
        "400":
          description: |
            is returned if `type` contains an invalid value, no `collection` is
            specified, the documents are incorrectly encoded, or the request
            is malformed.
        "404":
          description: |
            is returned if `collection` or the `_from` or `_to` attributes of an
            imported edge refer to an unknown collection.
        "409":
          description: |
            is returned if the import would trigger a unique key violation and
            `complete` is set to `true`.
        "500":
          description: |
            is returned if the server cannot auto-generate a document key (out of keys
            error) for a document with no user-defined key.
      tags:
      - Bulk
      x-eov-operation-handler: controllers/BulkController
  /_api/import#json:
    post:
      description: |
        Creates documents in the collection identified by `collection-name`.
        The JSON representations of the documents must be passed as the body of the
        POST request. The request body can either consist of multiple lines, with
        each line being a single stand-alone JSON object, or a singe JSON array with
        sub-objects.
        The response is a JSON object with the following attributes:
        - `created`: number of documents imported.
        - `errors`: number of documents that were not imported due to an error.
        - `empty`: number of empty lines found in the input (will only contain a
          value greater zero for types `documents` or `auto`).
        - `updated`: number of updated/replaced documents (in case `onDuplicate`
          was set to either `update` or `replace`).
        - `ignored`: number of failed but ignored insert operations (in case
          `onDuplicate` was set to `ignore`).
        - `details`: if query parameter `details` is set to true, the result will
          contain a `details` attribute which is an array with more detailed
          information about which documents could not be inserted.
      operationId: _apiImportjsonPOST
      parameters:
      - description: |
          Determines how the body of the request will be interpreted. `type` can have
          the following values
          - `documents` when this type is used, each line in the request body is
            expected to be an individual JSON-encoded document. Multiple JSON objects
            in the request body need to be separated by newlines.
          - `list` when this type is used, the request body must contain a single
            JSON-encoded array of individual objects to import.
          - `auto` if set, this will automatically determine the body type (either
            `documents` or `list`).
        explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      - description: |
          The collection name.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      - description: |
          An optional prefix for the values in `_from` attributes. If specified, the
          value is automatically prepended to each `_from` input value. This allows
          specifying just the keys for `_from`.
        explode: true
        in: query
        name: fromPrefix
        required: false
        schema:
          type: string
        style: form
      - description: |
          An optional prefix for the values in `_to` attributes. If specified, the
          value is automatically prepended to each `_to` input value. This allows
          specifying just the keys for `_to`.
        explode: true
        in: query
        name: toPrefix
        required: false
        schema:
          type: string
        style: form
      - description: |
          If this parameter has a value of `true` or `yes`, then all data in the
          collection will be removed prior to the import. Note that any existing
          index definitions will be preserved.
        explode: true
        in: query
        name: overwrite
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Wait until documents have been synced to disk before returning.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Controls what action is carried out in case of a unique key constraint
          violation. Possible values are
          - `error` this will not import the current document because of the unique
            key constraint violation. This is the default setting.
          - `update` this will update an existing document in the database with the
            data specified in the request. Attributes of the existing document that
            are not present in the request will be preserved.
          - `replace` this will replace an existing document in the database with the
            data specified in the request.
          - `ignore` this will not update an existing document and simply ignore the
            error caused by a unique key constraint violation.
          Note that that `update`, `replace` and `ignore` will only work when the
          import document in the request contains the `_key` attribute. `update` and
          `replace` may also fail because of secondary unique key constraint violations.
        explode: true
        in: query
        name: onDuplicate
        required: false
        schema:
          type: string
        style: form
      - description: |
          If set to `true` or `yes`, it will make the whole import fail if any error
          occurs. Otherwise the import will continue even if some documents cannot
          be imported.
        explode: true
        in: query
        name: complete
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If set to `true` or `yes`, the result will include an attribute `details`
          with details about documents that could not be imported.
        explode: true
        in: query
        name: details
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_import_json_post_request'
      responses:
        "201":
          description: |
            is returned if all documents could be imported successfully.
        "400":
          description: |
            is returned if `type` contains an invalid value, no `collection` is
            specified, the documents are incorrectly encoded, or the request
            is malformed.
        "404":
          description: |
            is returned if `collection` or the `_from` or `_to` attributes of an
            imported edge refer to an unknown collection.
        "409":
          description: |
            is returned if the import would trigger a unique key violation and
            `complete` is set to `true`.
        "500":
          description: |
            is returned if the server cannot auto-generate a document key (out of keys
            error) for a document with no user-defined key.
      tags:
      - Bulk
      x-eov-operation-handler: controllers/BulkController
  /_api/foxx:
    get:
      description: |
        Fetches a list of services installed in the current database.
        Returns a list of objects with the following attributes:
        - *mount*: the mount path of the service
        - *development*: *true* if the service is running in development mode
        - *legacy*: *true* if the service is running in 2.8 legacy compatibility mode
        - *provides*: the service manifest's *provides* value or an empty object
        Additionally the object may contain the following attributes if they have been set on the manifest:
        - *name*: a string identifying the service type
        - *version*: a semver-compatible version string
      operationId: _apiFoxxGET
      parameters:
      - description: |
          Whether or not system services should be excluded from the result.
        explode: true
        in: query
        name: excludeSystem
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
    post:
      description: |
        Installs the given new service at the given mount path.
        The request body can be any of the following formats:
        - `application/zip`: a raw zip bundle containing a service
        - `application/javascript`: a standalone JavaScript file
        - `application/json`: a service definition as JSON
        - `multipart/form-data`: a service definition as a multipart form
        A service definition is an object or form with the following properties or fields:
        - *configuration*: a JSON object describing configuration values
        - *dependencies*: a JSON object describing dependency settings
        - *source*: a fully qualified URL or an absolute path on the server's file system
        When using multipart data, the *source* field can also alternatively be a file field
        containing either a zip bundle or a standalone JavaScript file.
        When using a standalone JavaScript file the given file will be executed
        to define our service's HTTP endpoints. It is the same which would be defined
        in the field `main` of the service manifest.
        If *source* is a URL, the URL must be reachable from the server.
        If *source* is a file system path, the path will be resolved on the server.
        In either case the path or URL is expected to resolve to a zip bundle,
        JavaScript file or (in case of a file system path) directory.
        Note that when using file system paths in a cluster with multiple Coordinators
        the file system path must resolve to equivalent files on every Coordinator.
      operationId: _apiFoxxPOST
      parameters:
      - description: |
          Mount path the service should be installed at.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      - description: |
          Set to `true` to enable development mode.
        explode: true
        in: query
        name: development
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Set to `false` to not run the service's setup script.
        explode: true
        in: query
        name: setup
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Set to `true` to install the service in 2.8 legacy compatibility mode.
        explode: true
        in: query
        name: legacy
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "201":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/service:
    delete:
      description: |
        Removes the service at the given mount path from the database and file system.
        Returns an empty response on success.
      operationId: _apiFoxxServiceDELETE
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      - description: |
          Set to `false` to not run the service's teardown script.
        explode: true
        in: query
        name: teardown
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
    get:
      description: |
        Fetches detailed information for the service at the given mount path.
        Returns an object with the following attributes:
        - *mount*: the mount path of the service
        - *path*: the local file system path of the service
        - *development*: *true* if the service is running in development mode
        - *legacy*: *true* if the service is running in 2.8 legacy compatibility mode
        - *manifest*: the normalized JSON manifest of the service
        Additionally the object may contain the following attributes if they have been set on the manifest:
        - *name*: a string identifying the service type
        - *version*: a semver-compatible version string
      operationId: _apiFoxxServiceGET
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
        "400":
          description: |
            Returned if the mount path is unknown.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
    patch:
      description: |
        Installs the given new service on top of the service currently installed at the given mount path.
        This is only recommended for switching between different versions of the same service.
        Unlike replacing a service, upgrading a service retains the old service's configuration
        and dependencies (if any) and should therefore only be used to migrate an existing service
        to a newer or equivalent service.
        The request body can be any of the following formats:
        - `application/zip`: a raw zip bundle containing a service
        - `application/javascript`: a standalone JavaScript file
        - `application/json`: a service definition as JSON
        - `multipart/form-data`: a service definition as a multipart form
        A service definition is an object or form with the following properties or fields:
        - *configuration*: a JSON object describing configuration values
        - *dependencies*: a JSON object describing dependency settings
        - *source*: a fully qualified URL or an absolute path on the server's file system
        When using multipart data, the *source* field can also alternatively be a file field
        containing either a zip bundle or a standalone JavaScript file.
        When using a standalone JavaScript file the given file will be executed
        to define our service's HTTP endpoints. It is the same which would be defined
        in the field `main` of the service manifest.
        If *source* is a URL, the URL must be reachable from the server.
        If *source* is a file system path, the path will be resolved on the server.
        In either case the path or URL is expected to resolve to a zip bundle,
        JavaScript file or (in case of a file system path) directory.
        Note that when using file system paths in a cluster with multiple Coordinators
        the file system path must resolve to equivalent files on every Coordinator.
      operationId: _apiFoxxServicePATCH
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      - description: |
          Set to `true` to run the old service's teardown script.
        explode: true
        in: query
        name: teardown
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Set to `false` to not run the new service's setup script.
        explode: true
        in: query
        name: setup
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Set to `true` to install the new service in 2.8 legacy compatibility mode.
        explode: true
        in: query
        name: legacy
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Set to `true` to force service install even if no service is installed under given mount.
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
    put:
      description: |
        Removes the service at the given mount path from the database and file system.
        Then installs the given new service at the same mount path.
        This is a slightly safer equivalent to performing an uninstall of the old service
        followed by installing the new service. The new service's main and script files
        (if any) will be checked for basic syntax errors before the old service is removed.
        The request body can be any of the following formats:
        - `application/zip`: a raw zip bundle containing a service
        - `application/javascript`: a standalone JavaScript file
        - `application/json`: a service definition as JSON
        - `multipart/form-data`: a service definition as a multipart form
        A service definition is an object or form with the following properties or fields:
        - *configuration*: a JSON object describing configuration values
        - *dependencies*: a JSON object describing dependency settings
        - *source*: a fully qualified URL or an absolute path on the server's file system
        When using multipart data, the *source* field can also alternatively be a file field
        containing either a zip bundle or a standalone JavaScript file.
        When using a standalone JavaScript file the given file will be executed
        to define our service's HTTP endpoints. It is the same which would be defined
        in the field `main` of the service manifest.
        If *source* is a URL, the URL must be reachable from the server.
        If *source* is a file system path, the path will be resolved on the server.
        In either case the path or URL is expected to resolve to a zip bundle,
        JavaScript file or (in case of a file system path) directory.
        Note that when using file system paths in a cluster with multiple Coordinators
        the file system path must resolve to equivalent files on every Coordinator.
      operationId: _apiFoxxServicePUT
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      - description: |
          Set to `false` to not run the old service's teardown script.
        explode: true
        in: query
        name: teardown
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Set to `false` to not run the new service's setup script.
        explode: true
        in: query
        name: setup
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Set to `true` to install the new service in 2.8 legacy compatibility mode.
        explode: true
        in: query
        name: legacy
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Set to `true` to force service install even if no service is installed under given mount.
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/configuration:
    get:
      description: |
        Fetches the current configuration for the service at the given mount path.
        Returns an object mapping the configuration option names to their definitions
        including a human-friendly *title* and the *current* value (if any).
      operationId: _apiFoxxConfigurationGET
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
    patch:
      description: |
        Replaces the given service's configuration.
        Returns an object mapping all configuration option names to their new values.
      operationId: _apiFoxxConfigurationPATCH
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_foxx_configuration_get_request_1'
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
    put:
      description: |
        Replaces the given service's configuration completely.
        Returns an object mapping all configuration option names to their new values.
      operationId: _apiFoxxConfigurationPUT
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_foxx_configuration_get_request'
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/dependencies:
    get:
      description: |
        Fetches the current dependencies for service at the given mount path.
        Returns an object mapping the dependency names to their definitions
        including a human-friendly *title* and the *current* mount path (if any).
      operationId: _apiFoxxDependenciesGET
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
    patch:
      description: |
        Replaces the given service's dependencies.
        Returns an object mapping all dependency names to their new mount paths.
      operationId: _apiFoxxDependenciesPATCH
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_foxx_dependencies_get_request_1'
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
    put:
      description: |
        Replaces the given service's dependencies completely.
        Returns an object mapping all dependency names to their new mount paths.
      operationId: _apiFoxxDependenciesPUT
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_foxx_dependencies_get_request'
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/scripts:
    get:
      description: |
        Fetches a list of the scripts defined by the service.
        Returns an object mapping the raw script names to human-friendly names.
      operationId: _apiFoxxScriptsGET
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/scripts/{name}:
    post:
      description: |
        Runs the given script for the service at the given mount path.
        Returns the exports of the script, if any.
      operationId: _apiFoxxScriptsNamePOST
      parameters:
      - description: |
          Name of the script to run.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_foxx_scripts__name__post_request'
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/tests:
    post:
      description: |
        Runs the tests for the service at the given mount path and returns the results.
        Supported test reporters are:
        - *default*: a simple list of test cases
        - *suite*: an object of test cases nested in suites
        - *stream*: a raw stream of test results
        - *xunit*: an XUnit/JUnit compatible structure
        - *tap*: a raw TAP compatible stream
        The *Accept* request header can be used to further control the response format:
        When using the *stream* reporter `application/x-ldjson` will result
        in the response body being formatted as a newline-delimited JSON stream.
        When using the *tap* reporter `text/plain` or `text/*` will result
        in the response body being formatted as a plain text TAP report.
        When using the *xunit* reporter `application/xml` or `text/xml` will result
        in the response body being formatted as XML instead of JSONML.
        Otherwise the response body will be formatted as non-prettyprinted JSON.
      operationId: _apiFoxxTestsPOST
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      - description: |
          Test reporter to use.
        explode: true
        in: query
        name: reporter
        required: false
        schema:
          type: string
        style: form
      - description: |
          Use the matching format for the reporter, regardless of the *Accept* header.
        explode: true
        in: query
        name: idiomatic
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Only run tests where the full name (including full test suites and test case)
          matches this string.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/development:
    delete:
      description: |
        Puts the service at the given mount path into production mode.
        When running ArangoDB in a cluster with multiple Coordinators this will
        replace the service on all other Coordinators with the version on this
        Coordinator.
      operationId: _apiFoxxDevelopmentDELETE
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
    post:
      description: |
        Puts the service into development mode.
        While the service is running in development mode the service will be reloaded
        from the filesystem and its setup script (if any) will be re-executed every
        time the service handles a request.
        When running ArangoDB in a cluster with multiple Coordinators note that changes
        to the filesystem on one Coordinator will not be reflected across the other
        Coordinators. This means you should treat your Coordinators as inconsistent
        as long as any service is running in development mode.
      operationId: _apiFoxxDevelopmentPOST
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/readme:
    get:
      description: |
        Fetches the service's README or README.md file's contents if any.
      operationId: _apiFoxxReadmeGET
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
        "204":
          description: |
            Returned if no README file was found.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/swagger:
    get:
      description: |
        Fetches the Swagger API description for the service at the given mount path.
        The response body will be an OpenAPI 2.0 compatible JSON description of the service API.
      operationId: _apiFoxxSwaggerGET
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/download:
    post:
      description: |
        Downloads a zip bundle of the service directory.
        When development mode is enabled, this always creates a new bundle.
        Otherwise the bundle will represent the version of a service that
        is installed on that ArangoDB instance.
      operationId: _apiFoxxDownloadPOST
      parameters:
      - description: |
          Mount path of the installed service.
        explode: true
        in: query
        name: mount
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            Returned if the request was successful.
        "400":
          description: |
            Returned if the mount path is unknown.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/foxx/commit:
    post:
      description: |
        Commits the local service state of the Coordinator to the database.
        This can be used to resolve service conflicts between Coordinators that can not be fixed automatically due to missing data.
      operationId: _apiFoxxCommitPOST
      parameters:
      - description: |
          Overwrite existing service files in database even if they already exist.
        explode: true
        in: query
        name: replace
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: |
            Returned if the request was successful.
      tags:
      - Foxx
      x-eov-operation-handler: controllers/FoxxController
  /_api/collection/{collection-name}/load:
    put:
      description: "\nSince ArangoDB version 3.9.0 this API does nothing. Previously\
        \ it used to\nload a collection into memory. \n\nThe request body object might\
        \ optionally contain the following attribute:\n\n- *count*: If set, this controls\
        \ whether the return value should include\n  the number of documents in the\
        \ collection. Setting *count* to\n  *false* may speed up loading a collection.\
        \ The default value for\n  *count* is *true*.\n\nA call to this API returns\
        \ an object with the following attributes for\ncompatibility reasons:\n\n\
        - *id*: The identifier of the collection.\n\n- *name*: The name of the collection.\n\
        \n- *count*: The number of documents inside the collection. This is only\n\
        \  returned if the *count* input parameters is set to *true* or has\n  not\
        \ been specified.\n\n- *status*: The status of the collection as number.\n\
        \n- *type*: The collection type. Valid types are:\n  - 2: document collection\n\
        \  - 3: edge collection\n\n- *isSystem*: If *true* then the collection is\
        \ a system collection.\n\n"
      operationId: _apiCollectionCollectionNameLoadPUT
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404*
            is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/unload:
    put:
      description: |
        Since ArangoDB version 3.9.0 this API does nothing. Previously it used to
        unload a collection from memory, while preserving all documents.
        When calling the API an object with the following attributes is
        returned for compatibility reasons:
        - *id*: The identifier of the collection.
        - *name*: The name of the collection.
        - *status*: The status of the collection as number.
        - *type*: The collection type. Valid types are:
          - 2: document collection
          - 3: edges collection
        - *isSystem*: If *true* then the collection is a system collection.
      operationId: _apiCollectionCollectionNameUnloadPUT
      parameters:
      - description: ""
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/loadIndexesIntoMemory:
    put:
      description: |
        You can call this endpoint to try to cache this collection's index entries in
        the main memory. Index lookups served from the memory cache can be much faster
        than lookups not stored in the cache, resulting in a performance boost.
        The endpoint iterates over suitable indexes of the collection and stores the
        indexed values (not the entire document data) in memory. This is implemented for
        edge indexes only.
        The endpoint returns as soon as the index warmup has been scheduled. The index
        warmup may still be ongoing in the background, even after the return value has
        already been sent. As all suitable indexes are scanned, it may cause significant
        I/O activity and background load.
        This feature honors memory limits. If the indexes you want to load are smaller
        than your memory limit, this feature guarantees that most index values are
        cached. If the index is larger than your memory limit, this feature fills
        up values up to this limit. You cannot control which indexes of the collection
        should have priority over others.
        It is guaranteed that the in-memory cache data is consistent with the stored
        index data at all times.
        On success, this endpoint returns an object with attribute `result` set to `true`.
      operationId: _apiCollectionCollectionNameLoadIndexesIntoMemoryPUT
      parameters:
      - description: ""
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            If the index loading has been scheduled for all suitable indexes.
        "400":
          description: |
            If the `collection-name` is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the `collection-name` is unknown, then a *HTTP 404* is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/properties:
    get:
      description: ' Read properties of a collection'
      operationId: _apiCollectionCollectionNamePropertiesGET
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404*
            is returned.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_collection__collection_name__properties_get_200_response'
          description: ""
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
    put:
      description: |
        Changes the properties of a collection. Only the provided attributes are
        updated. Collection properties **cannot be changed** once a collection is
        created except for the listed properties, as well as the collection name via
        the rename endpoint (but not in clusters).
      operationId: _apiCollectionCollectionNamePropertiesPUT
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_collection__collection_name__properties_get_request'
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404*
            is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/rename:
    put:
      description: |
        Renames a collection. Expects an object with the attribute(s)
        - *name*: The new name.
        It returns an object with the attributes
        - *id*: The identifier of the collection.
        - *name*: The new name of the collection.
        - *status*: The status of the collection as number.
        - *type*: The collection type. Valid types are:
          - 2: document collection
          - 3: edges collection
        - *isSystem*: If *true* then the collection is a system collection.
        If renaming the collection succeeds, then the collection is also renamed in
        all graph definitions inside the `_graphs` collection in the current database.
        **Note**: this method is not available in a cluster.
      operationId: _apiCollectionCollectionNameRenamePUT
      parameters:
      - description: |
          The name of the collection to rename.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404*
            is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/recalculateCount:
    put:
      description: |
        Recalculates the document count of a collection, if it ever becomes inconsistent.
        It returns an object with the attributes
        - *result*: will be *true* if recalculating the document count succeeded.
      operationId: _apiCollectionCollectionNameRecalculateCountPUT
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            If the document count was recalculated successfully, *HTTP 200* is returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/compact:
    put:
      description: |
        Compacts the data of a collection in order to reclaim disk space.
        The operation will compact the document and index data by rewriting the
        underlying .sst files and only keeping the relevant entries.
        Under normal circumstances, running a compact operation is not necessary, as
        the collection data will eventually get compacted anyway. However, in some
        situations, e.g. after running lots of update/replace or remove operations,
        the disk data for a collection may contain a lot of outdated data for which the
        space shall be reclaimed. In this case the compaction operation can be used.
      operationId: _apiCollectionCollectionNameCompactPUT
      parameters:
      - description: |
          Name of the collection to compact
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Compaction started successfully
        "401":
          description: |
            if the request was not authenticated as a user with sufficient rights
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection:
    get:
      description: |
        Returns an object with an attribute *result* containing an
        array of all collection descriptions.
        By providing the optional query parameter *excludeSystem* with a value of
        *true*, all system collections will be excluded from the response.
      operationId: _apiCollectionGET
      parameters:
      - description: |
          Whether or not system collections should be excluded from the result.
        explode: true
        in: query
        name: excludeSystem
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            The list of collections
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
    post:
      description: |
        Creates a new collection with a given name. The request must contain an
        object with the following attributes.
      operationId: _apiCollectionPOST
      parameters:
      - description: |
          The default is `true`, which means the server only reports success back to the
          client when all replicas have created the collection. Set it to `false` if you want
          faster server responses and don't care about full replication.
        explode: true
        in: query
        name: waitForSyncReplication
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          The default is `true`, which means the server checks if there are enough replicas
          available at creation time and bail out otherwise. Set it to `false` to disable
          this extra check.
        explode: true
        in: query
        name: enforceReplicationFactor
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_collection_get_request'
      responses:
        "400":
          description: |
            If the `collection-name` is missing, then an *HTTP 400* is
            returned.
        "404":
          description: |
            If the `collection-name` is unknown, then an *HTTP 404* is returned.
        "200":
          description: ""
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}:
    delete:
      description: |
        Drops the collection identified by *collection-name*.
        If the collection was successfully dropped, an object is returned with
        the following attributes:
        - *error*: *false*
        - *id*: The identifier of the dropped collection.
      operationId: _apiCollectionCollectionNameDELETE
      parameters:
      - description: |
          The name of the collection to drop.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Whether or not the collection to drop is a system collection. This parameter
          must be set to *true* in order to drop a system collection.
        explode: true
        in: query
        name: isSystem
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
    get:
      description: |
        The result is an object describing the collection with the following
        attributes:
        - *id*: The identifier of the collection.
        - *name*: The name of the collection.
        - *status*: The status of the collection as number.
          - 3: loaded
          - 5: deleted
        Every other status indicates a corrupted collection.
        - *type*: The type of the collection as number.
          - 2: document collection (normal case)
          - 3: edge collection
        - *isSystem*: If *true* then the collection is a system collection.
      operationId: _apiCollectionCollectionNameGET
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404* is
            returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/truncate:
    put:
      description: |
        Removes all documents from the collection, but leaves the indexes intact.
      operationId: _apiCollectionCollectionNameTruncatePUT
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      - description: |
          If *true* then the data is synchronized to disk before returning from the
          truncate operation (default *false*)
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: "If *true* (default) then the storage engine is told to start\
          \ a compaction\nin order to free up disk space. This can be resource intensive.\
          \ If the only \nintention is to start over with an empty collection, specify\
          \ *false*.\n\n"
        explode: true
        in: query
        name: compact
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404*
            is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/count:
    get:
      description: |
        In addition to the above, the result also contains the number of documents.
        **Note** that this will always load the collection into memory.
        - *count*: The number of documents inside the collection.
      operationId: _apiCollectionCollectionNameCountGET
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404*
            is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/figures:
    get:
      description: |
        In addition to the above, the result also contains the number of documents
        and additional statistical information about the collection.
      operationId: _apiCollectionCollectionNameFiguresGET
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Setting `details` to `true` will return extended storage engine-specific
          details to the figures. The details are intended for debugging ArangoDB itself
          and their format is subject to change. By default, `details` is set to `false`,
          so no details are returned and the behavior is identical to previous versions
          of ArangoDB.
          Please note that requesting `details` may cause additional load and thus have
          an impact on performace.
        explode: true
        in: query
        name: details
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            Returns information about the collection
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_collection__collection_name__figures_get_404_response'
          description: |
            If the *collection-name* is unknown, then a *HTTP 404*
            is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/responsibleShard:
    put:
      description: |
        Returns the ID of the shard that is responsible for the given document
        (if the document exists) or that would be responsible if such document
        existed.
        The request must body must contain a JSON document with at least the
        collection's shard key attributes set to some values.
        The response is a JSON object with a *shardId* attribute, which will
        contain the ID of the responsible shard.
        **Note** : This method is only available in a cluster Coordinator.
      operationId: _apiCollectionCollectionNameResponsibleShardPUT
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_collection__collection_name__responsibleShard_put_request'
      responses:
        "200":
          description: |
            Returns the ID of the responsible shard.
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
            Additionally, if not all of the collection's shard key
            attributes are present in the input document, then a
            *HTTP 400* is returned as well.
        "404":
          description: |
            If the *collection-name* is unknown, then an *HTTP 404*
            is returned.
        "501":
          description: |
            *HTTP 501* is returned if the method is called on a single server.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/shards:
    get:
      description: |
        By default returns a JSON array with the shard IDs of the collection.
        If the `details` parameter is set to `true`, it will return a JSON object with the
        shard IDs as object attribute keys, and the responsible servers for each shard mapped to them.
        In the detailed response, the leader shards will be first in the arrays.
        **Note** : This method is only available in a cluster Coordinator.
      operationId: _apiCollectionCollectionNameShardsGET
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      - description: |
          If set to true, the return value will also contain the responsible servers for the collections' shards.
        explode: true
        in: query
        name: details
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            Returns the collection's shards.
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then an *HTTP 404*
            is returned.
        "501":
          description: |
            *HTTP 501* is returned if the method is called on a single server.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/revision:
    get:
      description: "\nThe response will contain the collection's latest used revision\
        \ id. \nThe revision id is a server-generated string that clients can use\
        \ to \ncheck whether data in a collection has changed since the last revision\
        \ check.\n\n- *revision*: The collection revision id as a string.\n\n"
      operationId: _apiCollectionCollectionNameRevisionGET
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404*
            is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/collection/{collection-name}/checksum:
    get:
      description: |
        Will calculate a checksum of the meta-data (keys and optionally revision ids) and
        optionally the document data in the collection.
        The checksum can be used to compare if two collections on different ArangoDB
        instances contain the same contents. The current revision of the collection is
        returned too so one can make sure the checksums are calculated for the same
        state of data.
        By default, the checksum will only be calculated on the *_key* system attribute
        of the documents contained in the collection. For edge collections, the system
        attributes *_from* and *_to* will also be included in the calculation.
        By setting the optional query parameter *withRevisions* to *true*, then revision
        ids (*_rev* system attributes) are included in the checksumming.
        By providing the optional query parameter *withData* with a value of *true*,
        the user-defined document attributes will be included in the calculation too.
        **Note**: Including user-defined attributes will make the checksumming slower.
        The response is a JSON object with the following attributes:
        - *checksum*: The calculated checksum as a number.
        - *revision*: The collection revision id as a string.
      operationId: _apiCollectionCollectionNameChecksumGET
      parameters:
      - description: |
          The name of the collection.
        explode: false
        in: path
        name: collection-name
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Whether or not to include document revision ids in the checksum calculation.
        explode: true
        in: query
        name: withRevisions
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Whether or not to include document body data in the checksum calculation.
        explode: true
        in: query
        name: withData
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "400":
          description: |
            If the *collection-name* is missing, then a *HTTP 400* is
            returned.
        "404":
          description: |
            If the *collection-name* is unknown, then a *HTTP 404*
            is returned.
      tags:
      - Collections
      x-eov-operation-handler: controllers/CollectionsController
  /_api/database/current:
    get:
      description: |
        Retrieves the properties of the current database
        The response is a JSON object with the following attributes:
        - *name*: the name of the current database
        - *id*: the id of the current database
        - *path*: the filesystem path of the current database
        - *isSystem*: whether or not the current database is the *_system* database
        - *sharding*: the default sharding method for collections created in this database
        - *replicationFactor*: the default replication factor for collections in this database
        - *writeConcern*: the default write concern for collections in this database
      operationId: _apiDatabaseCurrentGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_database_current_200_response'
          description: |
            is returned if the information was retrieved successfully.
        "400":
          description: |
            is returned if the request is invalid.
        "404":
          description: |
            is returned if the database could not be found.
      tags:
      - Database
      x-eov-operation-handler: controllers/DatabaseController
  /_api/database/user:
    get:
      description: |
        Retrieves the list of all databases the current user can access without
        specifying a different username or password.
      operationId: _apiDatabaseUserGET
      responses:
        "200":
          description: |
            is returned if the list of database was compiled successfully.
        "400":
          description: |
            is returned if the request is invalid.
      tags:
      - Database
      x-eov-operation-handler: controllers/DatabaseController
  /_api/database:
    get:
      description: |
        Retrieves the list of all existing databases
        **Note**: retrieving the list of databases is only possible from within the *_system* database.
        **Note**: You should use the *GET user API* to fetch the list of the available databases now.
      operationId: _apiDatabaseGET
      responses:
        "200":
          description: |
            is returned if the list of database was compiled successfully.
        "400":
          description: |
            is returned if the request is invalid.
        "403":
          description: |
            is returned if the request was not executed in the *_system* database.
      tags:
      - Database
      x-eov-operation-handler: controllers/DatabaseController
    post:
      description: |
        Creates a new database
        The response is a JSON object with the attribute *result* set to *true*.
        **Note**: creating a new database is only possible from within the *_system* database.
      operationId: _apiDatabasePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_database_get_request'
      responses:
        "201":
          description: |
            is returned if the database was created successfully.
        "400":
          description: |
            is returned if the request parameters are invalid or if a database with the
            specified name already exists.
        "403":
          description: |
            is returned if the request was not executed in the *_system* database.
        "409":
          description: |
            is returned if a database with the specified name already exists.
      tags:
      - Database
      x-eov-operation-handler: controllers/DatabaseController
  /_api/database/{database-name}:
    delete:
      description: |
        Drops the database along with all data stored in it.
        **Note**: dropping a database is only possible from within the *_system* database.
        The *_system* database itself cannot be dropped.
      operationId: _apiDatabaseDatabaseNameDELETE
      parameters:
      - description: |
          The name of the database
        explode: false
        in: path
        name: database-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            is returned if the database was dropped successfully.
        "400":
          description: |
            is returned if the request is malformed.
        "403":
          description: |
            is returned if the request was not executed in the *_system* database.
        "404":
          description: |
            is returned if the database could not be found.
      tags:
      - Database
      x-eov-operation-handler: controllers/DatabaseController
  /_api/view#searchalias:
    post:
      description: |
        Creates a new View with a given name and properties if it does not
        already exist.
      operationId: _apiViewsearchaliasPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_view_searchalias_post_request'
      responses:
        "400":
          description: |
            If the *name* or *type* attribute are missing or invalid, then an *HTTP 400*
            error is returned.
        "409":
          description: |
            If a View called *name* already exists, then an *HTTP 409* error is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
  /_api/view/{view-name}:
    delete:
      description: |
        Drops the View identified by *view-name*.
        If the View was successfully dropped, an object is returned with
        the following attributes:
        - *error*: *false*
        - *id*: The identifier of the dropped View
      operationId: _apiViewViewNameDELETE
      parameters:
      - description: |
          The name of the View to drop.
        explode: false
        in: path
        name: view-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: |
            If the *view-name* is missing, then a *HTTP 400* is returned.
        "404":
          description: |
            If the *view-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
    get:
      description: |
        The result is an object briefly describing the View with the following attributes:
        - *id*: The identifier of the View
        - *name*: The name of the View
        - *type*: The type of the View as string
      operationId: _apiViewViewNameGET
      parameters:
      - description: |
          The name of the View.
        explode: false
        in: path
        name: view-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "404":
          description: |
            If the *view-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
  /_api/view/{view-name}/properties:
    get:
      description: |
        The result is an object with a full description of a specific View, including
        View type dependent properties.
      operationId: _apiViewViewNamePropertiesGET
      parameters:
      - description: |
          The name of the View.
        explode: false
        in: path
        name: view-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: |
            If the *view-name* is missing, then a *HTTP 400* is returned.
        "404":
          description: |
            If the *view-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
  /_api/view:
    get:
      description: |
        Returns an object containing a listing of all Views in a database, regardless
        of their type. It is an array of objects with the following attributes:
        - *id*
        - *name*
        - *type*
      operationId: _apiViewGET
      responses:
        "200":
          description: |
            The list of Views
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
  /_api/view/{view-name}/properties#searchalias:
    patch:
      description: |
        Updates the list of indexes of a `search-alias` View.
      operationId: _apiViewViewNamePropertiessearchaliasPATCH
      parameters:
      - description: |
          The name of the View.
        explode: false
        in: path
        name: view-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_view__view_name__properties_searchalias_patch_request_1'
      responses:
        "200":
          description: |
            On success, an object with the following attributes is returned
        "400":
          description: |
            If the *view-name* is missing, then a *HTTP 400* is returned.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_view__view_name__properties_searchalias_patch_404_response_1'
          description: |
            If the *view-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
    put:
      description: |
        Replaces the list of indexes of a `search-alias` View.
      operationId: _apiViewViewNamePropertiessearchaliasPUT
      parameters:
      - description: |
          The name of the View.
        explode: false
        in: path
        name: view-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_view__view_name__properties_searchalias_patch_request'
      responses:
        "200":
          description: |
            On success, an object with the following attributes is returned
        "400":
          description: |
            If the *view-name* is missing, then a *HTTP 400* is returned.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_view__view_name__properties_searchalias_patch_404_response'
          description: |
            If the *view-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
  /_api/view/{view-name}/rename:
    put:
      description: |
        Renames a View. Expects an object with the attribute(s)
        - *name*: The new name
        It returns an object with the attributes
        - *id*: The identifier of the View.
        - *name*: The new name of the View.
        - *type*: The View type.
        **Note**: This method is not available in a cluster.
      operationId: _apiViewViewNameRenamePUT
      parameters:
      - description: |
          The name of the View to rename.
        explode: false
        in: path
        name: view-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: |
            If the *view-name* is missing, then a *HTTP 400* is returned.
        "404":
          description: |
            If the *view-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
  /_api/view#arangosearch:
    post:
      description: |
        Creates a new View with a given name and properties if it does not
        already exist.
      operationId: _apiViewarangosearchPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_view_arangosearch_post_request'
      responses:
        "400":
          description: |
            If the *name* or *type* attribute are missing or invalid, then an *HTTP 400*
            error is returned.
        "409":
          description: |
            If a View called *name* already exists, then an *HTTP 409* error is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
  /_api/view/{view-name}/properties#ArangoSearch:
    patch:
      description: |
        Changes the properties of a View by updating the specified attributes.
        On success an object with the following attributes is returned:
        - *id*: The identifier of the View
        - *name*: The name of the View
        - *type*: The View type
        - all additional ArangoSearch View implementation specific properties
      operationId: _apiViewViewNamePropertiesArangoSearchPATCH
      parameters:
      - description: |
          The name of the View.
        explode: false
        in: path
        name: view-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_view__view_name__properties_ArangoSearch_patch_request'
      responses:
        "400":
          description: |
            If the *view-name* is missing, then a *HTTP 400* is returned.
        "404":
          description: |
            If the *view-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
    put:
      description: |
        Changes the properties of a View by replacing them.
        On success an object with the following attributes is returned:
        - *id*: The identifier of the View
        - *name*: The name of the View
        - *type*: The View type
        - all additional ArangoSearch View implementation specific properties
      operationId: _apiViewViewNamePropertiesArangoSearchPUT
      parameters:
      - description: |
          The name of the View.
        explode: false
        in: path
        name: view-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_view__view_name__properties_ArangoSearch_patch_request'
      responses:
        "400":
          description: |
            If the *view-name* is missing, then a *HTTP 400* is returned.
        "404":
          description: |
            If the *view-name* is unknown, then a *HTTP 404* is returned.
      tags:
      - Views
      x-eov-operation-handler: controllers/ViewsController
  /_api/replication/server-id:
    get:
      description: |
        Returns the servers id. The id is also returned by other replication API
        methods, and this method is an easy means of determining a server's id.
        The body of the response is a JSON object with the attribute *serverId*. The
        server id is returned as a string.
      operationId: _apiReplicationServerIdGET
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/applier-config:
    get:
      description: |
        Returns the configuration of the replication applier.
        The body of the response is a JSON object with the configuration. The
        following attributes may be present in the configuration:
        - *endpoint*: the logger server to connect to (e.g. "tcp://192.168.173.13:8529").
        - *database*: the name of the database to connect to (e.g. "_system").
        - *username*: an optional ArangoDB username to use when connecting to the endpoint.
        - *password*: the password to use when connecting to the endpoint.
        - *maxConnectRetries*: the maximum number of connection attempts the applier
          will make in a row. If the applier cannot establish a connection to the
          endpoint in this number of attempts, it will stop itself.
        - *connectTimeout*: the timeout (in seconds) when attempting to connect to the
          endpoint. This value is used for each connection attempt.
        - *requestTimeout*: the timeout (in seconds) for individual requests to the endpoint.
        - *chunkSize*: the requested maximum size for log transfer packets that
          is used when the endpoint is contacted.
        - *autoStart*: whether or not to auto-start the replication applier on
          (next and following) server starts
        - *adaptivePolling*: whether or not the replication applier will use
          adaptive polling.
        - *includeSystem*: whether or not system collection operations will be applied
        - *autoResync*: whether or not the follower should perform a full automatic
          resynchronization with the leader in case the leader cannot serve log data
          requested by the follower, or when the replication is started and no tick
          value
          can be found.
        - *autoResyncRetries*: number of resynchronization retries that will be performed
          in a row when automatic resynchronization is enabled and kicks in. Setting this
          to *0* will effectively disable *autoResync*. Setting it to some other value
          will limit the number of retries that are performed. This helps preventing endless
          retries in case resynchronizations always fail.
        - *initialSyncMaxWaitTime*: the maximum wait time (in seconds) that the initial
          synchronization will wait for a response from the leader when fetching initial
          collection data.
          This wait time can be used to control after what time the initial synchronization
          will give up waiting for a response and fail. This value is relevant even
          for continuous replication when *autoResync* is set to *true* because this
          may re-start the initial synchronization when the leader cannot provide
          log data the follwer requires.
          This value will be ignored if set to *0*.
        - *connectionRetryWaitTime*: the time (in seconds) that the applier will
          intentionally idle before it retries connecting to the leader in case of
          connection problems.
          This value will be ignored if set to *0*.
        - *idleMinWaitTime*: the minimum wait time (in seconds) that the applier will
          intentionally idle before fetching more log data from the leader in case
          the leader has already sent all its log data. This wait time can be used
          to control the frequency with which the replication applier sends HTTP log
          fetch requests to the leader in case there is no write activity on the leader.
          This value will be ignored if set to *0*.
        - *idleMaxWaitTime*: the maximum wait time (in seconds) that the applier will
          intentionally idle before fetching more log data from the leader in case the
          leader has already sent all its log data and there have been previous log
          fetch attempts that resulted in no more log data. This wait time can be used
          to control the maximum frequency with which the replication applier sends HTTP
          log fetch requests to the leader in case there is no write activity on the
          leader for longer periods. This configuration value will only be used if the
          option *adaptivePolling* is set to *true*.
          This value will be ignored if set to *0*.
        - *requireFromPresent*: if set to *true*, then the replication applier will check
          at start whether the start tick from which it starts or resumes replication is
          still present on the leader. If not, then there would be data loss. If
          *requireFromPresent* is *true*, the replication applier will abort with an
          appropriate error message. If set to *false*, then the replication applier will
          still start, and ignore the data loss.
        - *verbose*: if set to *true*, then a log line will be emitted for all operations
          performed by the replication applier. This should be used for debugging
          replication
          problems only.
        - *restrictType*: the configuration for *restrictCollections*
        - *restrictCollections*: the optional array of collections to include or exclude,
          based on the setting of *restrictType*
      operationId: _apiReplicationApplierConfigGET
      parameters:
      - description: |
          If set to *true*, returns the configuration of the global replication applier for all
          databases. If set to *false*, returns the configuration of the replication applier in the
          selected database.
        explode: true
        in: query
        name: global
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
    put:
      description: |
        Sets the configuration of the replication applier. The configuration can
        only be changed while the applier is not running. The updated configuration
        will be saved immediately but only become active with the next start of the
        applier.
        In case of success, the body of the response is a JSON object with the updated
        configuration.
      operationId: _apiReplicationApplierConfigPUT
      parameters:
      - description: |
          If set to *true*, adjusts the configuration of the global replication applier for all
          databases. If set to *false*, adjusts the configuration of the replication applier in the
          selected database.
        explode: true
        in: query
        name: global
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_replication_applier_config_get_request'
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "400":
          description: |
            is returned if the configuration is incomplete or malformed, or if the
            replication applier is currently running.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/applier-start:
    put:
      description: |
        Starts the replication applier. This will return immediately if the
        replication applier is already running.
        If the replication applier is not already running, the applier configuration
        will be checked, and if it is complete, the applier will be started in a
        background thread. This means that even if the applier will encounter any
        errors while running, they will not be reported in the response to this
        method.
        To detect replication applier errors after the applier was started, use the
        */_api/replication/applier-state* API instead.
      operationId: _apiReplicationApplierStartPUT
      parameters:
      - description: |
          If set to *true*, starts the global replication applier for all
          databases. If set to *false*, starts the replication applier in the
          selected database.
        explode: true
        in: query
        name: global
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          The remote *lastLogTick* value from which to start applying. If not specified,
          the last saved tick from the previous applier run is used. If there is no
          previous applier state saved, the applier will start at the beginning of the
          logger server's log.
        explode: true
        in: query
        name: from
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "400":
          description: |
            is returned if the replication applier is not fully configured or the
            configuration is invalid.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/applier-stop:
    put:
      description: |
        Stops the replication applier. This will return immediately if the
        replication applier is not running.
      operationId: _apiReplicationApplierStopPUT
      parameters:
      - description: |
          If set to *true*, stops the global replication applier for all
          databases. If set to *false*, stops the replication applier in the
          selected database.
        explode: true
        in: query
        name: global
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/applier-state:
    get:
      description: |
        Returns the state of the replication applier, regardless of whether the
        applier is currently running or not.
        The response is a JSON object with the following attributes:
        - *state*: a JSON object with the following sub-attributes:
          - *running*: whether or not the applier is active and running
          - *lastAppliedContinuousTick*: the last tick value from the continuous
            replication log the applier has applied.
          - *lastProcessedContinuousTick*: the last tick value from the continuous
            replication log the applier has processed.
            Regularly, the last applied and last processed tick values should be
            identical. For transactional operations, the replication applier will first
            process incoming log events before applying them, so the processed tick
            value might be higher than the applied tick value. This will be the case
            until the applier encounters the *transaction commit* log event for the
            transaction.
          - *lastAvailableContinuousTick*: the last tick value the remote server can
            provide, for all databases.
          - *ticksBehind*: this attribute will be present only if the applier is currently
            running. It will provide the number of log ticks between what the applier
            has applied/seen and the last log tick value provided by the remote server.
            If this value is zero, then both servers are in sync. If this is non-zero,
            then the remote server has additional data that the applier has not yet
            fetched and processed, or the remote server may have more data that is not
            applicable to the applier.
            Client applications can use it to determine approximately how far the applier
            is behind the remote server, and can periodically check if the value is
            increasing (applier is falling behind) or decreasing (applier is catching up).
            Please note that as the remote server will only keep one last log tick value
            for all of its databases, but replication may be restricted to just certain
            databases on the applier, this value is more meaningful when the global applier
            is used.
            Additionally, the last log tick provided by the remote server may increase
            due to writes into system collections that are not replicated due to replication
            configuration. So the reported value may exaggerate the reality a bit for
            some scenarios.
          - *time*: the time on the applier server.
          - *totalRequests*: the total number of requests the applier has made to the
            endpoint.
          - *totalFailedConnects*: the total number of failed connection attempts the
            applier has made.
          - *totalEvents*: the total number of log events the applier has processed.
          - *totalOperationsExcluded*: the total number of log events excluded because
            of *restrictCollections*.
          - *progress*: a JSON object with details about the replication applier progress.
            It contains the following sub-attributes if there is progress to report:
            - *message*: a textual description of the progress
            - *time*: the date and time the progress was logged
            - *failedConnects*: the current number of failed connection attempts
          - *lastError*: a JSON object with details about the last error that happened on
            the applier. It contains the following sub-attributes if there was an error:
            - *errorNum*: a numerical error code
            - *errorMessage*: a textual error description
            - *time*: the date and time the error occurred
            In case no error has occurred, *lastError* will be empty.
        - *server*: a JSON object with the following sub-attributes:
          - *version*: the applier server's version
          - *serverId*: the applier server's id
        - *endpoint*: the endpoint the applier is connected to (if applier is
          active) or will connect to (if applier is currently inactive)
        - *database*: the name of the database the applier is connected to (if applier is
          active) or will connect to (if applier is currently inactive)
        Please note that all "tick" values returned do not have a specific unit. Tick
        values are only meaningful when compared to each other. Higher tick values mean
        "later in time" than lower tick values.
      operationId: _apiReplicationApplierStateGET
      parameters:
      - description: |
          If set to *true*, returns the state of the global replication applier for all
          databases. If set to *false*, returns the state of the replication applier in the
          selected database.
        explode: true
        in: query
        name: global
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/make-follower:
    put:
      description: |
        Starts a full data synchronization from a remote endpoint into the local ArangoDB
        database and afterwards starts the continuous replication.
        The operation works on a per-database level.
        All local database data will be removed prior to the synchronization.
        In case of success, the body of the response is a JSON object with the following
        attributes:
        - *state*: a JSON object with the following sub-attributes:
          - *running*: whether or not the applier is active and running
          - *lastAppliedContinuousTick*: the last tick value from the continuous
            replication log the applier has applied.
          - *lastProcessedContinuousTick*: the last tick value from the continuous
            replication log the applier has processed.
            Regularly, the last applied and last processed tick values should be
            identical. For transactional operations, the replication applier will first
            process incoming log events before applying them, so the processed tick
            value might be higher than the applied tick value. This will be the case
            until the applier encounters the *transaction commit* log event for the
            transaction.
          - *lastAvailableContinuousTick*: the last tick value the remote server can
            provide.
          - *ticksBehind*: this attribute will be present only if the applier is currently
            running. It will provide the number of log ticks between what the applier
            has applied/seen and the last log tick value provided by the remote server.
            If this value is zero, then both servers are in sync. If this is non-zero,
            then the remote server has additional data that the applier has not yet
            fetched and processed, or the remote server may have more data that is not
            applicable to the applier.
            Client applications can use it to determine approximately how far the applier
            is behind the remote server, and can periodically check if the value is
            increasing (applier is falling behind) or decreasing (applier is catching up).
            Please note that as the remote server will only keep one last log tick value
            for all of its databases, but replication may be restricted to just certain
            databases on the applier, this value is more meaningful when the global applier
            is used.
            Additionally, the last log tick provided by the remote server may increase
            due to writes into system collections that are not replicated due to replication
            configuration. So the reported value may exaggerate the reality a bit for
            some scenarios.
          - *time*: the time on the applier server.
          - *totalRequests*: the total number of requests the applier has made to the
            endpoint.
          - *totalFailedConnects*: the total number of failed connection attempts the
            applier has made.
          - *totalEvents*: the total number of log events the applier has processed.
          - *totalOperationsExcluded*: the total number of log events excluded because
            of *restrictCollections*.
          - *progress*: a JSON object with details about the replication applier progress.
            It contains the following sub-attributes if there is progress to report:
            - *message*: a textual description of the progress
            - *time*: the date and time the progress was logged
            - *failedConnects*: the current number of failed connection attempts
          - *lastError*: a JSON object with details about the last error that happened on
            the applier. It contains the following sub-attributes if there was an error:
            - *errorNum*: a numerical error code
            - *errorMessage*: a textual error description
            - *time*: the date and time the error occurred
            In case no error has occurred, *lastError* will be empty.
        - *server*: a JSON object with the following sub-attributes:
          - *version*: the applier server's version
          - *serverId*: the applier server's id
        - *endpoint*: the endpoint the applier is connected to (if applier is
          active) or will connect to (if applier is currently inactive)
        - *database*: the name of the database the applier is connected to (if applier is
          active) or will connect to (if applier is currently inactive)
        Please note that all "tick" values returned do not have a specific unit. Tick
        values are only meaningful when compared to each other. Higher tick values mean
        "later in time" than lower tick values.
        WARNING: calling this method will synchronize data from the collections found
        on the remote leader to the local ArangoDB database. All data in the local
        collections will be purged and replaced with data from the leader.
        Use with caution!
        Please also keep in mind that this command may take a long time to complete
        and return. This is because it will first do a full data synchronization with
        the leader, which will take time roughly proportional to the amount of data.
        **Note**: this method is not supported on a Coordinator in a cluster.
      operationId: _apiReplicationMakeFollowerPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_replication_make_follower_put_request'
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "400":
          description: |
            is returned if the configuration is incomplete or malformed.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred during synchronization or when starting the
            continuous replication.
        "501":
          description: |
            is returned when this operation is called on a Coordinator in a cluster.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/inventory:
    get:
      description: "\nReturns the array of collections and their indexes, and the\
        \ array of views available. These\narrays can be used by replication clients\
        \ to initiate an initial synchronization with the\nserver. \nThe response\
        \ will contain all collections, their indexes and views in the requested database\n\
        if *global* is not set, and all collections, indexes and views in all databases\
        \ if *global*\nis set.\nIn case *global* is not set, it is possible to restrict\
        \ the response to a single collection\nby setting the *collection* parameter.\
        \ In this case the response will contain only information\nabout the requested\
        \ collection in the *collections* array, and no information about views\n\
        (i.e. the *views* response attribute will be an empty array).\n\nThe response\
        \ will contain a JSON object with the *collections*, *views*, *state* and\n\
        *tick* attributes.\n\n*collections* is an array of collections with the following\
        \ sub-attributes:\n\n- *parameters*: the collection properties\n\n- *indexes*:\
        \ an array of the indexes of a the collection. Primary indexes and edge indexes\n\
        \   are not included in this array.\n\nThe *state* attribute contains the\
        \ current state of the replication logger. It\ncontains the following sub-attributes:\n\
        \n- *running*: whether or not the replication logger is currently active.\
        \ Note:\n  since ArangoDB 2.2, the value will always be *true*\n\n- *lastLogTick*:\
        \ the value of the last tick the replication logger has written\n\n- *time*:\
        \ the current time on the server\n\n*views* is an array of available views.\n\
        \nReplication clients should note the *lastLogTick* value returned. They can\
        \ then\nfetch collections' data using the dump method up to the value of lastLogTick,\
        \ and\nquery the continuous replication log for log events after this tick\
        \ value.\n\nTo create a full copy of the collections on the server, a replication\
        \ client\ncan execute these steps:\n\n- call the */inventory* API method.\
        \ This returns the *lastLogTick* value and the\n  array of collections and\
        \ indexes from the server.\n\n- for each collection returned by */inventory*,\
        \ create the collection locally and\n  call */dump* to stream the collection\
        \ data to the client, up to the value of\n  *lastLogTick*.\n  After that,\
        \ the client can create the indexes on the collections as they were\n  reported\
        \ by */inventory*.\n\nIf the clients wants to continuously stream replication\
        \ log events from the logger\nserver, the following additional steps need\
        \ to be carried out:\n\n- the client should call */_api/wal/tail* initially\
        \ to fetch the first batch of\n  replication events that were logged after\
        \ the client's call to */inventory*.\n\n  The call to */_api/wal/tail* should\
        \ use a *from* parameter with the value of the\n  *lastLogTick* as reported\
        \ by */inventory*. The call to */_api/wal/tail* will\n  return the *x-arango-replication-lastincluded*\
        \ header which will contain the\n  last tick value included in the response.\n\
        \n- the client can then continuously call */_api/wal/tail* to incrementally\
        \ fetch new\n  replication events that occurred after the last transfer.\n\
        \n  Calls should use a *from* parameter with the value of the *x-arango-replication-lastincluded*\n\
        \  header of the previous response. If there are no more replication events,\
        \ the\n  response will be empty and clients can go to sleep for a while and\
        \ try again\n  later.\n\n**Note**: on a Coordinator, this request must have\
        \ the query parameter\n*DBserver* which must be an ID of a DB-Server.\nThe\
        \ very same request is forwarded synchronously to that DB-Server.\nIt is an\
        \ error if this attribute is not bound in the Coordinator case.\n\n**Note**:\
        \ Using the `global` parameter the top-level object contains a key `databases`\n\
        under which each key represents a database name, and the value conforms to\
        \ the above description.\n\n"
      operationId: _apiReplicationInventoryGET
      parameters:
      - description: |
          Include system collections in the result. The default value is *true*.
        explode: true
        in: query
        name: includeSystem
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Include all databases in the response. Only works on `_system` The default value is *false*.
        explode: true
        in: query
        name: global
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          A valid batchId is required for this API call
        explode: true
        in: query
        name: batchId
        required: true
        schema:
          type: number
        style: form
      - description: |
          If this parameter is set, the response will be restricted to a single collection (the one
          specified), and no views will be returned. This can be used as an optimization to reduce
          the size of the response.
        explode: true
        in: query
        name: collection
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/batch:
    post:
      description: |
        Creates a new dump batch and returns the batch's id.
        The response is a JSON object with the following attributes:
        - *id*: the id of the batch
        - *lastTick*: snapshot tick value using when creating the batch
        - *state*: additional leader state information (only present if the
          `state` URL parameter was set to `true` in the request)
        **Note**: on a Coordinator, this request must have the query parameter
        *DBserver* which must be an ID of a DB-Server.
        The very same request is forwarded synchronously to that DB-Server.
        It is an error if this attribute is not bound in the Coordinator case.
      operationId: _apiReplicationBatchPOST
      parameters:
      - description: "setting `state` to true will make the response also contain\n\
          a `state` attribute with information about the leader state.\nThis is used\
          \ only internally during the replication process \nand should not be used\
          \ by client applications.\n\n"
        explode: true
        in: query
        name: state
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_replication_batch_post_request'
      responses:
        "200":
          description: |
            is returned if the batch was created successfully.
        "400":
          description: |
            is returned if the ttl value is invalid or if *DBserver* attribute
            is not specified or illegal on a Coordinator.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/batch/{id}:
    delete:
      description: |
        Deletes the existing dump batch, allowing compaction and cleanup to resume.
        **Note**: on a Coordinator, this request must have the query parameter
        *DBserver* which must be an ID of a DB-Server.
        The very same request is forwarded synchronously to that DB-Server.
        It is an error if this attribute is not bound in the Coordinator case.
      operationId: _apiReplicationBatchIdDELETE
      parameters:
      - description: |
          The id of the batch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: |
            is returned if the batch was deleted successfully.
        "400":
          description: |
            is returned if the batch was not found.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
    put:
      description: |
        Extends the ttl of an existing dump batch, using the batch's id and
        the provided ttl value.
        If the batch's ttl can be extended successfully, the response is empty.
        **Note**: on a Coordinator, this request must have the query parameter
        *DBserver* which must be an ID of a DB-Server.
        The very same request is forwarded synchronously to that DB-Server.
        It is an error if this attribute is not bound in the Coordinator case.
      operationId: _apiReplicationBatchIdPUT
      parameters:
      - description: |
          The id of the batch.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_replication_batch__id__delete_request'
      responses:
        "204":
          description: |
            is returned if the batch's ttl was extended successfully.
        "400":
          description: |
            is returned if the ttl value is invalid or the batch was not found.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/dump:
    get:
      description: |
        Returns the data from the collection for the requested range.
        The *chunkSize* query parameter can be used to control the size of the result.
        It must be specified in bytes. The *chunkSize* value will only be honored
        approximately. Otherwise a too low *chunkSize* value could cause the server
        to not be able to put just one entry into the result and return it.
        Therefore, the *chunkSize* value will only be consulted after an entry has
        been written into the result. If the result size is then bigger than
        *chunkSize*, the server will respond with as many entries as there are
        in the response already. If the result size is still smaller than *chunkSize*,
        the server will try to return more data if there's more data left to return.
        If *chunkSize* is not specified, some server-side default value will be used.
        The *Content-Type* of the result is *application/x-arango-dump*. This is an
        easy-to-process format, with all entries going onto separate lines in the
        response body.
        Each line itself is a JSON object, with at least the following attributes:
        - *tick*: the operation's tick attribute
        - *key*: the key of the document/edge or the key used in the deletion operation
        - *rev*: the revision id of the document/edge or the deletion operation
        - *data*: the actual document/edge data for types 2300 and 2301. The full
          document/edge data will be returned even for updates.
        - *type*: the type of entry. Possible values for *type* are:
          - 2300: document insertion/update
          - 2301: edge insertion/update
          - 2302: document/edge deletion
        **Note**: there will be no distinction between inserts and updates when calling this method.
      operationId: _apiReplicationDumpGET
      parameters:
      - description: |
          The name or id of the collection to dump.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      - description: |
          Approximate maximum size of the returned result.
        explode: true
        in: query
        name: chunkSize
        required: false
        schema:
          type: number
        style: form
      - description: |
          The id of the snapshot to use
        explode: true
        in: query
        name: batchId
        required: true
        schema:
          type: number
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully and data was returned. The header
            `x-arango-replication-lastincluded` is set to the tick of the last document returned.
        "204":
          description: |
            is returned if the request was executed successfully, but there was no content available.
            The header `x-arango-replication-lastincluded` is `0` in this case.
        "404":
          description: |
            is returned when the collection could not be found.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/revisions/tree:
    get:
      description: |
        Returns the Merkle tree from the collection.
        The result will be JSON/VelocyPack in the following format:
        ```
        {
          version: <Number>,
          branchingFactor: <Number>
          maxDepth: <Number>,
          rangeMin: <String, revision>,
          rangeMax: <String, revision>,
          nodes: [
            { count: <Number>, hash: <String, revision> },
            { count: <Number>, hash: <String, revision> },
            ...
            { count: <Number>, hash: <String, revision> }
          ]
        }
        ```
        At the moment, there is only one version, 1, so this can safely be ignored for
        now.
        Each `<String, revision>` value type is a 64-bit value encoded as a string of
        11 characters, using the same encoding as our document `_rev` values. The
        reason for this is that 64-bit values cannot necessarily be represented in full
        in JavaScript, as it handles all numbers as floating point, and can only
        represent up to `2^53-1` faithfully.
        The node count should correspond to a full tree with the given `maxDepth` and
        `branchingFactor`. The nodes are laid out in level-order tree traversal, so the
        root is at index `0`, its children at indices `[1, branchingFactor]`, and so
        on.
      operationId: _apiReplicationRevisionsTreeGET
      parameters:
      - description: |
          The name or id of the collection to query.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      - description: |
          The id of the snapshot to use
        explode: true
        in: query
        name: batchId
        required: true
        schema:
          type: number
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully and data was returned.
        "401":
          description: |
            is returned if necessary parameters are missing
        "404":
          description: |
            is returned when the collection or snapshot could not be found.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
        "501":
          description: |
            is returned if called on a collection which doesn't support sync-by-revision
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
    post:
      description: |
        Rebuilds the Merkle tree for the collection.
        If successful, there will be no return body.
      operationId: _apiReplicationRevisionsTreePOST
      parameters:
      - description: |
          The name or id of the collection to query.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: |
            is returned if the request was executed successfully.
        "401":
          description: |
            is returned if necessary parameters are missing
        "404":
          description: |
            is returned when the collection or could not be found.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
        "501":
          description: |
            is returned if called on a collection which doesn't support sync-by-revision
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/revisions/ranges:
    put:
      description: |
        Returns the revision IDs of documents within requested ranges
        The body of the request should be JSON/VelocyPack and should consist of an
        array of pairs of string-encoded revision IDs:
        ```
        [
          [<String, revision>, <String, revision>],
          [<String, revision>, <String, revision>],
          ...
          [<String, revision>, <String, revision>]
        ]
        ```
        In particular, the pairs should be non-overlapping, and sorted in ascending
        order of their decoded values.
        The result will be JSON/VelocyPack in the following format:
        ```
        {
          ranges: [
            [<String, revision>, <String, revision>, ... <String, revision>],
            [<String, revision>, <String, revision>, ... <String, revision>],
            ...,
            [<String, revision>, <String, revision>, ... <String, revision>]
          ]
          resume: <String, revision>
        }
        ```
        The `resume` field is optional. If specified, then the response is to be
        considered partial, only valid through the revision specified. A subsequent
        request should be made with the same request body, but specifying the `resume`
        URL parameter with the value specified. The subsequent response will pick up
        from the appropriate request pair, and omit any complete ranges or revisions
        which are less than the requested resume revision. As an example (ignoring the
        string-encoding for a moment), if ranges `[1, 3], [5, 9], [12, 15]` are
        requested, then a first response may return `[], [5, 6]` with a resume point of
        `7` and a subsequent response might be `[8], [12, 13]`.
        If a requested range contains no revisions, then an empty array is returned.
        Empty ranges will not be omitted.
        Each `<String, revision>` value type is a 64-bit value encoded as a string of
        11 characters, using the same encoding as our document `_rev` values. The
        reason for this is that 64-bit values cannot necessarily be represented in full
        in JavaScript, as it handles all numbers as floating point, and can only
        represent up to `2^53-1` faithfully.
      operationId: _apiReplicationRevisionsRangesPUT
      parameters:
      - description: |
          The name or id of the collection to query.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      - description: |
          The id of the snapshot to use
        explode: true
        in: query
        name: batchId
        required: true
        schema:
          type: number
        style: form
      - description: |
          The revision at which to resume, if a previous request was truncated
        explode: true
        in: query
        name: resume
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully and data was returned.
        "401":
          description: |
            is returned if necessary parameters are missing or incorrect
        "404":
          description: |
            is returned when the collection or snapshot could not be found.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
        "501":
          description: |
            is returned if called on a collection which doesn't support sync-by-revision
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/revisions/documents:
    put:
      description: |
        Returns documents by revision
        The body of the request should be JSON/VelocyPack and should consist of an
        array of string-encoded revision IDs:
        ```
        [
          <String, revision>,
          <String, revision>,
          ...
          <String, revision>
        ]
        ```
        In particular, the revisions should be sorted in ascending order of their
        decoded values.
        The result will be a JSON/VelocyPack array of document objects. If there is no
        document corresponding to a particular requested revision, an empty object will
        be returned in its place.
        The response may be truncated if it would be very long. In this case, the
        response array length will be less than the request array length, and
        subsequent requests can be made for the omitted documents.
        Each `<String, revision>` value type is a 64-bit value encoded as a string of
        11 characters, using the same encoding as our document `_rev` values. The
        reason for this is that 64-bit values cannot necessarily be represented in full
        in JavaScript, as it handles all numbers as floating point, and can only
        represent up to `2^53-1` faithfully.
      operationId: _apiReplicationRevisionsDocumentsPUT
      parameters:
      - description: |
          The name or id of the collection to query.
        explode: true
        in: query
        name: collection
        required: true
        schema:
          type: string
        style: form
      - description: |
          The id of the snapshot to use
        explode: true
        in: query
        name: batchId
        required: true
        schema:
          type: number
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully and data was returned.
        "401":
          description: |
            is returned if necessary parameters are missing or incorrect
        "404":
          description: |
            is returned when the collection or snapshot could not be found.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
        "501":
          description: |
            is returned if called on a collection which doesn't support sync-by-revision
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/sync:
    put:
      description: |
        Starts a full data synchronization from a remote endpoint into the local
        ArangoDB database.
        The *sync* method can be used by replication clients to connect an ArangoDB database
        to a remote endpoint, fetch the remote list of collections and indexes, and collection
        data. It will thus create a local backup of the state of data at the remote ArangoDB
        database. *sync* works on a per-database level.
        *sync* will first fetch the list of collections and indexes from the remote endpoint.
        It does so by calling the *inventory* API of the remote database. It will then purge
        data in the local ArangoDB database, and after start will transfer collection data
        from the remote database to the local ArangoDB database. It will extract data from the
        remote database by calling the remote database's *dump* API until all data are fetched.
        In case of success, the body of the response is a JSON object with the following
        attributes:
        - *collections*: an array of collections that were transferred from the endpoint
        - *lastLogTick*: the last log tick on the endpoint at the time the transfer
          was started. Use this value as the *from* value when starting the continuous
          synchronization later.
        WARNING: calling this method will synchronize data from the collections found
        on the remote endpoint to the local ArangoDB database. All data in the local
        collections will be purged and replaced with data from the endpoint.
        Use with caution!
        **Note**: this method is not supported on a Coordinator in a cluster.
      operationId: _apiReplicationSyncPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_replication_sync_put_request'
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "400":
          description: |
            is returned if the configuration is incomplete or malformed.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred during synchronization.
        "501":
          description: |
            is returned when this operation is called on a Coordinator in a cluster.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/clusterInventory:
    get:
      description: |
        Returns the array of collections and indexes available on the cluster.
        The response will be an array of JSON objects, one for each collection.
        Each collection containscontains exactly two keys "parameters" and
        "indexes". This
        information comes from Plan/Collections/{DB-Name}/* in the Agency,
        just that the *indexes* attribute there is relocated to adjust it to
        the data format of arangodump.
      operationId: _apiReplicationClusterInventoryGET
      parameters:
      - description: |
          Include system collections in the result. The default value is *true*.
        explode: true
        in: query
        name: includeSystem
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/logger-state:
    get:
      description: |
        Returns the current state of the server's replication logger. The state will
        include information about whether the logger is running and about the last
        logged tick value. This tick value is important for incremental fetching of
        data.
        The body of the response contains a JSON object with the following
        attributes:
        - *state*: the current logger state as a JSON object with the following
          sub-attributes:
          - *running*: whether or not the logger is running
          - *lastLogTick*: the tick value of the latest tick the logger has logged.
            This value can be used for incremental fetching of log data.
          - *totalEvents*: total number of events logged since the server was started.
            The value is not reset between multiple stops and re-starts of the logger.
          - *time*: the current date and time on the logger server
        - *server*: a JSON object with the following sub-attributes:
          - *version*: the logger server's version
          - *serverId*: the logger server's id
        - *clients*: returns the last fetch status by replication clients connected to
          the logger. Each client is returned as a JSON object with the following attributes:
          - *syncerId*: id of the client syncer
          - *serverId*: server id of client
          - *lastServedTick*: last tick value served to this client via the WAL tailing API
          - *time*: date and time when this client last called the WAL tailing API
      operationId: _apiReplicationLoggerStateGET
      responses:
        "200":
          description: |
            is returned if the logger state could be determined successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if the logger state could not be determined.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/logger-follow:
    get:
      description: |
        Returns data from the server's replication log. This method can be called
        by replication clients after an initial synchronization of data. The method
        will return all "recent" log entries from the logger server, and the clients
        can replay and apply these entries locally so they get to the same data
        state as the logger server.
        Clients can call this method repeatedly to incrementally fetch all changes
        from the logger server. In this case, they should provide the *from* value so
        they will only get returned the log events since their last fetch.
        When the *from* query parameter is not used, the logger server will return log
        entries starting at the beginning of its replication log. When the *from*
        parameter is used, the logger server will only return log entries which have
        higher tick values than the specified *from* value (note: the log entry with a
        tick value equal to *from* will be excluded). Use the *from* value when
        incrementally fetching log data.
        The *to* query parameter can be used to optionally restrict the upper bound of
        the result to a certain tick value. If used, the result will contain only log events
        with tick values up to (including) *to*. In incremental fetching, there is no
        need to use the *to* parameter. It only makes sense in special situations,
        when only parts of the change log are required.
        The *chunkSize* query parameter can be used to control the size of the result.
        It must be specified in bytes. The *chunkSize* value will only be honored
        approximately. Otherwise a too low *chunkSize* value could cause the server
        to not be able to put just one log entry into the result and return it.
        Therefore, the *chunkSize* value will only be consulted after a log entry has
        been written into the result. If the result size is then bigger than
        *chunkSize*, the server will respond with as many log entries as there are
        in the response already. If the result size is still smaller than *chunkSize*,
        the server will try to return more data if there's more data left to return.
        If *chunkSize* is not specified, some server-side default value will be used.
        The *Content-Type* of the result is *application/x-arango-dump*. This is an
        easy-to-process format, with all log events going onto separate lines in the
        response body. Each log event itself is a JSON object, with at least the
        following attributes:
        - *tick*: the log event tick value
        - *type*: the log event type
        Individual log events will also have additional attributes, depending on the
        event type. A few common attributes which are used for multiple events types
        are:
        - *cid*: id of the collection the event was for
        - *tid*: id of the transaction the event was contained in
        - *key*: document key
        - *rev*: document revision id
        - *data*: the original document data
        The response will also contain the following HTTP headers:
        - *x-arango-replication-active*: whether or not the logger is active. Clients
          can use this flag as an indication for their polling frequency. If the
          logger is not active and there are no more replication events available, it
          might be sensible for a client to abort, or to go to sleep for a long time
          and try again later to check whether the logger has been activated.
        - *x-arango-replication-lastincluded*: the tick value of the last included
          value in the result. In incremental log fetching, this value can be used
          as the *from* value for the following request. **Note** that if the result is
          empty, the value will be *0*. This value should not be used as *from* value
          by clients in the next request (otherwise the server would return the log
          events from the start of the log again).
        - *x-arango-replication-lasttick*: the last tick value the logger server has
          logged (not necessarily included in the result). By comparing the the last
          tick and last included tick values, clients have an approximate indication of
          how many events there are still left to fetch.
        - *x-arango-replication-checkmore*: whether or not there already exists more
          log data which the client could fetch immediately. If there is more log data
          available, the client could call *logger-follow* again with an adjusted *from*
          value to fetch remaining log entries until there are no more.
          If there isn't any more log data to fetch, the client might decide to go
          to sleep for a while before calling the logger again.
        **Note**: this method is not supported on a Coordinator in a cluster.
      operationId: _apiReplicationLoggerFollowGET
      parameters:
      - description: |
          Exclusive lower bound tick value for results.
        explode: true
        in: query
        name: from
        required: false
        schema:
          type: number
        style: form
      - description: |
          Inclusive upper bound tick value for results.
        explode: true
        in: query
        name: to
        required: false
        schema:
          type: number
        style: form
      - description: |
          Approximate maximum size of the returned result.
        explode: true
        in: query
        name: chunkSize
        required: false
        schema:
          type: number
        style: form
      - description: |
          Include system collections in the result. The default value is *true*.
        explode: true
        in: query
        name: includeSystem
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully, and there are log
            events available for the requested range. The response body will not be empty
            in this case.
        "204":
          description: |
            is returned if the request was executed successfully, but there are no log
            events available for the requested range. The response body will be empty
            in this case.
        "400":
          description: |
            is returned if either the *from* or *to* values are invalid.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
        "501":
          description: |
            is returned when this operation is called on a Coordinator in a cluster.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/logger-first-tick:
    get:
      description: |
        Returns the first available tick value that can be served from the server's
        replication log. This method can be called by replication clients after to
        determine if certain data (identified by a tick value) is still available
        for replication.
        The result is a JSON object containing the attribute *firstTick*. This
        attribute contains the minimum tick value available in the server's
        replication
        log.
        **Note**: this method is not supported on a Coordinator in a cluster.
      operationId: _apiReplicationLoggerFirstTickGET
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
        "501":
          description: |
            is returned when this operation is called on a Coordinator in a cluster.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/replication/logger-tick-ranges:
    get:
      description: |
        Returns the currently available ranges of tick values for all currently
        available WAL logfiles. The tick values can be used to determine if certain
        data (identified by tick value) are still available for replication.
        The body of the response contains a JSON array. Each array member is an
        object
        that describes a single logfile. Each object has the following attributes:
        * *datafile*: name of the logfile
        * *status*: status of the datafile, in textual form (e.g. "sealed", "open")
        * *tickMin*: minimum tick value contained in logfile
        * *tickMax*: maximum tick value contained in logfile
      operationId: _apiReplicationLoggerTickRangesGET
      responses:
        "200":
          description: |
            is returned if the tick ranges could be determined successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if the logger state could not be determined.
        "501":
          description: |
            is returned when this operation is called on a Coordinator in a cluster.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/wal/range:
    get:
      description: |
        Returns the currently available ranges of tick values for all WAL files.
        The tick values can be used to determine if certain
        data (identified by tick value) are still available for replication.
        The body of the response contains a JSON object.
        * *tickMin*: minimum tick available
        * *tickMax*: maximum tick available
        * *time*: the server time as string in format "YYYY-MM-DDTHH:MM:SSZ"
        * *server*: An object with fields *version* and *serverId*
      operationId: _apiWalRangeGET
      responses:
        "200":
          description: |
            is returned if the tick ranges could be determined successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if the server operations state could not be determined.
        "501":
          description: |
            is returned when this operation is called on a Coordinator in a cluster.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/wal/lastTick:
    get:
      description: |
        Returns the last available tick value that can be served from the server's
        replication log. This corresponds to the tick of the latest successfull operation.
        The result is a JSON object containing the attributes *tick*, *time* and *server*.
        * *tick*: contains the last available tick, *time*
        * *time*: the server time as string in format "YYYY-MM-DDTHH:MM:SSZ"
        * *server*: An object with fields *version* and *serverId*
        **Note**: this method is not supported on a Coordinator in a cluster.
      operationId: _apiWalLastTickGET
      responses:
        "200":
          description: |
            is returned if the request was executed successfully.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
        "501":
          description: |
            is returned when this operation is called on a Coordinator in a cluster.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/wal/tail:
    get:
      description: |
        Returns data from the server's write-ahead log (also named replication log). This method can be called
        by replication clients after an initial synchronization of data. The method
        returns all "recent" logged operations from the server. Clients
        can replay and apply these operations locally so they get to the same data
        state as the server.
        Clients can call this method repeatedly to incrementally fetch all changes
        from the server. In this case, they should provide the `from` value so
        they only get returned the log events since their last fetch.
        When the `from` query parameter is not used, the server returns log
        entries starting at the beginning of its replication log. When the `from`
        parameter is used, the server only returns log entries which have
        higher tick values than the specified `from` value (note: the log entry with a
        tick value equal to `from` is excluded). Use the `from` value when
        incrementally fetching log data.
        The `to` query parameter can be used to optionally restrict the upper bound of
        the result to a certain tick value. If used, the result contains only log events
        with tick values up to (including) `to`. In incremental fetching, there is no
        need to use the `to` parameter. It only makes sense in special situations,
        when only parts of the change log are required.
        The `chunkSize` query parameter can be used to control the size of the result.
        It must be specified in bytes. The `chunkSize` value is only honored
        approximately. Otherwise, a too low `chunkSize` value could cause the server
        to not be able to put just one log entry into the result and return it.
        Therefore, the `chunkSize` value is only consulted after a log entry has
        been written into the result. If the result size is then bigger than
        `chunkSize`, the server responds with as many log entries as there are
        in the response already. If the result size is still smaller than `chunkSize`,
        the server tries to return more data if there's more data left to return.
        If `chunkSize` is not specified, some server-side default value is used.
        The `Content-Type` of the result is `application/x-arango-dump`. This is an
        easy-to-process format, with all log events going onto separate lines in the
        response body. Each log event itself is a JSON object, with at least the
        following attributes:
        - `tick`: the log event tick value
        - `type`: the log event type
        Individual log events also have additional attributes, depending on the
        event type. A few common attributes which are used for multiple events types
        are:
        - `cuid`: globally unique id of the View or collection the event was for
        - `db`: the database name the event was for
        - `tid`: id of the transaction the event was contained in
        - `data`: the original document data
        A more detailed description of the individual replication event types and their
        data structures can be found in [Operation Types](#operation-types).
        The response also contains the following HTTP headers:
        - `x-arango-replication-active`: whether or not the logger is active. Clients
          can use this flag as an indication for their polling frequency. If the
          logger is not active and there are no more replication events available, it
          might be sensible for a client to abort, or to go to sleep for a long time
          and try again later to check whether the logger has been activated.
        - `x-arango-replication-lastincluded`: the tick value of the last included
          value in the result. In incremental log fetching, this value can be used
          as the `from` value for the following request. **Note** that if the result is
          empty, the value is `0`. This value should not be used as `from` value
          by clients in the next request (otherwise the server would return the log
          events from the start of the log again).
        - `x-arango-replication-lastscanned`: the last tick the server scanned while
          computing the operation log. This might include operations the server did not
          returned to you due to various reasons (i.e. the value was filtered or skipped).
          You may use this value in the `lastScanned` header to allow the RocksDB storage engine
          to break up requests over multiple responses.
        - `x-arango-replication-lasttick`: the last tick value the server has
          logged in its write ahead log (not necessarily included in the result). By comparing the the last
          tick and last included tick values, clients have an approximate indication of
          how many events there are still left to fetch.
        - `x-arango-replication-frompresent`: is set to _true_ if server returned
          all tick values starting from the specified tick in the _from_ parameter.
          Should this be set to false the server did not have these operations anymore
          and the client might have missed operations.
        - `x-arango-replication-checkmore`: whether or not there already exists more
          log data which the client could fetch immediately. If there is more log data
          available, the client could call the tailing API again with an adjusted `from`
          value to fetch remaining log entries until there are no more.
          If there isn't any more log data to fetch, the client might decide to go
          to sleep for a while before calling the logger again.
        **Note**: this method is not supported on a Coordinator in a cluster.
      operationId: _apiWalTailGET
      parameters:
      - description: |
          Whether operations for all databases should be included. If set to `false`,
          only the operations for the current database are included. The value `true` is
          only valid on the `_system` database. The default is `false`.
        explode: true
        in: query
        name: global
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Exclusive lower bound tick value for results. On successive calls
          to this API you should set this to the value returned
          with the `x-arango-replication-lastincluded` header (unless that header
          contains 0).
        explode: true
        in: query
        name: from
        required: false
        schema:
          type: number
        style: form
      - description: |
          Inclusive upper bound tick value for results.
        explode: true
        in: query
        name: to
        required: false
        schema:
          type: number
        style: form
      - description: |
          Should be set to the value of the `x-arango-replication-lastscanned` header
          or alternatively 0 on first try. This allows the RocksDB storage engine to break up
          large transactions over multiple responses.
        explode: true
        in: query
        name: lastScanned
        required: false
        schema:
          type: number
        style: form
      - description: |
          Approximate maximum size of the returned result.
        explode: true
        in: query
        name: chunkSize
        required: false
        schema:
          type: number
        style: form
      - description: |
          The ID of the client used to tail results. The server uses this to
          keep operations until the client has fetched them. Must be a positive integer.
          **Note** `syncerId` or `serverId` is required to have a chance at fetching all
          operations with the RocksDB storage engine.
        explode: true
        in: query
        name: syncerId
        required: false
        schema:
          type: number
        style: form
      - description: |
          The ID of the client machine. If `syncerId` is unset, the server uses
          this to keep operations until the client has fetched them. Must be a positive
          integer.
          **Note** `serverId` or `syncerId` is required to have a chance at fetching all
          operations with the RocksDB storage engine.
        explode: true
        in: query
        name: serverId
        required: false
        schema:
          type: number
        style: form
      - description: |
          Short description of the client, used for informative purposes only.
        explode: true
        in: query
        name: clientInfo
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: |
            is returned if the request was executed successfully, and there are log
            events available for the requested range. The response body is not empty
            in this case.
        "204":
          description: |
            is returned if the request was executed successfully, but there are no log
            events available for the requested range. The response body is empty
            in this case.
        "400":
          description: |
            is returned if either the `from` or `to` values are invalid.
        "405":
          description: |
            is returned when an invalid HTTP method is used.
        "500":
          description: |
            is returned if an error occurred while assembling the response.
        "501":
          description: |
            is returned when this operation is called on a Coordinator in a cluster.
      tags:
      - Replication
      x-eov-operation-handler: controllers/ReplicationController
  /_api/gharial/{graph}/edge/{collection}:
    post:
      description: |
        Creates a new edge in the collection.
        Within the body the edge has to contain a *_from* and *_to* value referencing to valid vertices in the graph.
        Furthermore the edge has to be valid in the definition of the used edge collection.
      operationId: _apiGharialGraphEdgeCollectionPOST
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the edge collection the edge belongs to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if the response should contain the complete
          new version of the document.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial__graph__edge__collection__post_request'
      responses:
        "201":
          description: |
            Returned if the edge could be created and waitForSync is true.
        "202":
          description: |
            Returned if the request was successful but waitForSync is false.
        "400":
          description: |
            Returned if the input document is invalid.
            This can for instance be the case if the `_from` or `_to` attribute is missing
            or malformed, or if the referenced vertex collection is not part of the graph.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to insert edges into the graph  you at least need to have the following privileges
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__edge__collection__post_404_response'
          description: |
            Returned in any of the following cases
            * no graph with this name could be found.
            * the edge collection is not part of the graph.
            * the vertex collection is part of the graph, but does not exist.
            * `_from` or `_to` vertex does not exist.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
  /_api/gharial/{graph}/edge/{collection}/{edge}:
    delete:
      description: |
        Removes an edge from the collection.
      operationId: _apiGharialGraphEdgeCollectionEdgeDELETE
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the edge collection the edge belongs to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The *_key* attribute of the edge.
        explode: false
        in: path
        name: edge
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the deleted document should
          be returned within the response object.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If the "If-Match" header is given, then it must contain exactly one Etag. The document is updated,
          if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative
          you can supply the Etag in an attribute rev in the URL.
        explode: false
        in: header
        name: if-match
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Returned if the edge could be removed.
        "202":
          description: |
            Returned if the request was successful but waitForSync is false.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to delete vertices in the graph  you at least need to have the following privileges
        "404":
          description: |
            Returned in the following cases
            * No graph with this name could be found.
            * This collection is not part of the graph.
            * The edge to remove does not exist.
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__edge__collection___edge__delete_412_response_2'
          description: |
            Returned if if-match header is given, but the stored documents revision is different.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    get:
      description: |
        Gets an edge from the given collection.
      operationId: _apiGharialGraphEdgeCollectionEdgeGET
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the edge collection the edge belongs to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The *_key* attribute of the edge.
        explode: false
        in: path
        name: edge
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Must contain a revision.
          If this is set a document is only returned if
          it has exactly this revision.
          Also see if-match header as an alternative to this.
        explode: true
        in: query
        name: rev
        required: false
        schema:
          type: string
        style: form
      - description: |
          If the "If-Match" header is given, then it must contain exactly one Etag. The document is returned,
          if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative
          you can supply the Etag in an attribute rev in the URL.
        explode: false
        in: header
        name: if-match
        required: false
        schema:
          type: string
        style: simple
      - description: |
          If the "If-None-Match" header is given, then it must contain exactly one Etag. The document is returned,
          only if it has a different revision as the given Etag. Otherwise a HTTP 304 is returned.
        explode: false
        in: header
        name: if-none-match
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Returned if the edge could be found.
        "304":
          description: |
            Returned if the if-none-match header is given and the
            currently stored edge still has this revision value.
            So there was no update between the last time the edge
            was fetched by the caller.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to update vertices in the graph  you at least need to have the following privileges
        "404":
          description: |
            Returned in the following cases
            * No graph with this name could be found.
            * This collection is not part of the graph.
            * The edge does not exist.
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__edge__collection___edge__delete_412_response'
          description: |
            Returned if if-match header is given, but the stored documents revision is different.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    patch:
      description: |
        Updates the data of the specific edge in the collection.
      operationId: _apiGharialGraphEdgeCollectionEdgePATCH
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the edge collection the edge belongs to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The *_key* attribute of the vertex.
        explode: false
        in: path
        name: edge
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if values set to null should be stored.
          By default (true) the given documents attribute(s) will be set to null.
          If this parameter is false the attribute(s) will instead be deleted from the
          document.
        explode: true
        in: query
        name: keepNull
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the deleted document should
          be returned within the response object.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the new document should
          be returned within the response object.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If the "If-Match" header is given, then it must contain exactly one Etag. The document is updated,
          if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative
          you can supply the Etag in an attribute rev in the URL.
        explode: false
        in: header
        name: if-match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial__graph__edge__collection___edge__delete_request'
      responses:
        "200":
          description: |
            Returned if the edge could be updated, and waitForSync is false.
        "202":
          description: |
            Returned if the request was successful but waitForSync is false.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to update edges in the graph  you at least need to have the following privileges
        "404":
          description: |
            Returned in the following cases
            * No graph with this name could be found.
            * This collection is not part of the graph.
            * The edge to update does not exist.
            * either `_from` or `_to` vertex does not exist (if updated).
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__edge__collection___edge__delete_412_response_1'
          description: |
            Returned if if-match header is given, but the stored documents revision is different.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    put:
      description: |
        Replaces the data of an edge in the collection.
      operationId: _apiGharialGraphEdgeCollectionEdgePUT
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the edge collection the edge belongs to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The *_key* attribute of the vertex.
        explode: false
        in: path
        name: edge
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if values set to null should be stored. By default the key is not removed from the document.
        explode: true
        in: query
        name: keepNull
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the deleted document should
          be returned within the response object.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the new document should
          be returned within the response object.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If the "If-Match" header is given, then it must contain exactly one Etag. The document is updated,
          if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative
          you can supply the Etag in an attribute rev in the URL.
        explode: false
        in: header
        name: if-match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial__graph__edge__collection__post_request'
      responses:
        "201":
          description: |
            Returned if the request was successful but waitForSync is true.
        "202":
          description: |
            Returned if the request was successful but waitForSync is false.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to replace edges in the graph  you at least need to have the following privileges
        "404":
          description: |
            Returned in the following cases
            * No graph with this name could be found.
            * This collection is not part of the graph.
            * The edge to replace does not exist.
            * either `_from` or `_to` vertex does not exist.
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__edge__collection___edge__delete_412_response_1'
          description: |
            Returned if if-match header is given, but the stored documents revision is different.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
  /_api/gharial/{graph}/vertex/{collection}:
    delete:
      description: |
        Removes a vertex collection from the graph and optionally deletes the collection,
        if it is not used in any other graph.
        It can only remove vertex collections that are no longer part of edge definitions,
        if they are used in edge definitions you are required to modify those first.
      operationId: _apiGharialGraphVertexCollectionDELETE
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the vertex collection.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Drop the collection as well.
          Collection will only be dropped if it is not used in other graphs.
        explode: true
        in: query
        name: dropCollection
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: |
            Returned if the vertex collection was removed from the graph successfully
            and waitForSync is true.
        "202":
          description: |
            Returned if the request was successful but waitForSync is false.
        "400":
          description: |
            Returned if the vertex collection is still used in an edge definition.
            In this case it cannot be removed from the graph yet, it has to be
            removed from the edge definition first.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to drop a vertex you at least need to have the following privileges
              1. `Administrate` access on the Database.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection__delete_404_response_1'
          description: |
            Returned if no graph with this name could be found.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    post:
      description: |
        Adds a vertex to the given collection.
      operationId: _apiGharialGraphVertexCollectionPOST
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the vertex collection the vertex should be inserted into.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if the response should contain the complete
          new version of the document.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial__graph__vertex__collection__delete_request'
      responses:
        "201":
          description: |
            Returned if the vertex could be added and waitForSync is true.
        "202":
          description: |
            Returned if the request was successful but waitForSync is false.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to insert vertices into the graph  you at least need to have the following privileges
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection__delete_404_response'
          description: |
            Returned if no graph with this name could be found.
            Or if a graph is found but this collection is not part of the graph.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
  /_api/gharial/{graph}/vertex/{collection}/{vertex}:
    delete:
      description: |
        Removes a vertex from the collection.
      operationId: _apiGharialGraphVertexCollectionVertexDELETE
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the vertex collection the vertex belongs to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The *_key* attribute of the vertex.
        explode: false
        in: path
        name: vertex
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the deleted document should
          be returned within the response object.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If the "If-Match" header is given, then it must contain exactly one Etag. The document is updated,
          if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative
          you can supply the Etag in an attribute rev in the URL.
        explode: false
        in: header
        name: if-match
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Returned if the vertex could be removed.
        "202":
          description: |
            Returned if the request was successful but waitForSync is false.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to delete vertices in the graph  you at least need to have the following privileges
        "404":
          description: |
            Returned in the following cases
            * No graph with this name could be found.
            * This collection is not part of the graph.
            * The vertex to remove does not exist.
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection___vertex__delete_412_response_2'
          description: |
            Returned if if-match header is given, but the stored documents revision is different.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    get:
      description: |
        Gets a vertex from the given collection.
      operationId: _apiGharialGraphVertexCollectionVertexGET
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the vertex collection the vertex belongs to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The *_key* attribute of the vertex.
        explode: false
        in: path
        name: vertex
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Must contain a revision.
          If this is set a document is only returned if
          it has exactly this revision.
          Also see if-match header as an alternative to this.
        explode: true
        in: query
        name: rev
        required: false
        schema:
          type: string
        style: form
      - description: |
          If the "If-Match" header is given, then it must contain exactly one Etag. The document is returned,
          if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative
          you can supply the Etag in an query parameter *rev*.
        explode: false
        in: header
        name: if-match
        required: false
        schema:
          type: string
        style: simple
      - description: |
          If the "If-None-Match" header is given, then it must contain exactly one Etag. The document is returned,
          only if it has a different revision as the given Etag. Otherwise a HTTP 304 is returned.
        explode: false
        in: header
        name: if-none-match
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Returned if the vertex could be found.
        "304":
          description: |
            Returned if the if-none-match header is given and the
            currently stored vertex still has this revision value.
            So there was no update between the last time the vertex
            was fetched by the caller.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to update vertices in the graph  you at least need to have the following privileges
        "404":
          description: |
            Returned in the following cases
            * No graph with this name could be found.
            * This collection is not part of the graph.
            * The vertex does not exist.
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection___vertex__delete_412_response'
          description: |
            Returned if if-match header is given, but the stored documents revision is different.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    patch:
      description: |
        Updates the data of the specific vertex in the collection.
      operationId: _apiGharialGraphVertexCollectionVertexPATCH
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the vertex collection the vertex belongs to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The *_key* attribute of the vertex.
        explode: false
        in: path
        name: vertex
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if values set to null should be stored.
          By default (true) the given documents attribute(s) will be set to null.
          If this parameter is false the attribute(s) will instead be delete from the
          document.
        explode: true
        in: query
        name: keepNull
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the deleted document should
          be returned within the response object.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the new document should
          be returned within the response object.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If the "If-Match" header is given, then it must contain exactly one Etag. The document is updated,
          if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative
          you can supply the Etag in an attribute rev in the URL.
        explode: false
        in: header
        name: if-match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial__graph__vertex__collection___vertex__delete_request'
      responses:
        "200":
          description: |
            Returned if the vertex could be updated, and waitForSync is true.
        "202":
          description: |
            Returned if the request was successful, and waitForSync is false.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to update vertices in the graph  you at least need to have the following privileges
        "404":
          description: |
            Returned in the following cases
            * No graph with this name could be found.
            * This collection is not part of the graph.
            * The vertex to update does not exist.
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection___vertex__delete_412_response_1'
          description: |
            Returned if if-match header is given, but the stored documents revision is different.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    put:
      description: |
        Replaces the data of a vertex in the collection.
      operationId: _apiGharialGraphVertexCollectionVertexPUT
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the vertex collection the vertex belongs to.
        explode: false
        in: path
        name: collection
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The *_key* attribute of the vertex.
        explode: false
        in: path
        name: vertex
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if values set to null should be stored. By default the key is not removed from the document.
        explode: true
        in: query
        name: keepNull
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the deleted document should
          be returned within the response object.
        explode: true
        in: query
        name: returnOld
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Define if a presentation of the new document should
          be returned within the response object.
        explode: true
        in: query
        name: returnNew
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          If the "If-Match" header is given, then it must contain exactly one Etag. The document is updated,
          if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative
          you can supply the Etag in an attribute rev in the URL.
        explode: false
        in: header
        name: if-match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial__graph__vertex__collection__delete_request'
      responses:
        "200":
          description: |
            Returned if the vertex could be replaced, and waitForSync is true.
        "202":
          description: |
            Returned if the vertex could be replaced, and waitForSync is false.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to replace vertices in the graph  you at least need to have the following privileges
        "404":
          description: |
            Returned in the following cases
            * No graph with this name could be found.
            * This collection is not part of the graph.
            * The vertex to replace does not exist.
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection___vertex__delete_412_response_1'
          description: |
            Returned if if-match header is given, but the stored documents revision is different.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
  /_api/gharial:
    get:
      description: |
        Lists all graphs stored in this database.
      operationId: _apiGharialGET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial_get_200_response'
          description: |
            Is returned if the module is available and the graphs could be listed.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    post:
      description: |
        The creation of a graph requires the name of the graph and a
        definition of its edges.
      operationId: _apiGharialPOST
      parameters:
      - description: |
          define if the request should wait until everything is synced to disc.
          Will change the success response code.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial_get_request'
      responses:
        "201":
          description: |
            Is returned if the graph could be created and waitForSync is enabled
            for the `_graphs` collection, or given in the request.
            The response body contains the graph configuration that has been stored.
        "202":
          description: |
            Is returned if the graph could be created and waitForSync is disabled
            for the `_graphs` collection and not given in the request.
            The response body contains the graph configuration that has been stored.
        "400":
          description: |
            Returned if the request is in a wrong format.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to create a graph you at least need to have the following privileges
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection__delete_404_response_1'
          description: |
            Returned if there is a conflict storing the graph. This can occur
            either if a graph with this name is already stored, or if there is one
            edge definition with a the same edge collection but a different signature
            used in any other graph.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
  /_api/gharial/{graph}:
    delete:
      description: |
        Drops an existing graph object by name.
        Optionally all collections not used by other graphs
        can be dropped as well.
      operationId: _apiGharialGraphDELETE
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Drop collections of this graph as well.  Collections will only be
          dropped if they are not used in other graphs.
        explode: true
        in: query
        name: dropCollections
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "201":
          description: |
            Is returned if the graph could be dropped and waitForSync is enabled
            for the `_graphs` collection, or given in the request.
        "202":
          description: |
            Is returned if the graph could be dropped and waitForSync is disabled
            for the `_graphs` collection and not given in the request.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to drop a graph you at least need to have the following privileges
              1. `Administrate` access on the Database.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__delete_404_response_1'
          description: |
            Returned if no graph with this name could be found.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    get:
      description: |
        Selects information for a given graph.
        Will return the edge definitions as well as the orphan collections.
        Or returns a 404 if the graph does not exist.
      operationId: _apiGharialGraphGET
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Returns the graph if it could be found.
            The result will have the following format
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__delete_404_response'
          description: |
            Returned if no graph with this name could be found.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
  /_api/gharial/{graph}/vertex:
    get:
      description: |
        Lists all vertex collections within this graph.
      operationId: _apiGharialGraphVertexGET
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Is returned if the collections could be listed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex_get_404_response'
          description: |
            Returned if no graph with this name could be found.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    post:
      description: |
        Adds a vertex collection to the set of orphan collections of the graph.
        If the collection does not exist, it will be created.
      operationId: _apiGharialGraphVertexPOST
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial__graph__vertex_get_request'
      responses:
        "201":
          description: |
            Is returned if the collection could be created and waitForSync is enabled
            for the `_graphs` collection, or given in the request.
            The response body contains the graph configuration that has been stored.
        "202":
          description: |
            Is returned if the collection could be created and waitForSync is disabled
            for the `_graphs` collection, or given in the request.
            The response body contains the graph configuration that has been stored.
        "400":
          description: |
            Returned if the request is in an invalid format.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to modify a graph you at least need to have the following privileges
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection__delete_404_response_1'
          description: |
            Returned if no graph with this name could be found.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
  /_api/gharial/{graph}/edge:
    get:
      description: |
        Lists all edge collections within this graph.
      operationId: _apiGharialGraphEdgeGET
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            Is returned if the edge definitions could be listed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex_get_404_response'
          description: |
            Returned if no graph with this name could be found.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    post:
      description: |
        Adds an additional edge definition to the graph.
        This edge definition has to contain a *collection* and an array of
        each *from* and *to* vertex collections.  An edge definition can only
        be added if this definition is either not used in any other graph, or
        it is used with exactly the same definition. It is not possible to
        store a definition "e" from "v1" to "v2" in the one graph, and "e"
        from "v2" to "v1" in the other graph.
        Additionally, collection creation options can be set.
      operationId: _apiGharialGraphEdgePOST
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial__graph__edge_get_request'
      responses:
        "201":
          description: |
            Returned if the definition could be added successfully and
            waitForSync is enabled for the `_graphs` collection.
            The response body contains the graph configuration that has been stored.
        "202":
          description: |
            Returned if the definition could be added successfully and
            waitForSync is disabled for the `_graphs` collection.
            The response body contains the graph configuration that has been stored.
        "400":
          description: |
            Returned if the definition could not be added.
            This could be because it is ill-formed, or
            if the definition is used in an other graph with a different signature.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to modify a graph you at least need to have the following privileges
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection__delete_404_response_1'
          description: |
            Returned if no graph with this name could be found.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
  /_api/gharial/{graph}/edge/{definition}#definition:
    delete:
      description: |
        Remove one edge definition from the graph.  This will only remove the
        edge collection, the vertex collections remain untouched and can still
        be used in your queries.
      operationId: _apiGharialGraphEdgeDefinitiondefinitionDELETE
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the edge collection used in the definition.
        explode: false
        in: path
        name: definition
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Drop the collection as well.
          Collection will only be dropped if it is not used in other graphs.
        explode: true
        in: query
        name: dropCollections
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "201":
          description: |
            Returned if the edge definition could be removed from the graph
            and waitForSync is true.
        "202":
          description: |
            Returned if the edge definition could be removed from the graph and
            waitForSync is false.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to drop a vertex you at least need to have the following privileges
              1. `Administrate` access on the Database.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection__delete_404_response_1'
          description: |
            Returned if no graph with this name could be found,
            or if no edge definition with this name is found in the graph.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
    put:
      description: |
        Change one specific edge definition.
        This will modify all occurrences of this definition in all graphs known to your database.
      operationId: _apiGharialGraphEdgeDefinitiondefinitionPUT
      parameters:
      - description: |
          The name of the graph.
        explode: false
        in: path
        name: graph
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The name of the edge collection used in the definition.
        explode: false
        in: path
        name: definition
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Define if the request should wait until synced to disk.
        explode: true
        in: query
        name: waitForSync
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Drop the collection as well.
          Collection will only be dropped if it is not used in other graphs.
        explode: true
        in: query
        name: dropCollections
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_gharial__graph__edge__definition__definition_delete_request'
      responses:
        "201":
          description: |
            Returned if the request was successful and waitForSync is true.
        "202":
          description: |
            Returned if the request was successful but waitForSync is false.
        "400":
          description: |
            Returned if the new edge definition is ill-formed and cannot be used.
        "403":
          description: |
            Returned if your user has insufficient rights.
            In order to drop a vertex you at least need to have the following privileges
              1. `Administrate` access on the Database.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_gharial__graph__vertex__collection__delete_404_response_1'
          description: |
            Returned if no graph with this name could be found, or if no edge definition
            with this name is found in the graph.
      tags:
      - Graph
      x-eov-operation-handler: controllers/GraphController
  /_api/cursor:
    post:
      description: |
        The query details include the query string plus optional query options and
        bind parameters. These values need to be passed in a JSON representation in
        the body of the POST request.
      operationId: _apiCursorPOST
      parameters:
      - description: |
          Set this header to `true` to allow the Coordinator to ask any shard replica for
          the data, not only the shard leader. This may result in "dirty reads".
          The header is ignored if this operation is part of a Stream Transaction
          (`x-arango-trx-id` header). The header set when creating the transaction decides
          about dirty reads for the entire transaction, not the individual read operations.
        explode: false
        in: header
        name: x-arango-allow-dirty-read
        required: false
        schema:
          type: boolean
        style: simple
      - description: |
          To make this operation a part of a Stream Transaction, set this header to the
          transaction ID returned by the `POST /_api/transaction/begin` call.
        explode: false
        in: header
        name: x-arango-trx-id
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_cursor_post_request'
      responses:
        "201":
          description: |
            is returned if the result set can be created by the server.
        "400":
          description: |
            is returned if the JSON representation is malformed or the query specification is
            missing from the request.
        "404":
          description: |
            The server will respond with *HTTP 404* in case a non-existing collection is
            accessed in the query.
        "405":
          description: |
            The server will respond with *HTTP 405* if an unsupported HTTP method is used.
        "410":
          description: "\nThe server will respond with *HTTP 410* if a server which\
            \ processes the query\nor is the leader for a shard which is used in the\
            \ query stops responding, but \nthe connection has not been closed.\n"
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__api_cursor_post_503_response'
          description: "\nThe server will respond with *HTTP 503* if a server which\
            \ processes the query\nor is the leader for a shard which is used in the\
            \ query is down, either for \ngoing through a restart, a failure or connectivity\
            \ issues.\n"
      tags:
      - Cursors
      x-eov-operation-handler: controllers/CursorsController
  /_api/cursor/{cursor-identifier}:
    delete:
      description: |
        Deletes the cursor and frees the resources associated with it.
        The cursor will automatically be destroyed on the server when the client has
        retrieved all documents from it. The client can also explicitly destroy the
        cursor at any earlier time using an HTTP DELETE request. The cursor id must
        be included as part of the URL.
        Note: the server will also destroy abandoned cursors automatically after a
        certain server-controlled timeout to avoid resource leakage.
      operationId: _apiCursorCursorIdentifierDELETE
      parameters:
      - description: |
          The id of the cursor
        explode: false
        in: path
        name: cursor-identifier
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: |
            is returned if the server is aware of the cursor.
        "404":
          description: |
            is returned if the server is not aware of the cursor. It is also
            returned if a cursor is used after it has been destroyed.
      tags:
      - Cursors
      x-eov-operation-handler: controllers/CursorsController
    post:
      description: |
        If the cursor is still alive, returns an object with the following
        attributes:
        - *id*: a *cursor-identifier*
        - *result*: a list of documents for the current batch
        - *hasMore*: *false* if this was the last batch
        - *count*: if present the total number of elements
        - *code*: an HTTP status code
        - *error*: a boolean flag to indicate whether an error occurred
        - *errorNum*: a server error number (if *error* is *true*)
        - *errorMessage*: a descriptive error message (if *error* is *true*)
        - *extra*: an object with additional information about the query result, with
          the nested objects *stats* and *warnings*. Only delivered as part of the last
          batch in case of a cursor with the *stream* option enabled.
        Note that even if *hasMore* returns *true*, the next call might
        still return no documents. If, however, *hasMore* is *false*, then
        the cursor is exhausted.  Once the *hasMore* attribute has a value of
        *false*, the client can stop.
      operationId: _apiCursorCursorIdentifierPOST
      parameters:
      - description: |
          The name of the cursor
        explode: false
        in: path
        name: cursor-identifier
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            The server will respond with *HTTP 200* in case of success.
        "400":
          description: |
            If the cursor identifier is omitted, the server will respond with *HTTP 404*.
        "404":
          description: |
            If no cursor with the specified identifier can be found, the server will respond
            with *HTTP 404*.
        "410":
          description: "\nThe server will respond with *HTTP 410* if a server which\
            \ processes the query\nor is the leader for a shard which is used in the\
            \ query stops responding, but \nthe connection has not been closed.\n"
        "503":
          description: "\nThe server will respond with *HTTP 503* if a server which\
            \ processes the query\nor is the leader for a shard which is used in the\
            \ query is down, either for \ngoing through a restart, a failure or connectivity\
            \ issues.\n"
      tags:
      - Cursors
      x-eov-operation-handler: controllers/CursorsController
    put:
      description: |
        If the cursor is still alive, returns an object with the following
        attributes:
        - *id*: a *cursor-identifier*
        - *result*: a list of documents for the current batch
        - *hasMore*: *false* if this was the last batch
        - *count*: if present the total number of elements
        - *code*: an HTTP status code
        - *error*: a boolean flag to indicate whether an error occurred
        - *errorNum*: a server error number (if *error* is *true*)
        - *errorMessage*: a descriptive error message (if *error* is *true*)
        - *extra*: an object with additional information about the query result, with
          the nested objects *stats* and *warnings*. Only delivered as part of the last
          batch in case of a cursor with the *stream* option enabled.
        Note that even if *hasMore* returns *true*, the next call might
        still return no documents. If, however, *hasMore* is *false*, then
        the cursor is exhausted.  Once the *hasMore* attribute has a value of
        *false*, the client can stop.
      operationId: _apiCursorCursorIdentifierPUT
      parameters:
      - description: |
          The name of the cursor
        explode: false
        in: path
        name: cursor-identifier
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            The server will respond with *HTTP 200* in case of success.
        "400":
          description: |
            If the cursor identifier is omitted, the server will respond with *HTTP 404*.
        "404":
          description: |
            If no cursor with the specified identifier can be found, the server will respond
            with *HTTP 404*.
        "410":
          description: "\nThe server will respond with *HTTP 410* if a server which\
            \ processes the query\nor is the leader for a shard which is used in the\
            \ query stops responding, but \nthe connection has not been closed.\n"
        "503":
          description: "\nThe server will respond with *HTTP 503* if a server which\
            \ processes the query\nor is the leader for a shard which is used in the\
            \ query is down, either for \ngoing through a restart, a failure or connectivity\
            \ issues.\n"
      tags:
      - Cursors
      x-eov-operation-handler: controllers/CursorsController
  /_admin/cluster/maintenance:
    put:
      description: "\nThis API allows to temporarily enable the supervision maintenance\
        \ mode. Please be aware that no\nautomatic failovers of any kind will take\
        \ place while the maintenance mode is enabled.\nThe cluster supervision reactivates\
        \ itself automatically at some point after disabling it.\n\nTo enable the\
        \ maintenance mode the request body must contain the string `\"on\"`\n(Please\
        \ note it _must_ be lowercase as well as include the quotes). This will enable\
        \ the\nmaintenance mode for 60 minutes, i.e. the supervision maintenance will\
        \ reactivate itself\nafter 60 minutes.\n\nSince ArangoDB 3.8.3 it is possible\
        \ to enable the maintenance mode for a different \nduration than 60 minutes,\
        \ it is possible to send the desired duration value (in seconds) \nas a string\
        \ in the request body. For example, sending `\"7200\"`\n(including the quotes)\
        \ will enable the maintenance mode for 7200 seconds, i.e. 2 hours.\n\nTo disable\
        \ the maintenance mode the request body must contain the string `\"off\"`\
        \ \n(Please note it _must_ be lowercase as well as include the quotes).\n\n"
      operationId: _adminClusterMaintenancePUT
      responses:
        "200":
          description: |
            is returned when everything went well.
        "400":
          description: |
            if the request contained an invalid body
        "501":
          description: |
            if the request was sent to a node other than a Coordinator or single-server
        "504":
          description: |
            if the request timed out while enabling the maintenance mode
      tags:
      - Cluster
      x-eov-operation-handler: controllers/ClusterController
  /_admin/cluster/maintenance/{DB-Server-ID}:
    get:
      description: |
        Check whether the specified DB-Server is in maintenance mode and until when.
      operationId: _adminClusterMaintenanceDBServerIDGET
      parameters:
      - description: |
          The ID of a DB-Server.
        explode: false
        in: path
        name: DB-Server-ID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            The request was successful.
        "400":
          description: |
            if the request contained an invalid body
        "412":
          description: |
            if the request was sent to an Agent node
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_cluster_maintenance__DB_Server_ID__get_504_response'
          description: |
            if the request timed out while enabling the maintenance mode
      tags:
      - Cluster
      x-eov-operation-handler: controllers/ClusterController
    put:
      description: |
        For rolling upgrades or rolling restarts, DB-Servers can be put into
        maintenance mode, so that no attempts are made to re-distribute the data in a
        cluster for such planned events. DB-Servers in maintenance mode are not
        considered viable failover targets because they are likely restarted soon.
      operationId: _adminClusterMaintenanceDBServerIDPUT
      parameters:
      - description: |
          The ID of a DB-Server.
        explode: false
        in: path
        name: DB-Server-ID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__admin_cluster_maintenance__DB_Server_ID__get_request'
      responses:
        "200":
          description: |
            The request was successful.
        "400":
          description: |
            if the request contained an invalid body
        "412":
          description: |
            if the request was sent to an Agency node
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/__admin_cluster_maintenance__DB_Server_ID__get_504_response_1'
          description: |
            if the request timed out while enabling the maintenance mode
      tags:
      - Cluster
      x-eov-operation-handler: controllers/ClusterController
  /_api/transaction:
    get:
      description: |
        The result is an object with the attribute *transactions*, which contains
        an array of transactions.
        In a cluster the array will contain the transactions from all Coordinators.
        Each array entry contains an object with the following attributes:
        - *id*: the transaction's id
        - *state*: the transaction's status
      operationId: _apiTransactionGET
      responses:
        "200":
          description: |
            If the list of transactions can be retrieved successfully, *HTTP 200* will be returned.
      tags:
      - Transactions
      x-eov-operation-handler: controllers/TransactionsController
    post:
      description: |
        The transaction description must be passed in the body of the POST request.
        If the transaction is fully executed and committed on the server,
        *HTTP 200* will be returned. Additionally, the return value of the
        code defined in *action* will be returned in the *result* attribute.
        For successfully committed transactions, the returned JSON object has the
        following properties:
        - *error*: boolean flag to indicate if an error occurred (*false*
          in this case)
        - *code*: the HTTP status code
        - *result*: the return value of the transaction
        If the transaction specification is either missing or malformed, the server
        will respond with *HTTP 400*.
        The body of the response will then contain a JSON object with additional error
        details. The object has the following attributes:
        - *error*: boolean flag to indicate that an error occurred (*true* in this case)
        - *code*: the HTTP status code
        - *errorNum*: the server error number
        - *errorMessage*: a descriptive error message
        If a transaction fails to commit, either by an exception thrown in the
        *action* code, or by an internal error, the server will respond with
        an error.
        Any other errors will be returned with any of the return codes
        *HTTP 400*, *HTTP 409*, or *HTTP 500*.
      operationId: _apiTransactionPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_transaction_get_request'
      responses:
        "200":
          description: |
            If the transaction is fully executed and committed on the server,
            *HTTP 200* will be returned.
        "400":
          description: |
            If the transaction specification is either missing or malformed, the server
            will respond with *HTTP 400*.
        "404":
          description: |
            If the transaction specification contains an unknown collection, the server
            will respond with *HTTP 404*.
        "500":
          description: |
            Exceptions thrown by users will make the server respond with a return code of
            *HTTP 500*
      tags:
      - Transactions
      x-eov-operation-handler: controllers/TransactionsController
  /_api/transaction/begin:
    post:
      description: |
        The transaction description must be passed in the body of the POST request.
        If the transaction can be started on the server, *HTTP 201* will be returned.
        For successfully started transactions, the returned JSON object has the
        following properties:
        - *error*: boolean flag to indicate if an error occurred (*false*
          in this case)
        - *code*: the HTTP status code
        - *result*: result containing
            - *id*: the identifier of the transaction
            - *status*: containing the string 'running'
        If the transaction specification is either missing or malformed, the server
        will respond with *HTTP 400* or *HTTP 404*.
        The body of the response will then contain a JSON object with additional error
        details. The object has the following attributes:
        - *error*: boolean flag to indicate that an error occurred (*true* in this case)
        - *code*: the HTTP status code
        - *errorNum*: the server error number
        - *errorMessage*: a descriptive error message
      operationId: _apiTransactionBeginPOST
      parameters:
      - description: |
          Set this header to `true` to allow the Coordinator to ask any shard replica for
          the data, not only the shard leader. This may result in "dirty reads".
          This header decides about dirty reads for the entire transaction. Individual
          read operations, that are performed as part of the transaction, cannot override it.
        explode: false
        in: header
        name: x-arango-allow-dirty-read
        required: false
        schema:
          type: boolean
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/__api_transaction_begin_post_request'
      responses:
        "201":
          description: |
            If the transaction is running on the server,
            *HTTP 201* will be returned.
        "400":
          description: |
            If the transaction specification is either missing or malformed, the server
            will respond with *HTTP 400*.
        "404":
          description: |
            If the transaction specification contains an unknown collection, the server
            will respond with *HTTP 404*.
      tags:
      - Transactions
      x-eov-operation-handler: controllers/TransactionsController
  /_api/transaction/{transaction-id}:
    delete:
      description: |
        Abort a running server-side transaction. Aborting is an idempotent operation.
        It is not an error to abort a transaction more than once.
        If the transaction can be aborted, *HTTP 200* will be returned.
        The returned JSON object has the following properties:
        - *error*: boolean flag to indicate if an error occurred (*false*
          in this case)
        - *code*: the HTTP status code
        - *result*: result containing
            - *id*: the identifier of the transaction
            - *status*: containing the string 'aborted'
        If the transaction cannot be found, aborting is not allowed or the
        transaction was already committed, the server
        will respond with *HTTP 400*, *HTTP 404* or *HTTP 409*.
        The body of the response will then contain a JSON object with additional error
        details. The object has the following attributes:
        - *error*: boolean flag to indicate that an error occurred (*true* in this case)
        - *code*: the HTTP status code
        - *errorNum*: the server error number
        - *errorMessage*: a descriptive error message
      operationId: _apiTransactionTransactionIdDELETE
      parameters:
      - description: |
          The transaction identifier,
        explode: false
        in: path
        name: transaction-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            If the transaction was aborted,
            *HTTP 200* will be returned.
        "400":
          description: |
            If the transaction cannot be aborted, the server
            will respond with *HTTP 400*.
        "404":
          description: |
            If the transaction was not found, the server
            will respond with *HTTP 404*.
        "409":
          description: |
            If the transaction was already committed, the server
            will respond with *HTTP 409*.
      tags:
      - Transactions
      x-eov-operation-handler: controllers/TransactionsController
    get:
      description: |
        The result is an object describing the status of the transaction.
        It has at least the following attributes:
        - *id*: the identifier of the transaction
        - *status*: the status of the transaction. One of "running", "committed" or "aborted".
      operationId: _apiTransactionTransactionIdGET
      parameters:
      - description: |
          The transaction identifier.
        explode: false
        in: path
        name: transaction-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            If the transaction is fully executed and committed on the server,
            *HTTP 200* will be returned.
        "400":
          description: |
            If the transaction identifier specified is either missing or malformed, the server
            will respond with *HTTP 400*.
        "404":
          description: |
            If the transaction was not found with the specified identifier, the server
            will respond with *HTTP 404*.
      tags:
      - Transactions
      x-eov-operation-handler: controllers/TransactionsController
    put:
      description: |
        Commit a running server-side transaction. Committing is an idempotent operation.
        It is not an error to commit a transaction more than once.
        If the transaction can be committed, *HTTP 200* will be returned.
        The returned JSON object has the following properties:
        - *error*: boolean flag to indicate if an error occurred (*false*
          in this case)
        - *code*: the HTTP status code
        - *result*: result containing
            - *id*: the identifier of the transaction
            - *status*: containing the string 'committed'
        If the transaction cannot be found, committing is not allowed or the
        transaction was aborted, the server
        will respond with *HTTP 400*, *HTTP 404* or *HTTP 409*.
        The body of the response will then contain a JSON object with additional error
        details. The object has the following attributes:
        - *error*: boolean flag to indicate that an error occurred (*true* in this case)
        - *code*: the HTTP status code
        - *errorNum*: the server error number
        - *errorMessage*: a descriptive error message
      operationId: _apiTransactionTransactionIdPUT
      parameters:
      - description: |
          The transaction identifier,
        explode: false
        in: path
        name: transaction-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: |
            If the transaction was committed,
            *HTTP 200* will be returned.
        "400":
          description: |
            If the transaction cannot be committed, the server
            will respond with *HTTP 400*.
        "404":
          description: |
            If the transaction was not found, the server
            will respond with *HTTP 404*.
        "409":
          description: |
            If the transaction was already aborted, the server
            will respond with *HTTP 409*.
      tags:
      - Transactions
      x-eov-operation-handler: controllers/TransactionsController
components:
  schemas:
    ARANGO_ERROR:
      description: An ArangoDB Error code
      type: integer
    ArangoError:
      description: the arangodb error type
      properties:
        code:
          description: the HTTP Status code
          type: integer
        error:
          description: boolean flag to indicate whether an error occurred (*true*
            in this case)
          type: boolean
        errorMessage:
          description: "a descriptive error message describing what happened, may\
            \ contain additional information"
          type: string
        errorNum:
          description: the ARANGO_ERROR code
          type: integer
    computed_field:
      description: ""
      example:
        computeOn:
        - computeOn
        - computeOn
        keepNull: true
        expression: expression
        failOnWarning: true
        name: name
        overwrite: true
      properties:
        computeOn:
          description: |+
            An array of strings that defines on which write operations the value is
            computed. The possible values are `"insert"`, `"update"`, and `"replace"`.

          format: string
          items:
            type: string
          type: array
        expression:
          description: |+
            An AQL `RETURN` operation with an expression that computes the desired value.

          type: string
        failOnWarning:
          description: |+
            Whether the write operation fails if the expression produces a warning.

          type: boolean
        keepNull:
          description: |+
            Whether the target attribute is set if the expression evaluates to `null`.

          type: boolean
        name:
          description: |+
            The name of the target attribute.

          type: string
        overwrite:
          description: |+
            Whether the computed value takes precedence over a user-provided or
            existing attribute.

          type: boolean
      type: object
    edge_representation:
      description: |+
        The complete deleted edge document.
        Includes all attributes stored before this operation.
        Will only be present if returnOld is true.

      properties:
        _from:
          description: |+
            The _from value of the stored data.

          type: string
        _id:
          description: |+
            The _id value of the stored data.

          type: string
        _key:
          description: |+
            The _key value of the stored data.

          type: string
        _rev:
          description: |+
            The _rev value of the stored data.

          type: string
        _to:
          description: |+
            The _to value of the stored data.

          type: string
      type: object
    vertex_representation:
      description: |+
        The internal attributes for the vertex.

      properties:
        _id:
          description: |+
            The _id value of the stored data.

          type: string
        _key:
          description: |+
            The _key value of the stored data.

          type: string
        _rev:
          description: |+
            The _rev value of the stored data.

          type: string
      required:
      - vertex
      type: object
    move_shard_operation:
      description: ""
      properties:
        collection:
          description: |+
            Collection ID of the collection the shard belongs to.

          format: ""
          type: number
        from:
          description: |+
            The server name from which to move.

          type: string
        isLeader:
          description: |+
            True if this is a leader move shard operation.

          type: boolean
        shard:
          description: |+
            Shard ID of the shard to be moved.

          type: string
        to:
          description: |+
            The ID of the destination server.

          type: string
      type: object
    get_api_control_pregel:
      description: |2+

      properties:
        algorithm:
          description: |+
            The algorithm used by the job.

          type: string
        computationTime:
          description: "The algorithm execution time. Is shown when the computation\
            \ started. \n\n"
          format: float
          type: number
        created:
          description: |+
            The date and time when the job was created.

          type: string
        detail:
          $ref: '#/components/schemas/get_api_control_pregel_detail'
        edgeCount:
          description: |+
            The total number of edges processed.

          format: int64
          type: integer
        expires:
          description: |+
            The date and time when the job results expire. The expiration date is only
            meaningful for jobs that were completed, canceled or resulted in an error. Such jobs
            are cleaned up by the garbage collection when they reach their expiration date/time.

          type: string
        gss:
          description: |+
            The number of global supersteps executed.

          format: int64
          type: integer
        gssTimes:
          description: |+
            Computation time of each global super step. Is shown when the computation started.

          format: number
          items:
            type: number
          type: array
        id:
          description: |+
            The ID of the Pregel job, as a string.

          type: string
        reports:
          description: |+
            This attribute is used by Programmable Pregel Algorithms (`air`, experimental).
            The value is only populated once the algorithm has finished.

          format: object
          items:
            type: object
          type: array
        startupTime:
          description: |+
            The startup runtime of the execution.
            The startup time includes the data loading time and can be substantial.

          format: float
          type: number
        state:
          description: "The state of the execution. The following values can be returned:\n\
            - `\"none\"`: The Pregel run did not yet start.\n- `\"loading\"`: The\
            \ graph is loaded from the database into memory before the execution of\
            \ the algorithm.\n- `\"running\"`: The algorithm is executing normally.\n\
            - `\"storing\"`: The algorithm finished, but the results are still being\
            \ written\n  back into the collections. Occurs only if the store parameter\
            \ is set to true.\n- `\"done\"`: The execution is done. In version 3.7.1\
            \ and later, this means that\n  storing is also done. In earlier versions,\
            \ the results may not be written back\n  into the collections yet. This\
            \ event is announced in the server log (requires\n  at least info log\
            \ level for the `pregel` log topic).\n- `\"canceled\"`: The execution\
            \ was permanently canceled, either by the user or by\n  an error.\n- `\"\
            fatal error\"`: The execution has failed and cannot recover.\n- `\"in\
            \ error\"`: The execution is in an error state. This can be\n  caused\
            \ by DB-Servers being not reachable or being non responsive. The execution\n\
            \  might recover later, or switch to `\"canceled\"` if it was not able\
            \ to recover\n  successfully. \n- `\"recovering\"` (currently unused):\
            \ The execution is actively recovering and\n  switches back to `running`\
            \ if the recovery is successful.\n\n"
          type: string
        storageTime:
          description: |+
            The time for storing the results if the job includes results storage.
            Is shown when the storing started.

          format: float
          type: number
        totalRuntime:
          description: |+
            The total runtime of the execution up to now (if the execution is still ongoing).

          format: float
          type: number
        ttl:
          description: |+
            The TTL (time to live) value for the job results, specified in seconds.
            The TTL is used to calculate the expiration date for the job's results.

          format: float
          type: number
        vertexCount:
          description: |+
            The total number of vertices processed.

          format: int64
          type: integer
      required:
      - detail
      type: object
    get_api_control_pregel_detail:
      description: |+
        The Pregel run details.

      properties:
        aggregatedStatus:
          $ref: '#/components/schemas/get_api_control_pregel_detail_aggregated'
        workerStatus:
          description: |
            The details of the Pregel for every DB-Server. Each object key is a DB-Server ID,
            and each value is a nested object similar to the `aggregatedStatus` attribute.
            In a single server deployment, there is only a single entry with an empty string as key.
          format: ""
          type: object
      required:
      - aggregatedStatus
      type: object
    get_api_control_pregel_detail_aggregated:
      description: |+
        The aggregated details of the full Pregel run. The values are totals of all the
        DB-Server.

      properties:
        allGssStatus:
          $ref: '#/components/schemas/get_api_control_pregel_detail_aggregated_gss'
        graphStoreStatus:
          $ref: '#/components/schemas/get_api_control_pregel_detail_aggregated_store'
        timeStamp:
          description: |+
            The time at which the status was measured.

          type: string
      type: object
    get_api_control_pregel_detail_aggregated_gss:
      description: |+
        Information about the global supersteps.

      properties:
        items:
          description: |+
            A list of objects with details for each global superstep.

          format: get_api_control_pregel_detail_aggregated_gss_items
          items:
            $ref: '#/components/schemas/get_api_control_pregel_detail_aggregated_gss_items'
          type: array
      type: object
    get_api_control_pregel_detail_aggregated_gss_items:
      description: ""
      properties:
        memoryBytesUsedForMessages:
          description: |+
            The number of bytes used in memory for the messages in this step.

          format: int64
          type: integer
        messagesReceived:
          description: |+
            The number of messages received in this step.

          format: int64
          type: integer
        messagesSent:
          description: |+
            The number of messages sent in this step.

          format: int64
          type: integer
        verticesProcessed:
          description: |+
            The number of vertices that have been processed in this step.

          format: int64
          type: integer
      type: object
    get_api_control_pregel_detail_aggregated_store:
      description: |+
        The status of the in memory graph.

      properties:
        edgesLoaded:
          description: |+
            The number of edges that are loaded from the database into memory.

          format: int64
          type: integer
        memoryBytesUsed:
          description: |+
            The number of bytes used in-memory for the loaded graph.

          format: int64
          type: integer
        verticesLoaded:
          description: |+
            The number of vertices that are loaded from the database into memory.

          format: int64
          type: integer
        verticesStored:
          description: |+
            The number of vertices that are written back to the database after the Pregel
            computation finished. It is only set if the `store` parameter is set to `true`.

          format: int64
          type: integer
      type: object
    graph_edge_definition:
      description: ""
      properties:
        collection:
          description: |+
            Name of the edge collection, where the edge are stored in.

          type: string
        from:
          description: |+
            List of vertex collection names.
            Edges in collection can only be inserted if their _from is in any of the collections here.

          format: string
          items:
            type: string
          type: array
        to:
          description: |
            List of vertex collection names.
            Edges in collection can only be inserted if their _to is in any of the collections here.
          format: string
          items:
            type: string
          type: array
      type: object
    key_generator_type:
      description: |+
        A object which contains key generation options

      example:
        lastValue: 0
        allowUserKeys: true
        type: type
      properties:
        allowUserKeys:
          description: |+
            if set to `true`, then it is allowed to supply
            own key values in the `_key` attribute of a document. If set to
            `false`, then the key generator is solely responsible for
            generating keys and supplying own key values in the `_key` attribute
            of documents is considered an error.

          type: boolean
        lastValue:
          description: |2+

          format: ""
          type: integer
        type:
          description: |+
            specifies the type of the key generator. The currently
            available generators are `traditional`, `autoincrement`, `uuid`
            and `padded`.

          type: string
      type: object
    get_api_query_rules:
      description: ""
      properties:
        flags:
          description: |+
            An object with the properties of the rule.

          format: get_api_query_rules_flags
          type: object
        name:
          description: |+
            The name of the optimizer rule as seen in query explain outputs.

          format: ""
          type: string
      required:
      - flags
      type: object
    get_api_query_rules_flags:
      description: |+
        An object with the properties of the rule.

      properties:
        canBeDisabled:
          description: |+
            Whether users are allowed to disable this rule. A few rules are mandatory.

          format: ""
          type: boolean
        canCreateAdditionalPlans:
          description: |+
            Whether this rule may create additional query execution plans.

          format: ""
          type: boolean
        clusterOnly:
          description: |+
            Whether the rule is applicable in the cluster deployment mode only.

          format: ""
          type: boolean
        disabledByDefault:
          description: |+
            Whether the optimizer considers this rule by default.

          format: ""
          type: boolean
        enterpriseOnly:
          description: |+
            Whether the rule is available in the Enterprise Edition only.

          type: boolean
        hidden:
          description: |+
            Whether the rule is displayed to users. Internal rules are hidden.

          format: ""
          type: boolean
      type: object
    api_task_struct:
      description: |+
        The function in question

      properties:
        command:
          description: |+
            the javascript function for this task

          type: string
        created:
          description: |+
            The timestamp when this task was created

          format: float
          type: number
        database:
          description: |
            the database this task belongs to
          type: string
        id:
          description: |+
            A string identifying the task

          type: string
        name:
          description: |+
            The fully qualified name of the user function

          type: string
        offset:
          description: |+
            time offset in seconds from the created timestamp

          format: float
          type: number
        period:
          description: |+
            this task should run each `period` seconds

          format: ""
          type: number
        type:
          description: |+
            What type of task is this [ `periodic`, `timed`]
              - periodic are tasks that repeat periodically
              - timed are tasks that execute once at a specific time

          type: string
      type: object
    collection_info:
      description: |2+

      example:
        keyOptions:
          lastValue: 0
          allowUserKeys: true
          type: type
        schema: "{}"
        replicationFactor: 1
        computedValues:
        - computeOn:
          - computeOn
          - computeOn
          keepNull: true
          expression: expression
          failOnWarning: true
          name: name
          overwrite: true
        - computeOn:
          - computeOn
          - computeOn
          keepNull: true
          expression: expression
          failOnWarning: true
          name: name
          overwrite: true
        numberOfShards: 6
        waitForSync: true
        shardingStrategy: shardingStrategy
        writeConcern: 5
        type: 5
        isSmart: true
        isSystem: true
        cacheEnabled: true
        shardKeys:
        - shardKeys
        - shardKeys
        name: name
        smartGraphAttribute: smartGraphAttribute
        id: id
        smartJoinAttribute: smartJoinAttribute
        globallyUniqueId: globallyUniqueId
      properties:
        cacheEnabled:
          description: |+
            Whether the in-memory hash cache for documents is enabled for this
            collection.

          type: boolean
        computedValues:
          description: |+
            A list of objects, each representing a computed value.

          format: computed_field
          items:
            $ref: '#/components/schemas/computed_field'
          type: array
        globallyUniqueId:
          description: |
            Unique identifier of the collection
          type: string
        id:
          description: |+
            unique identifier of the collection; *deprecated*

          type: string
        isSmart:
          description: |+
            Whether the collection is used in a SmartGraph (Enterprise Edition only).
            _(cluster only)_

          type: boolean
        isSystem:
          description: |+
            true if this is a system collection; usually `name` will start with an underscore.

          type: boolean
        keyOptions:
          $ref: '#/components/schemas/key_generator_type'
        name:
          description: |+
            literal name of this collection

          type: string
        numberOfShards:
          description: |+
            The number of shards of the collection. _(cluster only)_

          format: ""
          type: integer
        replicationFactor:
          description: |+
            contains how many copies of each shard are kept on different DB-Servers.
            It is an integer number in the range of 1-10 or the string `"satellite"`
            for a SatelliteCollection (Enterprise Edition only). _(cluster only)_

          format: ""
          type: integer
        schema:
          description: |+
            The collection level schema for documents.

          format: ""
          type: object
        shardKeys:
          description: |+
            contains the names of document attributes that are used to
            determine the target shard for documents. _(cluster only)_

          format: string
          items:
            type: string
          type: array
        shardingStrategy:
          description: |+
            the sharding strategy selected for the collection.
            One of 'hash' or 'enterprise-hash-smart-edge'. _(cluster only)_

          type: string
        smartGraphAttribute:
          description: |+
            Attribute that is used in SmartGraphs (Enterprise Edition only). _(cluster only)_

          type: string
        smartJoinAttribute:
          description: |+
            Determines an attribute of the collection that must contain the shard key value
            of the referred-to SmartJoin collection (Enterprise Edition only). _(cluster only)_

          type: string
        type:
          description: |+
            The type of the collection:
              - `0`: "unknown"
              - `2`: regular document collection
              - `3`: edge collection

          format: ""
          type: integer
        waitForSync:
          description: |+
            If `true` then creating, changing or removing
            documents will wait until the data has been synchronized to disk.

          type: boolean
        writeConcern:
          description: |+
            determines how many copies of each shard are required to be
            in sync on the different DB-Servers. If there are less then these many copies
            in the cluster a shard will refuse to write. Writes to shards with enough
            up-to-date copies will succeed at the same time however. The value of
            `writeConcern` cannot be larger than `replicationFactor`. _(cluster only)_

          format: ""
          type: integer
      required:
      - keyOptions
      type: object
    rebalance_compute:
      description: |2+


      properties:
        databasesExcluded:
          description: |+
            A list of database names to exclude from the analysis. (Default: `[]`)

          format: string
          items:
            type: string
          type: array
        leaderChanges:
          description: |+
            Allow leader changes without moving data. (Default: `true`)

          type: boolean
        maximumNumberOfMoves:
          description: |+
            Maximum number of moves to be computed. (Default: `1000`)

          format: ""
          type: number
        moveFollowers:
          description: |+
            Allow moving followers. (Default: `false`)

          type: boolean
        moveLeaders:
          description: |+
            Allow moving leaders. (Default: `false`)

          type: boolean
        piFactor:
          description: |+
            (Default: `256e6`)

          format: ""
          type: number
        version:
          description: |+
            Must be set to `1`.

          format: ""
          type: number
      required:
      - ""
      type: object
    explain_options:
      properties:
        allPlans:
          description: |+
            if set to *true*, all possible execution plans will be returned.
            The default is *false*, meaning only the optimal plan will be returned.

          format: ""
          type: boolean
        maxNumberOfPlans:
          description: |+
            an optional maximum number of plans that the optimizer is
            allowed to generate. Setting this attribute to a low value allows to put a
            cap on the amount of work the optimizer does.

          format: int64
          type: integer
        optimizer:
          description: |+
            Options related to the query optimizer.

          format: explain_options_optimizer
          type: object
      type: object
    explain_options_optimizer:
      properties:
        rules:
          description: |+
            A list of to-be-included or to-be-excluded optimizer rules can be put into this
            attribute, telling the optimizer to include or exclude specific rules. To disable
            a rule, prefix its name with a `-`, to enable a rule, prefix it with a `+`. There is
            also a pseudo-rule `all`, which matches all optimizer rules. `-all` disables all rules.

          items:
            type: string
          type: array
      type: object
    jwt_secret_struct:
      properties:
        active:
          description: |+
            An object with the SHA-256 hash of the active secret.

          format: ""
          type: object
        passive:
          description: |+
            An array of objects with the SHA-256 hashes of the passive secrets.
            Can be empty.

          items:
            type: object
          type: array
      type: object
    cluster_endpoints_struct:
      properties:
        endpoint:
          description: |+
            The bind of the Coordinator, like `tcp://[::1]:8530`

          format: ""
          type: string
      type: object
    version_details_struct:
      example:
        unaligned-access: unaligned-access
        build-date: build-date
        maintainer-mode: maintainer-mode
        rocksdb-version: rocksdb-version
        sizeof void*: sizeof void*
        sse42: sse42
        vpack-version: vpack-version
        boost-version: boost-version
        fd-client-event-handler: fd-client-event-handler
        platform: platform
        mode: mode
        v8-version: v8-version
        failure-tests: failure-tests
        zlib-version: zlib-version
        full-version-string: full-version-string
        server-version: server-version
        openssl-version: openssl-version
        assertions: assertions
        compiler: compiler
        cplusplus: cplusplus
        arm: arm
        architecture: architecture
        icu-version: icu-version
        debug: debug
        fd-setsize: fd-setsize
        sizeof int: sizeof int
        asm-crc32: asm-crc32
        asan: asan
        build-repository: build-repository
        reactor-type: reactor-type
        jemalloc: jemalloc
        endianness: endianness
      properties:
        architecture:
          description: |+
            The CPU architecture, i.e. *64bit*

          format: ""
          type: string
        arm:
          description: |+
            *false* - this is not running on an ARM cpu

          format: ""
          type: string
        asan:
          description: |+
            has this been compiled with the asan address sanitizer turned on? (should be false)

          format: ""
          type: string
        asm-crc32:
          description: |+
            do we have assembler implemented CRC functions?

          format: ""
          type: string
        assertions:
          description: |+
            do we have assertions compiled in (=> developer version)

          format: ""
          type: string
        boost-version:
          description: |+
            which boost version do we bind

          format: ""
          type: string
        build-date:
          description: |+
            the date when this binary was created

          format: ""
          type: string
        build-repository:
          description: |+
            reference to the git-ID this was compiled from

          format: ""
          type: string
        compiler:
          description: |+
            which compiler did we use

          format: ""
          type: string
        cplusplus:
          description: |+
            C++ standards version

          format: ""
          type: string
        debug:
          description: |+
            *false* for production binaries

          format: ""
          type: string
        endianness:
          description: |+
            currently only *little* is supported

          format: ""
          type: string
        failure-tests:
          description: |+
            *false* for production binaries (the facility to invoke fatal errors is disabled)

          format: ""
          type: string
        fd-client-event-handler:
          description: |+
            which method do we use to handle fd-sets, *poll* should be here on linux.

          format: ""
          type: string
        fd-setsize:
          description: |+
            if not *poll* the fd setsize is valid for the maximum number of filedescriptors

          format: ""
          type: string
        full-version-string:
          description: |+
            The full version string

          format: ""
          type: string
        icu-version:
          description: |+
            Which version of ICU do we bundle

          format: ""
          type: string
        jemalloc:
          description: |+
            *true* if we use jemalloc

          format: ""
          type: string
        maintainer-mode:
          description: |+
            *false* if this is a production binary

          format: ""
          type: string
        openssl-version:
          description: |+
            which openssl version do we link?

          format: ""
          type: string
        platform:
          description: |+
            the host os - *linux*, *windows* or *darwin*

          format: ""
          type: string
        reactor-type:
          description: |+
            *epoll* TODO

          format: ""
          type: string
        rocksdb-version:
          description: |+
            the rocksdb version this release bundles

          format: ""
          type: string
        server-version:
          description: |+
            the ArangoDB release version

          format: ""
          type: string
        sizeof int:
          description: |+
            number of bytes for *integers*

          format: ""
          type: string
        sizeof void*:
          description: |+
            number of bytes for *void pointers*

          format: ""
          type: string
        sse42:
          description: |+
            do we have a SSE 4.2 enabled cpu?

          format: ""
          type: string
        unaligned-access:
          description: |+
            does this system support unaligned memory access?

          format: ""
          type: string
        v8-version:
          description: |+
            the bundled V8 javascript engine version

          format: ""
          type: string
        vpack-version:
          description: |+
            the version of the used velocypack implementation

          format: ""
          type: string
        zlib-version:
          description: |+
            the version of the bundled zlib

          format: ""
          type: string
        mode:
          description: |+
            the mode we're runnig as - one of [*server*, *console*, *script*]

          format: ""
          type: string
      type: object
    admin_echo_server_struct:
      example:
        endpoint: endpoint
        address: address
        port: 0
      properties:
        address:
          description: |+
            The bind address of the endpoint this request was sent to

          format: ""
          type: string
        port:
          description: |+
            The port this request was sent to

          format: ""
          type: integer
        endpoint:
          description: |+
            The endpoint this request was sent to

          format: ""
          type: string
      type: object
    admin_echo_client_struct:
      example:
        address: 6
        port: 1
        id: id
      properties:
        address:
          description: |+
            The IP address of the client

          format: ""
          type: integer
        port:
          description: |+
            The port of the TCP connection on the client-side

          format: ""
          type: integer
        id:
          description: |+
            A server generated ID

          format: ""
          type: string
      type: object
    get_admin_status_server_info:
      example:
        role: role
        address: address
        rebootId: 6.027456183070403
        persistedId: persistedId
        progress: "{}"
        readOnly: true
        state: state
        writeOpsEnabled: true
        maintenance: true
        serverId: serverId
      properties:
        progress:
          description: |+
            Startup and recovery information.

            You can check for changes to determine whether progress was made between two
            calls, but you should not rely on specific values as they may change between
            ArangoDB versions. The values are only expected to change during the startup and
            shutdown, i.e. while `maintenance` is `true`.

            You need to start _arangod_ with the `--server.early-connections` startup option
            enabled to be able to query the endpoint during the startup process.
            If authentication is enabled, then you need to use the super-user JWT for the
            request because the user management is not available during the startup.

          format: get_admin_status_server_info_progress
          type: object
        role:
          description: |+
            Either `"SINGLE"`, `"COORDINATOR"`, `"PRIMARY"` (DB-Server), or `"AGENT"`.

          format: ""
          type: string
        writeOpsEnabled:
          description: |+
            Whether writes are enabled. **Deprecated**, use `readOnly` instead.

          format: ""
          type: boolean
        readOnly:
          description: |+
            Whether writes are disabled.

          format: ""
          type: boolean
        maintenance:
          description: |+
            Whether the maintenance mode is enabled.

          format: ""
          type: boolean
        persistedId:
          description: |+
            The persisted ID, e. g. `"CRDN-e427b441-5087-4a9a-9983-2fb1682f3e2a"`.
            *Cluster only* (Agents, Coordinators, and DB-Servers).

          format: ""
          type: string
        rebootId:
          description: |+
            The reboot ID. Changes on every restart.
            *Cluster only* (Agents, Coordinators, and DB-Servers).

          format: ""
          type: number
        state:
          description: |+
            Either `"STARTUP"`, `"SERVING"`, or `"SHUTDOWN"`.
            *Cluster only* (Coordinators and DB-Servers).

          format: ""
          type: string
        address:
          description: |+
            The address of the server, e.g. `tcp://[::1]:8530`.
            *Cluster only* (Coordinators and DB-Servers).

          format: ""
          type: string
        serverId:
          description: |+
            The server ID, e.g. `"CRDN-e427b441-5087-4a9a-9983-2fb1682f3e2a"`.
            *Cluster only* (Coordinators and DB-Servers).

          format: ""
          type: string
      type: object
    get_admin_status_server_info_progress:
      properties:
        phase:
          description: |+
            Name of the lifecycle phase the instance is currently in. Normally one of
            `"in prepare"`, `"in start"`, `"in wait"`, `"in shutdown"`, `"in stop"`,
            or `"in unprepare"`.

          format: ""
          type: string
        feature:
          description: |+
            Internal name of the feature that is currently being prepared, started,
            stopped or unprepared.

          format: ""
          type: string
        recoveryTick:
          description: |+
            Current recovery sequence number value, if the instance is currently recovering.
            If the instance is already past the recovery, this attribute will contain the
            last handled recovery sequence number.

          format: ""
          type: number
      type: object
    get_admin_status_agency:
      example:
        agencyComm: "{}"
      properties:
        agencyComm:
          description: |+
            Information about the communication with the Agency.
            *Cluster only* (Coordinators and DB-Servers).

          format: get_admin_status_agency_comm
          type: object
      type: object
    get_admin_status_agency_comm:
      properties:
        endpoints:
          description: |+
            A list of possible Agency endpoints.

          items:
            type: string
          type: array
      type: object
    get_admin_status_coordinator:
      example:
        isFoxxmaster:
        - isFoxxmaster
        - isFoxxmaster
        foxxmaster:
        - foxxmaster
        - foxxmaster
      properties:
        foxxmaster:
          description: |+
            The server ID of the Coordinator that is the Foxx master.

          items:
            type: string
          type: array
        isFoxxmaster:
          description: |+
            Whether the queried Coordinator is the Foxx master.

          items:
            type: string
          type: array
      type: object
    get_admin_status_agent:
      example:
        endpoint: endpoint
        leading: true
        id: id
        leaderId: leaderId
      properties:
        id:
          description: |+
            Server ID of the queried Agent.

          format: ""
          type: string
        leaderId:
          description: |+
            Server ID of the leading Agent.

          format: ""
          type: string
        leading:
          description: |+
            Whether the queried Agent is the leader.

          format: ""
          type: boolean
        endpoint:
          description: |+
            The endpoint of the queried Agent.

          format: ""
          type: string
      type: object
    license_features:
      example:
        expires: 0.8008281904610115
      properties:
        expires:
          description: |+
            The `expires` key lists the expiry date as Unix timestamp (seconds since
            January 1st, 1970 UTC).

          format: ""
          type: number
      type: object
    aql_userfunction_struct:
      properties:
        name:
          description: |+
            The fully qualified name of the user function

          format: ""
          type: string
        code:
          description: |+
            A string representation of the function body

          format: ""
          type: string
        isDeterministic:
          description: |+
            an optional boolean value to indicate whether the function
            results are fully deterministic (function return value solely depends on
            the input value and return value is the same for repeated calls with same
            input). The *isDeterministic* attribute is currently not used but may be
            used later for optimizations.

          format: ""
          type: boolean
      type: object
    jwt_keys_struct:
      properties:
        encryption-keys:
          description: |+
            An array of objects with the SHA-256 hashes of the key secrets.
            Can be empty.

          items:
            type: object
          type: array
      type: object
    get_admin_cluster_rebalance_result:
      example:
        leader: "{}"
        shards: "{}"
      properties:
        leader:
          description: |+
            Information about the leader imbalance.

          format: leader_imbalance_struct
          type: object
        shards:
          description: |+
            Information about the shard imbalance.

          format: shard_imbalance_struct
          type: object
      type: object
    post_api_index_inverted_fields:
      properties:
        name:
          description: |+
            An attribute path. The `.` character denotes sub-attributes.
            You can expand one array attribute with `[*]`.

          format: ""
          type: string
        analyzer:
          description: |+
            The name of an Analyzer to use for this field.

            Default: the value defined by the top-level `analyzer` option.

          format: ""
          type: string
        features:
          description: |+
            A list of Analyzer features to use for this field. You can set this option to
            overwrite what features are enabled for the `analyzer`. Possible features:
            - `"frequency"`
            - `"norm"`
            - `"position"`
            - `"offset"`

            Default: the features as defined by the Analyzer itself, or inherited from the
            top-level `features` option if the `analyzer` option adjacent to this option is
            not set.

          items:
            type: string
          type: array
        includeAllFields:
          description: |+
            This option only applies if you use the inverted index in a `search-alias` Views.

            If set to `true`, then all sub-attributes of this field are indexed, excluding
            any sub-attributes that are configured separately by other elements in the
            `fields` array (and their sub-attributes). The `analyzer` and `features`
            properties apply to the sub-attributes.

            If set to `false`, then sub-attributes are ignored.

            Default: the value defined by the top-level `includeAllFields` option.

          format: ""
          type: boolean
        searchField:
          description: |+
            This option only applies if you use the inverted index in a `search-alias` Views.

            You can set the option to `true` to get the same behavior as with `arangosearch`
            Views regarding the indexing of array values for this field. If enabled, both,
            array and primitive values (strings, numbers, etc.) are accepted. Every element
            of an array is indexed according to the `trackListPositions` option.

            If set to `false`, it depends on the attribute path. If it explicitly expands an
            array (`[*]`), then the elements are indexed separately. Otherwise, the array is
            indexed as a whole, but only `geopoint` and `aql` Analyzers accept array inputs.
            You cannot use an array expansion if `searchField` is enabled.

            Default: the value defined by the top-level `searchField` option.

          format: ""
          type: boolean
        trackListPositions:
          description: |+
            This option only applies if you use the inverted index in a `search-alias` Views.

            If set to `true`, then track the value position in arrays for array values.
            For example, when querying a document like `{ attr: [ "valueX", "valueY", "valueZ" ] }`,
            you need to specify the array element, e.g. `doc.attr[1] == "valueY"`.

            If set to `false`, all values in an array are treated as equal alternatives.
            You don't specify an array element in queries, e.g. `doc.attr == "valueY"`, and
            all elements are searched for a match.

            Default: the value defined by the top-level `trackListPositions` option.

          format: ""
          type: boolean
        nested:
          description: |+
            Index the specified sub-objects that are stored in an array. Other than with the
            `fields` property, the values get indexed in a way that lets you query for
            co-occurring values. For example, you can search the sub-objects and all the
            conditions need to be met by a single sub-object instead of across all of them.

            This property is available in the Enterprise Edition only.

          items:
            $ref: '#/components/schemas/post_api_index_inverted_nested'
          type: array
      type: object
    post_api_index_inverted_nested:
      properties:
        name:
          description: |+
            An attribute path. The `.` character denotes sub-attributes.

          format: ""
          type: string
        analyzer:
          description: |+
            The name of an Analyzer to use for this field.
            Default: the value defined by the parent field, or the top-level `analyzer` option.

          format: ""
          type: string
        features:
          description: |+
            A list of Analyzer features to use for this field. You can set this option to
            overwrite what features are enabled for the `analyzer`. Possible features:
            - `"frequency"`
            - `"norm"`
            - `"position"`
            - `"offset"`

            Default: the features as defined by the Analyzer itself, or inherited from the
            the parent field's or top-level `features` option if no `analyzer` option is set
            at a deeper level, closer to this option.

          items:
            type: string
          type: array
        searchField:
          description: |+
            This option only applies if you use the inverted index in a `search-alias` Views.

            You can set the option to `true` to get the same behavior as with `arangosearch`
            Views regarding the indexing of array values for this field. If enabled, both,
            array and primitive values (strings, numbers, etc.) are accepted. Every element
            of an array is indexed according to the `trackListPositions` option.

            If set to `false`, it depends on the attribute path. If it explicitly expands an
            array (`[*]`), then the elements are indexed separately. Otherwise, the array is
            indexed as a whole, but only `geopoint` and `aql` Analyzers accept array inputs.
            You cannot use an array expansion if `searchField` is enabled.

            Default: the value defined by the top-level `searchField` option.

          format: ""
          type: boolean
        nested:
          description: |+
            You can recursively index sub-objects. See the above description of the
            `nested` option.

          items:
            type: object
          type: array
      type: object
    post_api_index_inverted_storedvalues:
      properties:
        fields:
          description: |+
            A list of attribute paths. The `.` character denotes sub-attributes.

          items:
            type: string
          type: array
        compression:
          description: |+
            Defines how to compress the attribute values. Possible values:
            - `"lz4"` (default): use LZ4 fast compression.
            - `"none"`: disable compression to trade space for speed.

          format: ""
          type: string
      type: object
    post_api_index_inverted_primarysort:
      properties:
        fields:
          description: |+
            An array of the fields to sort the index by and the direction to sort each field in.

          items:
            $ref: '#/components/schemas/post_api_index_inverted_primarysort_fields'
          type: array
        compression:
          description: |+
            Defines how to compress the primary sort data. Possible values:
            - `"lz4"` (default): use LZ4 fast compression.
            - `"none"`: disable compression to trade space for speed.

          format: ""
          type: string
      type: object
    post_api_index_inverted_primarysort_fields:
      properties:
        field:
          description: |+
            An attribute path. The `.` character denotes sub-attributes.

          format: ""
          type: string
        direction:
          description: |+
            The sorting direction. Possible values:
            - `"asc` for ascending
            - `"desc"` for descending

          format: ""
          type: string
      type: object
    post_api_index_inverted_policy:
      properties:
        type:
          description: |+
            The segment candidates for the "consolidation" operation are selected based
            upon several possible configurable formulas as defined by their types.
            The supported types are:

            - `"tier"` (default): consolidate based on segment byte size and live
              document count as dictated by the customization attributes.

          format: ""
          type: string
        segmentsBytesFloor:
          description: |+
            Defines the value (in bytes) to treat all smaller segments as equal for
            consolidation selection. Default: `2097152`

          format: ""
          type: integer
        segmentsBytesMax:
          description: |+
            The maximum allowed size of all consolidated segments in bytes.
            Default: `5368709120`

          format: ""
          type: integer
        segmentsMax:
          description: |+
            The maximum number of segments that are evaluated as candidates for
            consolidation. Default: `10`

          format: ""
          type: integer
        segmentsMin:
          description: |+
            The minimum number of segments that are evaluated as candidates for
            consolidation. Default: `1`

          format: ""
          type: integer
        minScore:
          description: |+
            Filter out consolidation candidates with a score less than this. Default: `0`

          format: ""
          type: integer
      type: object
    put_api_collection_properties_computed_field:
      properties:
        name:
          description: |+
            The name of the target attribute. Can only be a top-level attribute, but you
            may return a nested object. Cannot be `_key`, `_id`, `_rev`, `_from`, `_to`,
            or a shard key attribute.

          format: ""
          type: string
        expression:
          description: |+
            An AQL `RETURN` operation with an expression that computes the desired value.
            See [Computed Value Expressions](https://www.arangodb.com/docs/devel/data-modeling-documents-computed-values.html#computed-value-expressions) for details.

          format: ""
          type: string
        overwrite:
          description: |+
            Whether the computed value shall take precedence over a user-provided or
            existing attribute.

          format: ""
          type: boolean
        computeOn:
          description: |+
            An array of strings to define on which write operations the value shall be
            computed. The possible values are `"insert"`, `"update"`, and `"replace"`.
            The default is `["insert", "update", "replace"]`.

          items:
            type: string
          type: array
        keepNull:
          description: |+
            Whether the target attribute shall be set if the expression evaluates to `null`.
            You can set the option to `false` to not set (or unset) the target attribute if
            the expression returns `null`. The default is `true`.

          format: ""
          type: boolean
        failOnWarning:
          description: |+
            Whether to let the write operation fail if the expression produces a warning.
            The default is `false`.

          format: ""
          type: boolean
      type: object
    post_api_collection_computed_field:
      properties:
        name:
          description: |+
            The name of the target attribute. Can only be a top-level attribute, but you
            may return a nested object. Cannot be `_key`, `_id`, `_rev`, `_from`, `_to`,
            or a shard key attribute.

          format: ""
          type: string
        expression:
          description: |+
            An AQL `RETURN` operation with an expression that computes the desired value.
            See [Computed Value Expressions](https://www.arangodb.com/docs/devel/data-modeling-documents-computed-values.html#computed-value-expressions) for details.

          format: ""
          type: string
        overwrite:
          description: |+
            Whether the computed value shall take precedence over a user-provided or
            existing attribute.

          format: ""
          type: boolean
        computeOn:
          description: |+
            An array of strings to define on which write operations the value shall be
            computed. The possible values are `"insert"`, `"update"`, and `"replace"`.
            The default is `["insert", "update", "replace"]`.

          items:
            type: string
          type: array
        keepNull:
          description: |+
            Whether the target attribute shall be set if the expression evaluates to `null`.
            You can set the option to `false` to not set (or unset) the target attribute if
            the expression returns `null`. The default is `true`.

          format: ""
          type: boolean
        failOnWarning:
          description: |+
            Whether to let the write operation fail if the expression produces a warning.
            The default is `false`.

          format: ""
          type: boolean
      type: object
    post_api_collection_opts:
      properties:
        type:
          description: |+
            specifies the type of the key generator. The currently available generators are
            `traditional`, `autoincrement`, `uuid` and `padded`.

            - The `traditional` key generator generates numerical keys in ascending order.
              The sequence of keys is not guaranteed to be gap-free.

            - The `autoincrement` key generator generates numerical keys in ascending order,
              the initial offset and the spacing can be configured (**note**: `autoincrement`
              is currently only supported for non-sharded collections).
              The sequence of generated keys is not guaranteed to be gap-free, because a new key
              will be generated on every document insert attempt, not just for successful
              inserts.

            - The `padded` key generator generates keys of a fixed length (16 bytes) in
              ascending lexicographical sort order. This is ideal for usage with the _RocksDB_
              engine, which will slightly benefit keys that are inserted in lexicographically
              ascending order. The key generator can be used in a single-server or cluster.
              The sequence of generated keys is not guaranteed to be gap-free.

            - The `uuid` key generator generates universally unique 128 bit keys, which
              are stored in hexadecimal human-readable format. This key generator can be used
              in a single-server or cluster to generate "seemingly random" keys. The keys
              produced by this key generator are not lexicographically sorted.

            Please note that keys are only guaranteed to be truly ascending in single
            server deployments and for collections that only have a single shard (that includes
            collections in a OneShard database).
            The reason is that for collections with more than a single shard, document keys
            are generated on coordinator(s). For collections with a single shard, the document
            keys are generated on the leader DB server, which has full control over the key
            sequence.

          type: string
        allowUserKeys:
          description: |+
            If set to `true`, then you are allowed to supply own key values in the
            `_key` attribute of documents. If set to `false`, then the key generator
            is solely be responsible for generating keys and an error is raised if you
            supply own key values in the `_key` attribute of documents.

          format: ""
          type: boolean
        increment:
          description: |+
            increment value for `autoincrement` key generator. Not used for other key
            generator types.

          format: int64
          type: integer
        offset:
          description: |+
            Initial offset value for `autoincrement` key generator.
            Not used for other key generator types.

          format: int64
          type: integer
      type: object
    collection_figures:
      properties:
        indexes:
          description: |2+

          format: collection_figures_indexes
          type: object
      type: object
    collection_figures_indexes:
      properties:
        count:
          description: |+
            The total number of indexes defined for the collection, including the pre-defined
            indexes (e.g. primary index).

          format: int64
          type: integer
        size:
          description: |+
            The total memory allocated for indexes in bytes.

          format: int64
          type: integer
      type: object
    get_api_database_new_OPTIONS:
      properties:
        sharding:
          description: |+
            The sharding method to use for new collections in this database. Valid values
            are: "", "flexible", or "single". The first two are equivalent. _(cluster only)_

          format: ""
          type: string
        replicationFactor:
          description: |+
            Default replication factor for new collections created in this database.
            Special values include "satellite", which will replicate the collection to
            every DB-Server (Enterprise Edition only), and 1, which disables replication.
            _(cluster only)_

          format: ""
          type: integer
        writeConcern:
          description: |+
            Default write concern for new collections created in this database.
            It determines how many copies of each shard are required to be
            in sync on the different DB-Servers. If there are less then these many copies
            in the cluster a shard will refuse to write. Writes to shards with enough
            up-to-date copies will succeed at the same time however. The value of
            *writeConcern* can not be larger than *replicationFactor*. _(cluster only)_

          format: ""
          type: number
      type: object
    get_api_database_new_USERS:
      properties:
        username:
          description: |+
            Login name of an existing user or one to be created.

          format: ""
          type: string
        passwd:
          description: |+
            The user password as a string. If not specified, it will default to an empty
            string. The attribute is ignored for users that already exist.

          format: password
          type: string
        active:
          description: |+
            A flag indicating whether the user account should be activated or not.
            The default value is *true*. If set to *false*, then the user won't be able to
            log into the database. The default is *true*. The attribute is ignored for users
            that already exist.

          format: ""
          type: boolean
        extra:
          description: |+
            A JSON object with extra user information. It is used by the web interface
            to store graph viewer settings and saved queries. Should not be set or
            modified by end users, as custom attributes will not be preserved.

          format: ""
          type: object
      type: object
    post_api_view_searchalias_indexes:
      properties:
        collection:
          description: |+
            The name of a collection.

          format: ""
          type: string
        index:
          description: |+
            The name of an inverted index of the `collection`, or the index ID without
            the `<collection>/` prefix.

          format: ""
          type: string
      type: object
    put_api_view_searchalias_indexes:
      properties:
        collection:
          description: |+
            The name of a collection.

          format: ""
          type: string
        index:
          description: |+
            The name of an inverted index of the `collection`, or the index ID without
            the `<collection>/` prefix.

          format: ""
          type: string
      type: object
    put_api_view_searchalias_indexes_reply:
      properties:
        collection:
          description: |+
            The name of a collection.

          format: ""
          type: string
        index:
          description: |+
            The name of an inverted index of the `collection`.

          format: ""
          type: string
      type: object
    patch_api_view_searchalias_indexes:
      properties:
        collection:
          description: |+
            The name of a collection.

          format: ""
          type: string
        index:
          description: |+
            The name of an inverted index of the `collection`, or the index ID without
            the `<collection>/` prefix.

          format: ""
          type: string
        operation:
          description: |+
            Whether to add or remove the index to the stored `indexes` property of the View.
            Possible values: `"add"`, `"del"`. The default is `"add"`.

          format: ""
          type: string
      type: object
    patch_api_view_searchalias_indexes_reply:
      properties:
        collection:
          description: |+
            The name of a collection.

          format: ""
          type: string
        index:
          description: |+
            The name of an inverted index of the `collection`.

          format: ""
          type: string
      type: object
    graph_list:
      properties:
        graph:
          description: |+
            The information about the newly created graph

          format: graph_representation
          type: object
      type: object
    graph_representation:
      properties:
        name:
          description: |+
            The name of the graph

          format: ""
          type: string
        edgeDefinitions:
          description: |+
            An array of definitions for the relations of the graph.
            Each has the following type:

          items:
            $ref: '#/components/schemas/graph_edge_definition'
          type: array
        orphanCollections:
          description: |+
            An array of additional vertex collections.
            Documents within these collections do not have edges within this graph.

          items:
            type: string
          type: array
        numberOfShards:
          description: |+
            Number of shards created for every new collection in the graph.

          format: ""
          type: integer
        _id:
          description: |+
            The internal id value of this graph.

          format: ""
          type: string
        _rev:
          description: |+
            The revision of this graph. Can be used to make sure to not override
            concurrent modifications to this graph.

          format: ""
          type: string
        replicationFactor:
          description: |+
            The replication factor used for every new collection in the graph.
            Can also be the string `"satellite"` for a SmartGraph (Enterprise Edition only).

          format: ""
          type: integer
        isSmart:
          description: |+
            Whether the graph is a SmartGraph (Enterprise Edition only).

          format: ""
          type: boolean
        isDisjoint:
          description: |+
            Whether the graph is a Disjoint SmartGraph (Enterprise Edition only).

          format: ""
          type: boolean
        smartGraphAttribute:
          description: |+
            Name of the sharding attribute in the SmartGraph case (Enterprise Edition only).

          format: ""
          type: string
      type: object
    post_api_gharial_create_opts:
      properties:
        smartGraphAttribute:
          description: |+
            Only has effect in Enterprise Edition and it is required if isSmart is true.
            The attribute name that is used to smartly shard the vertices of a graph.
            Every vertex in this SmartGraph has to have this attribute.
            Cannot be modified later.

          format: ""
          type: string
        satellites:
          description: |+
            An array of collection names that is used to create SatelliteCollections
            for a (Disjoint) SmartGraph using SatelliteCollections (Enterprise Edition only).
            Each array element must be a string and a valid collection name.
            The collection type cannot be modified later.

          items:
            type: string
          type: array
        numberOfShards:
          description: |+
            The number of shards that is used for every collection within this graph.
            Cannot be modified later.

          format: ""
          type: integer
        replicationFactor:
          description: |+
            The replication factor used when initially creating collections for this graph.
            Can be set to `"satellite"` to create a SatelliteGraph, which will ignore
            *numberOfShards*, *minReplicationFactor* and *writeConcern*
            (Enterprise Edition only).

          format: ""
          type: integer
        writeConcern:
          description: |+
            Write concern for new collections in the graph.
            It determines how many copies of each shard are required to be
            in sync on the different DB-Servers. If there are less then these many copies
            in the cluster a shard will refuse to write. Writes to shards with enough
            up-to-date copies will succeed at the same time however. The value of
            *writeConcern* can not be larger than *replicationFactor*. _(cluster only)_

          format: ""
          type: integer
      type: object
    post_api_vertex_create_opts:
      properties:
        satellites:
          description: |+
            An array of collection names that is used to create SatelliteCollections
            for a (Disjoint) SmartGraph using SatelliteCollections (Enterprise Edition only).
            Each array element must be a string and a valid collection name.
            The collection type cannot be modified later.

          items:
            type: string
          type: array
      type: object
    post_api_edgedef_create_opts:
      properties:
        satellites:
          description: |+
            An array of collection names that is used to create SatelliteCollections
            for a (Disjoint) SmartGraph using SatelliteCollections (Enterprise Edition only).
            Each array element must be a string and a valid collection name.
            The collection type cannot be modified later.

          items:
            type: string
          type: array
      type: object
    post_api_edgedef_modify_opts:
      properties:
        satellites:
          description: |+
            An array of collection names that is used to create SatelliteCollections
            for a (Disjoint) SmartGraph using SatelliteCollections (Enterprise Edition only).
            Each array element must be a string and a valid collection name.
            The collection type cannot be modified later.

          items:
            type: string
          type: array
      type: object
    post_api_cursor_opts:
      properties:
        fullCount:
          description: |+
            if set to *true* and the query contains a *LIMIT* clause, then the
            result will have an *extra* attribute with the sub-attributes *stats*
            and *fullCount*, `{ ... , "extra": { "stats": { "fullCount": 123 } } }`.
            The *fullCount* attribute will contain the number of documents in the result before the
            last top-level LIMIT in the query was applied. It can be used to count the number of
            documents that match certain filter criteria, but only return a subset of them, in one go.
            It is thus similar to MySQL's *SQL_CALC_FOUND_ROWS* hint. Note that setting the option
            will disable a few LIMIT optimizations and may lead to more documents being processed,
            and thus make queries run longer. Note that the *fullCount* attribute may only
            be present in the result if the query has a top-level LIMIT clause and the LIMIT
            clause is actually used in the query.

          format: ""
          type: boolean
        fillBlockCache:
          description: "if set to *true* or not specified, this will make the query\
            \ store the data it \nreads via the RocksDB storage engine in the RocksDB\
            \ block cache. This is usually \nthe desired behavior. The option can\
            \ be set to *false* for queries that are\nknown to either read a lot of\
            \ data which would thrash the block cache, or for queries\nthat read data\
            \ which are known to be outside of the hot set. By setting the option\n\
            to *false*, data read by the query will not make it into the RocksDB block\
            \ cache if\nnot already in there, thus leaving more room for the actual\
            \ hot set.\n\n"
          format: ""
          type: boolean
        maxPlans:
          description: |+
            Limits the maximum number of plans that are created by the AQL query optimizer.

          format: int64
          type: integer
        maxNodesPerCallstack:
          description: |+
            The number of execution nodes in the query plan after that stack splitting is
            performed to avoid a potential stack overflow. Defaults to the configured value
            of the startup option `--query.max-nodes-per-callstack`.

            This option is only useful for testing and debugging and normally does not need
            any adjustment.

          format: int64
          type: integer
        maxWarningCount:
          description: |+
            Limits the maximum number of warnings a query will return. The number of warnings
            a query will return is limited to 10 by default, but that number can be increased
            or decreased by setting this attribute.

          format: int64
          type: integer
        failOnWarning:
          description: |+
            When set to *true*, the query will throw an exception and abort instead of producing
            a warning. This option should be used during development to catch potential issues
            early. When the attribute is set to *false*, warnings will not be propagated to
            exceptions and will be returned with the query result.
            There is also a server configuration option `--query.fail-on-warning` for setting the
            default value for *failOnWarning* so it does not need to be set on a per-query level.

          format: ""
          type: boolean
        stream:
          description: |+
            Can be enabled to execute the query lazily. If set to *true*, then the query is
            executed as long as necessary to produce up to `batchSize` results. These
            results are returned immediately and the query is suspended until the client
            asks for the next batch (if there are more results). Depending on the query
            this can mean that the first results will be available much faster and that
            less memory is needed because the server only needs to store a subset of
            results at a time. Read-only queries can benefit the most, unless `SORT`
            without index or `COLLECT` are involved that make it necessary to process all
            documents before a partial result can be returned. It is advisable to only use
            this option for queries without exclusive locks.

            Remarks:
            - The query will hold resources until it ends (such as RocksDB snapshots, which
              prevents compaction to some degree). Writes will be in memory until the query
              is committed.
            - If existing documents are modified, then write locks are held on these
              documents and other queries trying to modify the same documents will fail
              because of this conflict.
            - A streaming query may fail late because of a conflict or for other reasons
              after some batches were already returned successfully, possibly rendering the
              results up to that point meaningless.
            - The query options `cache`, `count` and `fullCount` are not supported for
              streaming queries.
            - Query statistics, profiling data and warnings are delivered as part of the
              last batch.

            If the `stream` option is *false* (default), then the complete result of the
            query is calculated before any of it is returned to the client. The server
            stores the full result in memory (on the contacted Coordinator if in a cluster).
            All other resources are freed immediately (locks, RocksDB snapshots). The query
            will fail before it returns results in case of a conflict.

          format: ""
          type: boolean
        optimizer:
          description: |+
            Options related to the query optimizer.

          format: post_api_cursor_opts_optimizer
          type: object
        profile:
          description: |+
            If set to `true` or `1`, then the additional query profiling information is returned
            in the `profile` sub-attribute of the `extra` return attribute, unless the query result
            is served from the query cache. If set to `2`, the query includes execution stats
            per query plan node in `stats.nodes` sub-attribute of the `extra` return attribute.
            Additionally, the query plan is returned in the `extra.plan` sub-attribute.

          format: ""
          type: integer
        satelliteSyncWait:
          description: |+
            This *Enterprise Edition* parameter allows to configure how long a DB-Server has time
            to bring the SatelliteCollections involved in the query into sync.
            The default value is `60.0` seconds. When the maximal time is reached, the query
            is stopped.

          format: double
          type: number
        maxRuntime:
          description: |+
            The query has to be executed within the given runtime or it is killed.
            The value is specified in seconds. The default value is `0.0` (no timeout).

          format: double
          type: number
        maxTransactionSize:
          description: |+
            The transaction size limit in bytes.

          format: int64
          type: integer
        intermediateCommitSize:
          description: |+
            The maximum total size of operations after which an intermediate commit is performed
            automatically.

          format: int64
          type: integer
        intermediateCommitCount:
          description: |+
            The maximum number of operations after which an intermediate commit is performed
            automatically.

          format: int64
          type: integer
        skipInaccessibleCollections:
          description: |+
            Let AQL queries (especially graph traversals) treat collection to which a user
            has no access rights for as if these collections are empty. Instead of returning a
            forbidden access error, your queries execute normally. This is intended to help
            with certain use-cases: A graph contains several collections and different users
            execute AQL queries on that graph. You can naturally limit the accessible
            results by changing the access rights of users on collections.

            This feature is only available in the Enterprise Edition.

          format: ""
          type: boolean
      type: object
    post_api_cursor_opts_optimizer:
      properties:
        rules:
          description: |+
            A list of to-be-included or to-be-excluded optimizer rules can be put into this
            attribute, telling the optimizer to include or exclude specific rules. To disable
            a rule, prefix its name with a `-`, to enable a rule, prefix it with a `+`. There is
            also a pseudo-rule `all`, which matches all optimizer rules. `-all` disables all rules.

          items:
            type: string
          type: array
      type: object
    post_api_cursor_extra:
      properties:
        warnings:
          description: |+
            A list of query warnings.

          items:
            $ref: '#/components/schemas/post_api_cursor_extra_warnings'
          type: array
        stats:
          description: |+
            An object with query statistics.

          format: post_api_cursor_extra_stats
          type: object
        profile:
          description: |+
            The duration of the different query execution phases in seconds.

          format: post_api_cursor_extra_profile
          type: object
        plan:
          description: |+
            The execution plan.

          format: post_api_cursor_extra_plan
          type: object
      type: object
    post_api_cursor_extra_warnings:
      properties:
        code:
          description: |+
            An error code.

          format: ""
          type: integer
        message:
          description: |+
            A description of the problem.

          format: ""
          type: string
      type: object
    post_api_cursor_extra_stats:
      properties:
        writesExecuted:
          description: |+
            The total number of data-modification operations successfully executed.

          format: ""
          type: integer
        writesIgnored:
          description: |+
            The total number of data-modification operations that were unsuccessful,
            but have been ignored because of the `ignoreErrors` query option.

          format: ""
          type: integer
        scannedFull:
          description: "The total number of documents iterated over when scanning\
            \ a collection \nwithout an index. Documents scanned by subqueries are\
            \ included in the result, but\noperations triggered by built-in or user-defined\
            \ AQL functions are not.\n\n"
          format: ""
          type: integer
        scannedIndex:
          description: |+
            The total number of documents iterated over when scanning a collection using
            an index. Documents scanned by subqueries are included in the result, but operations
            triggered by built-in or user-defined AQL functions are not.

          format: ""
          type: integer
        cursorsCreated:
          description: |+
            The total number of cursor objects created during query execution. Cursor
            objects are created for index lookups.

          format: ""
          type: integer
        cursorsRearmed:
          description: |+
            The total number of times an existing cursor object was repurposed.
            Repurposing an existing cursor object is normally more efficient compared to destroying an
            existing cursor object and creating a new one from scratch.

          format: ""
          type: integer
        cacheHits:
          description: |+
            The total number of index entries read from in-memory caches for indexes
            of type edge or persistent. This value is only non-zero when reading from indexes
            that have an in-memory cache enabled, and when the query allows using the in-memory
            cache (i.e. using equality lookups on all index attributes).

          format: ""
          type: integer
        cacheMisses:
          description: |+
            The total number of cache read attempts for index entries that could not
            be served from in-memory caches for indexes of type edge or persistent. This value
            is only non-zero when reading from indexes that have an in-memory cache enabled, the
            query allows using the in-memory cache (i.e. using equality lookups on all index attributes)
            and the looked up values are not present in the cache.

          format: ""
          type: integer
        filtered:
          description: "The total number of documents removed after executing a filter\
            \ condition\nin a `FilterNode` or another node that post-filters data.\
            \ Note that nodes of the\n`IndexNode` type can also filter documents by\
            \ selecting only the required index range \nfrom a collection, and the\
            \ `filtered` value only indicates how much filtering was done by a\npost\
            \ filter in the `IndexNode` itself or following `FilterNode` nodes.\n\
            Nodes of the `EnumerateCollectionNode` and `TraversalNode` types can also\
            \ apply\nfilter conditions and can report the number of filtered documents.\n\
            \n"
          format: ""
          type: integer
        httpRequests:
          description: |+
            The total number of cluster-internal HTTP requests performed.

          format: ""
          type: integer
        fullCount:
          description: "The total number of documents that matched the search condition\
            \ if the query's\nfinal top-level `LIMIT` operation were not present.\n\
            This attribute may only be returned if the `fullCount` option was set\
            \ when starting the \nquery and only contains a sensible value if the\
            \ query contains a `LIMIT` operation on\nthe top level.\n\n"
          format: ""
          type: integer
        executionTime:
          description: |+
            The query execution time (wall-clock time) in seconds.

          format: ""
          type: number
        peakMemoryUsage:
          description: "The maximum memory usage of the query while it was running.\
            \ In a cluster,\nthe memory accounting is done per shard, and the memory\
            \ usage reported is the peak\nmemory usage value from the individual shards.\n\
            Note that to keep things lightweight, the per-query memory usage is tracked\
            \ on a relatively \nhigh level, not including any memory allocator overhead\
            \ nor any memory used for temporary\nresults calculations (e.g. memory\
            \ allocated/deallocated inside AQL expressions and function \ncalls).\n\
            \n"
          format: ""
          type: integer
        nodes:
          description: |+
            When the query is executed with the `profile` option set to at least `2`,
            then this attribute contains runtime statistics per query execution node.
            For a human readable output, you can execute
            `db._profileQuery(<query>, <bind-vars>)` in arangosh.

          items:
            $ref: '#/components/schemas/post_api_cursor_extra_stats_nodes'
          type: array
      type: object
    post_api_cursor_extra_stats_nodes:
      properties:
        id:
          description: |+
            The execution node ID to correlate the statistics with the `plan` returned in
            the `extra` attribute.

          format: ""
          type: integer
        calls:
          description: |+
            The number of calls to this node.

          format: ""
          type: integer
        items:
          description: |+
            The number of items returned by this node. Items are the temporary results
            returned at this stage.

          format: ""
          type: integer
        runtime:
          description: |+
            The execution time of this node in seconds.

          format: ""
          type: number
      type: object
    post_api_cursor_extra_profile:
      properties:
        initializing:
          description: ""
          format: ""
          type: number
        parsing:
          description: ""
          format: ""
          type: number
        optimizing ast:
          description: ""
          format: ""
          type: number
        loading collections:
          description: ""
          format: ""
          type: number
        instantiating plan:
          description: ""
          format: ""
          type: number
        optimizing plan:
          description: ""
          format: ""
          type: number
        executing:
          description: ""
          format: ""
          type: number
        finalizing:
          description: |2+

          format: ""
          type: number
      type: object
    post_api_cursor_extra_plan:
      properties:
        nodes:
          description: |+
            A nested list of the execution plan nodes.

          items:
            type: object
          type: array
        rules:
          description: |+
            A list with the names of the applied optimizer rules.

          items:
            type: string
          type: array
        collections:
          description: |+
            A list of the collections involved in the query. The list only includes the
            collections that can statically be determined at query compile time.

          items:
            $ref: '#/components/schemas/post_api_cursor_extra_plan_collections'
          type: array
        variables:
          description: |+
            All of the query variables, including user-created and internal ones.

          items:
            type: object
          type: array
        estimatedCost:
          description: |+
            The estimated cost of the query.

          format: ""
          type: integer
        estimatedNrItems:
          description: |+
            The estimated number of results.

          format: ""
          type: integer
        isModificationQuery:
          description: |+
            Whether the query contains write operations.

          format: ""
          type: boolean
      type: object
    post_api_cursor_extra_plan_collections:
      properties:
        name:
          description: |+
            The collection name.

          format: ""
          type: string
        type:
          description: |+
            How the collection is used. Can be `"read"`, `"write"`, or `"exclusive"`.

          format: ""
          type: string
      type: object
    get_cluster_maintenance_dbserver_result:
      properties:
        Mode:
          description: |+
            The mode of the DB-Server. The value is `"maintenance"`.

          format: ""
          type: string
        Until:
          description: |+
            Until what date and time the maintenance mode currently lasts, in the
            ISO 8601 date/time format.

          format: dateTime
          type: string
      type: object
    __api_user_post_request:
      properties:
        user:
          description: |
            The name of the user as a string. This is mandatory.
          type: string
        passwd:
          description: |
            The user password as a string. If not specified, it will default to an empty
            string.
          type: string
        active:
          description: |
            An optional flag that specifies whether the user is active. If not
            specified, this will default to *true*.
          type: boolean
        extra:
          description: |
            A JSON object with extra user information. It is used by the web interface
            to store graph viewer settings and saved queries. Should not be set or
            modified by end users, as custom attributes will not be preserved.
          type: object
      required:
      - passwd
      - user
      type: object
    __api_user__user__database__dbname__delete_request:
      properties:
        grant:
          description: |
            - Use "rw" to set the database access level to *Administrate*.
            - Use "ro" to set the database access level to *Access*.
            - Use "none" to set the database access level to *No access*.
          type: string
      required:
      - grant
      type: object
    __api_user__user__database__dbname___collection__delete_request:
      properties:
        grant:
          description: |
            Use "rw" to set the collection level access to *Read/Write*.
            Use "ro" to set the collection level access to  *Read Only*.
            Use "none" to set the collection level access to *No access*.
          type: string
      required:
      - grant
      type: object
    __api_user__user__delete_request:
      properties:
        passwd:
          description: |
            The user password as a string. If not specified, it will default to an empty
            string.
          type: string
        active:
          description: |
            An optional flag that specifies whether the user is active. If not
            specified, this will default to *true*.
          type: boolean
        extra:
          description: |
            A JSON object with extra user information. It is used by the web interface
            to store graph viewer settings and saved queries. Should not be set or
            modified by end users, as custom attributes will not be preserved.
          type: object
      required:
      - passwd
      type: object
    __api_user__user__delete_request_1:
      properties:
        passwd:
          description: |
            The user password as a string.
          type: string
        active:
          description: |
            An optional flag that specifies whether the user is active.
          type: boolean
        extra:
          description: |
            A JSON object with extra user information. It is used by the web interface
            to store graph viewer settings and saved queries. Should not be set or
            modified by end users, as custom attributes will not be preserved.
          type: object
      required:
      - passwd
      type: object
    __api_analyzer_get_request:
      properties:
        name:
          description: |
            The Analyzer name.
          type: string
        type:
          description: |
            The Analyzer type.
          type: string
        properties:
          description: |
            The properties used to configure the specified Analyzer type.
          type: object
        features:
          description: |
            The set of features to set on the Analyzer generated fields.
            The default value is an empty array.
          items:
            type: string
          type: array
      required:
      - name
      - type
      type: object
    __api_explain_post_request:
      properties:
        query:
          description: |
            the query which you want explained; If the query references any bind variables,
            these must also be passed in the attribute *bindVars*. Additional
            options for the query can be passed in the *options* attribute.
          type: string
        bindVars:
          description: |
            key/value pairs representing the bind parameters.
          format: object
          items:
            type: object
          type: array
        options:
          $ref: '#/components/schemas/explain_options'
      required:
      - query
      type: object
    __api_query_post_request:
      properties:
        query:
          description: |
            To validate a query string without executing it, the query string can be
            passed to the server via an HTTP POST request.
          type: string
      required:
      - query
      type: object
    __api_query_rules_get_200_response:
      example:
        ? ""
        : - ""
          - ""
      properties:
        ? ""
        : $ref: '#/components/schemas/get_api_query_rules'
      required:
      - ""
      type: object
    __api_query_properties_get_request:
      properties:
        enabled:
          description: |
            If set to *true*, then queries will be tracked. If set to
            *false*, neither queries nor slow queries will be tracked.
          type: boolean
        trackSlowQueries:
          description: |
            If set to *true*, then slow queries will be tracked
            in the list of slow queries if their runtime exceeds the value set in
            *slowQueryThreshold*. In order for slow queries to be tracked, the *enabled*
            property must also be set to *true*.
          type: boolean
        trackBindVars:
          description: |
            If set to *true*, then the bind variables used in queries will be tracked
            along with queries.
          type: boolean
        maxSlowQueries:
          description: |
            The maximum number of slow queries to keep in the list
            of slow queries. If the list of slow queries is full, the oldest entry in
            it will be discarded when additional slow queries occur.
          format: int64
          type: integer
        slowQueryThreshold:
          description: |
            The threshold value for treating a query as slow. A
            query with a runtime greater or equal to this threshold value will be
            put into the list of slow queries when slow query tracking is enabled.
            The value for *slowQueryThreshold* is specified in seconds.
          format: int64
          type: integer
        maxQueryStringLength:
          description: |
            The maximum query string length to keep in the list of queries.
            Query strings can have arbitrary lengths, and this property
            can be used to save memory in case very long query strings are used. The
            value is specified in bytes.
          format: int64
          type: integer
      required:
      - enabled
      - maxQueryStringLength
      - maxSlowQueries
      - slowQueryThreshold
      - trackBindVars
      - trackSlowQueries
      type: object
    __api_control_pregel_get_request:
      properties:
        algorithm:
          description: |
            Name of the algorithm. One of:
            - `"pagerank"` - Page Rank
            - `"sssp"` - Single-Source Shortest Path
            - `"connectedcomponents"` - Connected Components
            - `"wcc"` - Weakly Connected Components
            - `"scc"` - Strongly Connected Components
            - `"hits"` - Hyperlink-Induced Topic Search
            - `"effectivecloseness"` - Effective Closeness
            - `"linerank"` - LineRank
            - `"labelpropagation"` - Label Propagation
            - `"slpa"` - Speaker-Listener Label Propagation
          type: string
        graphName:
          description: |
            Name of a graph. Either this or the parameters `vertexCollections` and
            `edgeCollections` are required.
            Please note that there are special sharding requirements for graphs in order
            to be used with Pregel.
          type: string
        vertexCollections:
          description: |
            List of vertex collection names.
            Please note that there are special sharding requirements for collections in order
            to be used with Pregel.
          items:
            type: string
          type: array
        edgeCollections:
          description: |
            List of edge collection names.
            Please note that there are special sharding requirements for collections in order
            to be used with Pregel.
          items:
            type: string
          type: array
        params:
          description: |
            General as well as algorithm-specific options.
            The most important general option is "store", which controls whether the results
            computed by the Pregel job are written back into the source collections or not.
            Another important general option is "parallelism", which controls the number of
            parallel threads that work on the Pregel job at most. If "parallelism" is not
            specified, a default value may be used. In addition, the value of "parallelism"
            may be effectively capped at some server-specific value.
            The option "useMemoryMaps" controls whether to use disk based files to store
            temporary results. This might make the computation disk-bound, but allows you to
            run computations which would not fit into main memory. It is recommended to set
            this flag for larger datasets.
            The attribute "shardKeyAttribute" specifies the shard key that edge collections are
            sharded after (default: `"vertex"`).
          type: object
      required:
      - algorithm
      type: object
    __api_control_pregel__id__delete_404_response:
      properties:
        ? ""
        : $ref: '#/components/schemas/get_api_control_pregel'
      required:
      - ""
      type: object
    __admin_server_jwt_get_403_response:
      properties:
        error:
          description: |
            boolean flag to indicate whether an error occurred (*false* in this case)
          type: boolean
        code:
          description: |
            the HTTP status code - 200 in this case
          format: int64
          type: integer
        result:
          $ref: '#/components/schemas/jwt_secret_struct'
      required:
      - code
      - error
      - result
      type: object
    __api_cluster_endpoints_get_501_response:
      properties:
        error:
          description: |
            boolean flag to indicate whether an error occurred (*true* in this case)
          type: boolean
        code:
          description: |
            the HTTP status code - 200
          format: int64
          type: integer
        endpoints:
          $ref: '#/components/schemas/cluster_endpoints_struct'
      required:
      - code
      - endpoints
      - error
      type: object
    __admin_backup_create_post_request:
      properties:
        label:
          description: |
            The label for this backup. The label is used together with a
            timestamp string create a unique backup identifier, `<timestamp>_<label>`.
            If no label is specified, the empty string is assumed and a default
            UUID is created for this part of the ID.
          type: string
        timeout:
          description: |
            The time in seconds that the operation tries to get a consistent
            snapshot. The default is 120 seconds.
          format: double
          type: number
        allowInconsistent:
          description: |
            If this flag is set to `true` and no global transaction lock can be
            acquired within the given timeout, a possibly inconsistent backup
            is taken. The default for this flag is `false` and in this case
            a timeout results in an HTTP 408 error.
          type: boolean
        force:
          description: "If this flag is set to `true` and no global transaction lock\
            \ can be acquired\nwithin the given timeout, all running transactions\
            \ are forcefully aborted to\nensure that a consistent backup can be created.\
            \ This does not include \nJavaScript transactions. It waits for the transactions\
            \ to be aborted at most \n`timeout` seconds. Thus using `force` the request\
            \ timeout is doubled.\nTo abort transactions is almost certainly not what\
            \ you want for your application. \nIn the presence of intermediate commits\
            \ it can even destroy the atomicity of your\ntransactions. Use at your\
            \ own risk, and only if you need a consistent backup at \nall costs. The\
            \ default and recommended value is `false`. If both \n`allowInconsistent`\
            \ and `force` are set to `true`, then the latter takes \nprecedence and\
            \ transactions are aborted. This is only available in the cluster.\n\n"
          type: boolean
      type: object
    __admin_backup_restore_post_request:
      properties:
        id:
          description: |
            The id of the backup to restore from.
          type: string
      required:
      - id
      type: object
    __admin_backup_delete_post_request:
      properties:
        id:
          description: |
            The identifier for this backup.
          type: string
      required:
      - id
      type: object
    __admin_backup_list_post_request:
      properties:
        id:
          description: |
            The body can either be empty (in which case all available backups are
            listed), or it can be an object with an attribute `id`, which
            is a string. In the latter case the returned list
            is restricted to the backup with the given id.
          type: string
      type: object
    __admin_backup_upload_post_request:
      properties:
        id:
          description: |
            The identifier for this backup. This is required when an upload
            operation is scheduled. In this case leave out the `uploadId`
            attribute.
          type: string
        remoteRepository:
          description: |
            URL of remote repository. This is required when an upload operation is
            scheduled. In this case leave out the `uploadId` attribute. Provided repository
            URLs are normalized and validated as follows: One single colon must appear
            separating the configuration section name and the path. The URL prefix up to
            the colon must exist as a key in the config object below. No slashes must
            appear before the colon. Multiple back to back slashes are collapsed to one, as
            `..` and `.` are applied accordingly. Local repositories must be absolute
            paths and must begin with a `/`. Trailing `/` are removed.
          type: string
        config:
          description: |
            Configuration of remote repository. This is required when an upload
            operation is scheduled. In this case leave out the `uploadId`
            attribute. See the description of the _arangobackup_ program in the manual
            for a description of the `config` object.
          format: object
          type: object
        uploadId:
          description: |
            Upload ID to specify for which upload operation progress is queried or
            the upload operation to abort.
            If you specify this, leave out all the above body parameters.
          type: string
        abort:
          description: |
            Set this to `true` if a running upload operation should be aborted. In
            this case, the only other body parameter which is needed is `uploadId`.
          type: boolean
      type: object
    __admin_backup_download_post_request:
      properties:
        id:
          description: |
            The identifier for this backup. This is required when a download
            operation is scheduled. In this case leave out the `downloadId`
            attribute.
          type: string
        remoteRepository:
          description: |
            URL of remote repository. This is required when a download operation is
            scheduled. In this case leave out the `downloadId` attribute. Provided
            repository URLs are normalized and validated as follows: One single colon must
            appear separating the configuration section name and the path. The URL prefix
            up to the colon must exist as a key in the config object below. No slashes must
            appear before the colon. Multiple back to back slashes are collapsed to one, as
            `..` and `.` are applied accordingly. Local repositories must be absolute paths
            and must begin with a `/`. Trailing `/` are removed.
          type: string
        config:
          description: |
            Configuration of remote repository. This is required when a download
            operation is scheduled. In this case leave out the `downloadId`
            attribute. See the description of the _arangobackup_ program in the manual
            for a description of the `config` object.
          format: object
          type: object
        downloadId:
          description: |
            Download ID to specify for which download operation progress is queried, or
            the download operation to abort.
            If you specify this, leave out all the above body parameters.
          type: string
        abort:
          description: |
            Set this to `true` if a running download operation should be aborted. In
            this case, the only other body parameter which is needed is `downloadId`.
          type: boolean
      required:
      - config
      - remoteRepository
      type: object
    __api_version_get_200_response:
      example:
        server: arango
        details:
          unaligned-access: unaligned-access
          build-date: build-date
          maintainer-mode: maintainer-mode
          rocksdb-version: rocksdb-version
          sizeof void*: sizeof void*
          sse42: sse42
          vpack-version: vpack-version
          boost-version: boost-version
          fd-client-event-handler: fd-client-event-handler
          platform: platform
          mode: mode
          v8-version: v8-version
          failure-tests: failure-tests
          zlib-version: zlib-version
          full-version-string: full-version-string
          server-version: server-version
          openssl-version: openssl-version
          assertions: assertions
          compiler: compiler
          cplusplus: cplusplus
          arm: arm
          architecture: architecture
          icu-version: icu-version
          debug: debug
          fd-setsize: fd-setsize
          sizeof int: sizeof int
          asm-crc32: asm-crc32
          asan: asan
          build-repository: build-repository
          reactor-type: reactor-type
          jemalloc: jemalloc
          endianness: endianness
        version: 3.10.1
      properties:
        server:
          description: |
            will always contain *arango*
          type: string
        version:
          description: |
            the server version string. The string has the format
            "*major*.*minor*.*sub*". *major* and *minor* will be numeric, and *sub*
            may contain a number or a textual version.
          type: string
        details:
          $ref: '#/components/schemas/version_details_struct'
      required:
      - server
      - version
      type: object
    __admin_time_get_200_response:
      example:
        code: 0
        error: true
      properties:
        error:
          description: |
            boolean flag to indicate whether an error occurred (*false* in this case)
          type: boolean
        code:
          description: |
            the HTTP status code
          format: int64
          type: integer
      required:
      - code
      - error
      type: object
    __admin_echo_post_request:
      properties:
        body:
          description: |
            The body can be any type and is simply forwarded.
          type: object
      required:
      - body
      type: object
    __api_database_current_200_response:
      example:
        name: test_database
        id: test_id
        path: test_path
      properties:
        name:
          type: string
        id:
          type: string

        path:
          type: string

      required:
        - name
    __admin_echo_post_200_response:
      example:
        server:
          endpoint: endpoint
          address: address
          port: 0
        headers: "{}"
        rawRequestBody: "{}"
        requestType: requestType
        prefix: "{}"
        rawSuffix:
        - rawSuffix
        - rawSuffix
        suffix:
        - suffix
        - suffix
        url: url
        cookies: "{}"
        internals: "{}"
        portType: portType
        database: database
        protocol: protocol
        requestBody: requestBody
        authorized: true
        client:
          address: 6
          port: 1
          id: id
        isAdminUser: true
        user: user
        parameters: "{}"
      properties:
        authorized:
          description: |
            Whether the session is authorized
          type: boolean
        user:
          description: |
            The name of the current user that sent this request
          type: string
        isAdminUser:
          description: |
            Whether the current user is an administrator
          type: boolean
        database:
          description: |
            The name of the database this request was executed on
          type: string
        url:
          description: |
            The raw request URL
          type: string
        protocol:
          description: |
            The transport protocol, one of `"http"`, `"https"`, `"velocystream"`
          type: string
        portType:
          description: |
            The type of the socket, one of `"tcp/ip"`, `"unix"`, `"unknown"`
          type: string
        server:
          $ref: '#/components/schemas/admin_echo_server_struct'
        client:
          $ref: '#/components/schemas/admin_echo_client_struct'
        internals:
          description: |
            Contents of the server internals struct
          type: object
        prefix:
          description: |
            The prefix of the database
          type: object
        headers:
          description: |
            The list of the HTTP headers you sent
          type: object
        requestType:
          description: |
            The HTTP method that was used for the request (`"POST"`). The endpoint can be
            queried using other verbs, too (`"GET"`, `"PUT"`, `"PATCH"`, `"DELETE"`).
          type: string
        requestBody:
          description: |
            Stringified version of the request body you sent
          type: string
        rawRequestBody:
          description: |
            The sent payload as a JSON-encoded Buffer object
          type: object
        parameters:
          description: |
            An object containing the query parameters
          type: object
        cookies:
          description: |
            A list of the cookies you sent
          type: object
        suffix:
          description: |
            A list of the decoded URL path suffixes. You can query the endpoint with
            arbitrary suffixes, e.g. `/_admin/echo/foo/123`
          items:
            type: string
          type: array
        rawSuffix:
          description: |
            A list of the percent-encoded URL path suffixes
          items:
            type: string
          type: array
      required:
      - authorized
      - client
      - cookies
      - database
      - headers
      - internals
      - isAdminUser
      - parameters
      - portType
      - prefix
      - protocol
      - rawRequestBody
      - rawSuffix
      - requestBody
      - requestType
      - server
      - suffix
      - url
      - user
      type: object
    __admin_shutdown_delete_200_response:
      example:
        lowPrioQueuedRequests: 7.061401241503109
        pregelConductors: 5.637376656633329
        AQLcursors: 0.8008281904610115
        softShutdownOngoing: true
        lowPrioOngoingRequests: 2.3021358869347655
        doneJobs: 5.962133916683182
        pendingJobs: 1.4658129805029452
        transactions: 6.027456183070403
      properties:
        softShutdownOngoing:
          description: |
            Whether a soft shutdown of the Coordinator is in progress.
          type: boolean
        AQLcursors:
          description: |
            Number of AQL cursors that are still active.
          type: number
        transactions:
          description: |
            Number of ongoing transactions.
          type: number
        pendingJobs:
          description: |
            Number of ongoing asynchronous requests.
          type: number
        doneJobs:
          description: |
            Number of finished asynchronous requests, whose result has not yet been collected.
          type: number
        pregelConductors:
          description: |
            Number of ongoing Pregel jobs.
          type: number
        lowPrioOngoingRequests:
          description: |
            Number of queued low priority requests.
          type: number
        lowPrioQueuedRequests:
          description: |
            Number of ongoing low priority requests.
          type: number
      required:
      - AQLcursors
      - doneJobs
      - lowPrioOngoingRequests
      - lowPrioQueuedRequests
      - pendingJobs
      - pregelConductors
      - softShutdownOngoing
      - transactions
      type: object
    __admin_execute_post_request:
      properties:
        body:
          description: |
            The body to be executed.
          type: string
      required:
      - body
      type: object
    __admin_status_get_200_response:
      example:
        server: server
        agent:
          endpoint: endpoint
          leading: true
          id: id
          leaderId: leaderId
        coordinator:
          isFoxxmaster:
          - isFoxxmaster
          - isFoxxmaster
          foxxmaster:
          - foxxmaster
          - foxxmaster
        agency:
          agencyComm: "{}"
        foxxApi: true
        pid: 0.8008281904610115
        version: version
        mode: mode
        license: license
        operationMode: operationMode
        hostname: hostname
        serverInfo:
          role: role
          address: address
          rebootId: 6.027456183070403
          persistedId: persistedId
          progress: "{}"
          readOnly: true
          state: state
          writeOpsEnabled: true
          maintenance: true
          serverId: serverId
        host: host
      properties:
        server:
          description: |
            Always `"arango"`.
          type: string
        license:
          description: |
            ArangoDB Edition, either `"community"` or `"enterprise"`.
          type: string
        version:
          description: |
            The server version as a string.
          type: string
        mode:
          description: |
            Either `"server"` or `"console"`. **Deprecated**, use `operationMode` instead.
          type: string
        operationMode:
          description: |
            Either `"server"` or `"console"`.
          type: string
        foxxApi:
          description: |
            Whether the Foxx API is enabled.
          type: boolean
        host:
          description: |
            A host identifier defined by the `HOST` or `NODE_NAME` environment variable,
            or a fallback value using a machine identifier or the cluster/Agency address.
          type: string
        hostname:
          description: |
            A hostname defined by the `HOSTNAME` environment variable.
          type: string
        pid:
          description: |
            The process ID of _arangod_.
          type: number
        serverInfo:
          $ref: '#/components/schemas/get_admin_status_server_info'
        agency:
          $ref: '#/components/schemas/get_admin_status_agency'
        coordinator:
          $ref: '#/components/schemas/get_admin_status_coordinator'
        agent:
          $ref: '#/components/schemas/get_admin_status_agent'
      required:
      - foxxApi
      - host
      - license
      - mode
      - operationMode
      - pid
      - server
      - serverInfo
      - version
      type: object
    __admin_license_get_200_response:
      example:
        features:
          expires: 0.8008281904610115
        license: license
        version: 6.027456183070403
      properties:
        features:
          $ref: '#/components/schemas/license_features'
        license:
          description: |
            The encrypted license key in Base64 encoding.
          type: string
        version:
          description: |
            The license version number.
          type: number
      required:
      - features
      - license
      - version
      type: object
    __admin_license_get_request:
      properties:
        license:
          description: |
            The body has to contain the Base64 encoded string wrapped in double quotes.
          type: string
      required:
      - license
      type: object
    __api_query_cache_properties_get_request:
      properties:
        mode:
          description: |2
             the mode the AQL query cache should operate in. Possible values are *off*, *on* or *demand*.
          type: string
        maxResults:
          description: |
            the maximum number of query results that will be stored per database-specific cache.
          format: int64
          type: integer
        maxResultsSize:
          description: |
            the maximum cumulated size of query results that will be stored per database-specific cache.
          format: int64
          type: integer
        maxEntrySize:
          description: |
            the maximum individual size of query results that will be stored per database-specific cache.
          format: int64
          type: integer
        includeSystem:
          description: |
            whether or not to store results of queries that involve system collections.
          type: boolean
      type: object
    __api_tasks__id__delete_request:
      properties:
        name:
          description: |
            The name of the task
          type: string
        command:
          description: |
            The JavaScript code to be executed
          type: string
        params:
          description: |
            The parameters to be passed into command
          type: string
        period:
          description: |
            number of seconds between the executions
          format: int64
          type: integer
        offset:
          description: |
            Number of seconds initial delay
          format: int64
          type: integer
      required:
      - command
      - name
      - params
      type: object
    __api_tasks__id__delete_404_response:
      properties:
        code:
          description: |
            The status code, 404 in this case.
          type: number
        error:
          description: |
            *true* in this case
          type: boolean
      required:
      - code
      - error
      type: object
    __api_tasks_post_400_response:
      properties:
        id:
          description: |
            A string identifying the task
          type: string
        created:
          description: |
            The timestamp when this task was created
          format: float
          type: number
        type:
          description: |
            What type of task is this [ `periodic`, `timed`]
              - periodic are tasks that repeat periodically
              - timed are tasks that execute once at a specific time
          type: string
        period:
          description: |
            this task should run each `period` seconds
          type: number
        offset:
          description: |
            time offset in seconds from the created timestamp
          format: float
          type: number
        command:
          description: |
            the javascript function for this task
          type: string
        database:
          description: |
            the database this task belongs to
          type: string
        code:
          description: |
            The status code, 200 in this case.
          type: number
        error:
          description: |
            *false* in this case
          type: boolean
      required:
      - code
      - command
      - created
      - database
      - error
      - id
      - offset
      - period
      - type
      type: object
    __api_aqlfunction_get_400_response:
      properties:
        error:
          description: |
            boolean flag to indicate whether an error occurred (*true* in this case)
          type: boolean
        code:
          description: |
            the HTTP status code
          format: int64
          type: integer
        result:
          $ref: '#/components/schemas/aql_userfunction_struct'
        errorNum:
          description: |
            the server error number
          format: int64
          type: integer
      required:
      - code
      - error
      - errorNum
      - result
      type: object
    __api_aqlfunction_get_request:
      properties:
        name:
          description: |
            the fully qualified name of the user functions.
          type: string
        code:
          description: |
            a string representation of the function body.
          type: string
        isDeterministic:
          description: |
            an optional boolean value to indicate whether the function
            results are fully deterministic (function return value solely depends on
            the input value and return value is the same for repeated calls with same
            input). The *isDeterministic* attribute is currently not used but may be
            used later for optimizations.
          type: boolean
      required:
      - code
      - name
      type: object
    __api_aqlfunction_get_400_response_1:
      properties:
        error:
          description: |
            boolean flag to indicate whether an error occurred (*true* in this case)
          type: boolean
        code:
          description: |
            the HTTP status code
          format: int64
          type: integer
        isNewlyCreated:
          description: |
            boolean flag to indicate whether the function was newly created (*true* in this case)
          type: boolean
        errorNum:
          description: |
            the server error number
          format: int64
          type: integer
      required:
      - code
      - error
      - errorNum
      - isNewlyCreated
      type: object
    __api_aqlfunction__name__delete_404_response:
      properties:
        error:
          description: |
            boolean flag to indicate whether an error occurred (*true* in this case)
          type: boolean
        code:
          description: |
            the HTTP status code
          format: int64
          type: integer
        deletedCount:
          description: |
            The number of deleted user functions, always `1` when `group` is set to *false*.
            Any number `>= 0` when `group` is set to *true*
          format: int64
          type: integer
        errorNum:
          description: |
            the server error number
          format: int64
          type: integer
        errorMessage:
          description: |
            a descriptive error message
          type: string
      required:
      - code
      - deletedCount
      - error
      - errorMessage
      - errorNum
      type: object
    __admin_server_encryption_post_404_response:
      properties:
        error:
          description: |
            boolean flag to indicate whether an error occurred (*false* in this case)
          type: boolean
        code:
          description: |
            the HTTP status code - 200 in this case
          format: int64
          type: integer
        result:
          $ref: '#/components/schemas/jwt_keys_struct'
      required:
      - code
      - error
      - result
      type: object
    __admin_server_mode_get_request:
      properties:
        mode:
          description: |
            The mode of the server `readonly` or `default`.
          type: string
      required:
      - mode
      type: object
    __admin_server_role_get_200_response:
      example:
        code: 0
        errorNum: 6
        error: true
      properties:
        error:
          description: |
            always *false*
          type: boolean
        code:
          description: |
            the HTTP status code, always 200
          format: int64
          type: integer
        errorNum:
          description: |
            the server error number
          format: int64
          type: integer
      required:
      - code
      - error
      - errorNum
      type: object
    __admin_cluster_rebalance_get_200_response:
      example:
        result:
          leader: "{}"
          shards: "{}"
        code: 0.8008281904610115
        pendingMoveShards: 6.027456183070403
        error: true
      properties:
        code:
          description: |
            The status code.
          type: number
        error:
          description: |
            Whether an error occurred. `false` in this case.
          type: boolean
        result:
          $ref: '#/components/schemas/get_admin_cluster_rebalance_result'
        pendingMoveShards:
          description: |
            The number of pending move shard operations.
          type: number
      required:
      - code
      - error
      - pendingMoveShards
      - result
      type: object
    __admin_cluster_rebalance_get_request:
      properties:
        ? ""
        : $ref: '#/components/schemas/rebalance_compute'
      required:
      - ""
      type: object
    __admin_cluster_rebalance_execute_post_request:
      properties:
        version:
          description: |
            Must be set to `1`.
          type: number
        moves:
          $ref: '#/components/schemas/move_shard_operation'
      required:
      - moves
      - version
      type: object
    __admin_compact_put_request:
      properties:
        changeLevel:
          description: |
            whether or not compacted data should be moved to the minimum possible level.
            The default value is *false*.
          type: boolean
        compactBottomMostLevel:
          description: |
            Whether or not to compact the bottommost level of data.
            The default value is *false*.
          type: boolean
      type: object
    __api_index_inverted_post_request:
      properties:
        type:
          description: |
            Must be equal to `"inverted"`.
          type: string
        name:
          description: |
            An easy-to-remember name for the index to look it up or refer to it in index hints.
            Index names are subject to the same character restrictions as collection names.
            If omitted, a name is auto-generated so that it is unique with respect to the
            collection, e.g. `idx_832910498`.
          type: string
        fields:
          $ref: '#/components/schemas/post_api_index_inverted_fields'
        searchField:
          description: |
            This option only applies if you use the inverted index in a `search-alias` Views.
            You can set the option to `true` to get the same behavior as with `arangosearch`
            Views regarding the indexing of array values as the default. If enabled, both,
            array and primitive values (strings, numbers, etc.) are accepted. Every element
            of an array is indexed according to the `trackListPositions` option.
            If set to `false`, it depends on the attribute path. If it explicitly expands an
            array (`[*]`), then the elements are indexed separately. Otherwise, the array is
            indexed as a whole, but only `geopoint` and `aql` Analyzers accept array inputs.
            You cannot use an array expansion if `searchField` is enabled.
            Default: `false`
          type: boolean
        storedValues:
          $ref: '#/components/schemas/post_api_index_inverted_storedvalues'
        primarySort:
          $ref: '#/components/schemas/post_api_index_inverted_primarysort'
        analyzer:
          description: |
            The name of an Analyzer to use by default. This Analyzer is applied to the
            values of the indexed fields for which you don't define Analyzers explicitly.
            Default: `identity`
          type: string
        features:
          description: |
            A list of Analyzer features. You can set this option to overwrite what features
            are enabled for the default `analyzer`. Possible features:
            - `"frequency"`
            - `"norm"`
            - `"position"`
            - `"offset"`
            Default: the features as defined by the Analyzer itself.
          items:
            type: string
          type: array
        includeAllFields:
          description: |
            This option only applies if you use the inverted index in a `search-alias` Views.
            If set to `true`, then all document attributes are indexed, excluding any
            sub-attributes that are configured in the `fields` array (and their sub-attributes).
            The `analyzer` and `features` properties apply to the sub-attributes.
            Default: `false`
            **Warning**: Using `includeAllFields` for a lot of attributes in combination
            with complex Analyzers may significantly slow down the indexing process.
          type: boolean
        trackListPositions:
          description: |
            This option only applies if you use the inverted index in a `search-alias` Views.
            If set to `true`, then track the value position in arrays for array values.
            For example, when querying a document like `{ attr: [ "valueX", "valueY", "valueZ" ] }`,
            you need to specify the array element, e.g. `doc.attr[1] == "valueY"`.
            If set to `false`, all values in an array are treated as equal alternatives.
            You don't specify an array element in queries, e.g. `doc.attr == "valueY"`, and
            all elements are searched for a match.
          type: boolean
        parallelism:
          description: |
            The number of threads to use for indexing the fields. Default: `2`
          type: integer
        inBackground:
          description: |
            This attribute can be set to `true` to create the index
            in the background, not write-locking the underlying collection for
            as long as if the index is built in the foreground. The default value is `false`.
          type: boolean
        cleanupIntervalStep:
          description: |
            Wait at least this many commits between removing unused files in the
            ArangoSearch data directory (default: 2, to disable use: 0).
            For the case where the consolidation policies merge segments often (i.e. a lot
            of commit+consolidate), a lower value will cause a lot of disk space to be
            wasted.
            For the case where the consolidation policies rarely merge segments (i.e. few
            inserts/deletes), a higher value will impact performance without any added
            benefits.
            _Background:_
              With every "commit" or "consolidate" operation a new state of the View
              internal data-structures is created on disk.
              Old states/snapshots are released once there are no longer any users
              remaining.
              However, the files for the released states/snapshots are left on disk, and
              only removed by "cleanup" operation.
          format: int64
          type: integer
        commitIntervalMsec:
          description: |
            Wait at least this many milliseconds between committing View data store
            changes and making documents visible to queries (default: 1000, to disable
            use: 0).
            For the case where there are a lot of inserts/updates, a lower value, until
            commit, will cause the index not to account for them and memory usage would
            continue to grow.
            For the case where there are a few inserts/updates, a higher value will impact
            performance and waste disk space for each commit call without any added
            benefits.
            _Background:_
              For data retrieval ArangoSearch Views follow the concept of
              "eventually-consistent", i.e. eventually all the data in ArangoDB will be
              matched by corresponding query expressions.
              The concept of ArangoSearch View "commit" operation is introduced to
              control the upper-bound on the time until document addition/removals are
              actually reflected by corresponding query expressions.
              Once a "commit" operation is complete all documents added/removed prior to
              the start of the "commit" operation will be reflected by queries invoked in
              subsequent ArangoDB transactions, in-progress ArangoDB transactions will
              still continue to return a repeatable-read state.
          format: int64
          type: integer
        consolidationIntervalMsec:
          description: |
            Wait at least this many milliseconds between applying 'consolidationPolicy' to
            consolidate View data store and possibly release space on the filesystem
            (default: 1000, to disable use: 0).
            For the case where there are a lot of data modification operations, a higher
            value could potentially have the data store consume more space and file handles.
            For the case where there are a few data modification operations, a lower value
            will impact performance due to no segment candidates available for
            consolidation.
            _Background:_
              For data modification ArangoSearch Views follow the concept of a
              "versioned data store". Thus old versions of data may be removed once there
              are no longer any users of the old data. The frequency of the cleanup and
              compaction operations are governed by 'consolidationIntervalMsec' and the
              candidates for compaction are selected via 'consolidationPolicy'.
          format: int64
          type: integer
        consolidationPolicy:
          $ref: '#/components/schemas/post_api_index_inverted_policy'
        writebufferIdle:
          description: |
            Maximum number of writers (segments) cached in the pool
            (default: 64, use 0 to disable)
          format: int64
          type: integer
        writebufferActive:
          description: |
            Maximum number of concurrent active writers (segments) that perform a
            transaction. Other writers (segments) wait till current active writers
            (segments) finish (default: 0, use 0 to disable)
          format: int64
          type: integer
        writebufferSizeMax:
          description: |
            Maximum memory byte size per writer (segment) before a writer (segment) flush
            is triggered. `0` value turns off this limit for any writer (buffer) and data
            will be flushed periodically based on the value defined for the flush thread
            (ArangoDB server startup option). `0` value should be used carefully due to
            high potential memory consumption
            (default: 33554432, use 0 to disable)
          format: int64
          type: integer
      required:
      - fields
      - type
      type: object
    __api_index_ttl_post_request:
      properties:
        type:
          description: |
            must be equal to *"ttl"*.
          type: string
        name:
          description: |
            An easy-to-remember name for the index to look it up or refer to it in index hints.
            Index names are subject to the same character restrictions as collection names.
            If omitted, a name is auto-generated so that it is unique with respect to the
            collection, e.g. `idx_832910498`.
          type: string
        fields:
          description: |
            an array with exactly one attribute path.
          items:
            type: string
          type: array
        expireAfter:
          description: |
            The time interval (in seconds) from the point in time stored in the `fields`
            attribute after which the documents count as expired. Can be set to `0` to let
            documents expire as soon as the server time passes the point in time stored in
            the document attribute, or to a higher number to delay the expiration.
          type: number
        inBackground:
          description: |
            The optional attribute **inBackground** can be set to *true* to create the index
            in the background, which will not write-lock the underlying collection for
            as long as if the index is built in the foreground. The default value is *false*.
          type: boolean
      required:
      - expireAfter
      - fields
      - type
      type: object
    __api_index_general_post_request:
      properties:
        index-details:
          description: ""
          type: object
      required:
      - index-details
      type: object
    __api_index_geo_post_request:
      properties:
        type:
          description: |
            must be equal to `"geo"`.
          type: string
        name:
          description: |
            An easy-to-remember name for the index to look it up or refer to it in index hints.
            Index names are subject to the same character restrictions as collection names.
            If omitted, a name is auto-generated so that it is unique with respect to the
            collection, e.g. `idx_832910498`.
          type: string
        fields:
          description: |
            An array with one or two attribute paths.
            If it is an array with one attribute path `location`, then a geo-spatial
            index on all documents is created using `location` as path to the
            coordinates. The value of the attribute must be an array with at least two
            double values. The array must contain the latitude (first value) and the
            longitude (second value). All documents, which do not have the attribute
            path or with value that are not suitable, are ignored.
            If it is an array with two attribute paths `latitude` and `longitude`,
            then a geo-spatial index on all documents is created using `latitude`
            and `longitude` as paths the latitude and the longitude. The values of
            the `latitude` and `longitude` attributes must each be a number (double).
            All documents which do not have the attribute paths or which have
            values that are not suitable are ignored.
          items:
            type: string
          type: array
        geoJson:
          description: |
            If a geo-spatial index on a `location` is constructed
            and `geoJson` is `true`, then the order within the array is longitude
            followed by latitude. This corresponds to the format described in
            http://geojson.org/geojson-spec.html#positions
          type: boolean
        inBackground:
          description: |
            The optional attribute **inBackground** can be set to `true` to create the index
            in the background, which will not write-lock the underlying collection for
            as long as if the index is built in the foreground. The default value is `false`.
          type: boolean
      required:
      - fields
      - type
      type: object
    __api_index_persistent_post_request:
      properties:
        type:
          description: |
            Must be equal to `"persistent"`.
          type: string
        name:
          description: |
            An easy-to-remember name for the index to look it up or refer to it in index hints.
            Index names are subject to the same character restrictions as collection names.
            If omitted, a name is auto-generated so that it is unique with respect to the
            collection, e.g. `idx_832910498`.
          type: string
        fields:
          description: |
            An array of attribute paths.
            The `.` character denotes sub-attributes in attribute paths. Attributes with
            literal `.` in their name cannot be indexed. Attributes with the name `_id`
            cannot be indexed either, neither as a top-level attribute nor as a sub-attribute.
            You can expand one array attribute with `[*]`.
          items:
            type: string
          type: array
        storedValues:
          description: "The optional `storedValues` attribute can contain an array\
            \ of paths to additional \nattributes to store in the index. These additional\
            \ attributes cannot be used for\nindex lookups or for sorting, but they\
            \ can be used for projections. This allows an\nindex to fully cover more\
            \ queries and avoid extra document lookups.\nThe maximum number of attributes\
            \ in `storedValues` is 32.\n\nIt is not possible to create multiple indexes\
            \ with the same `fields` attributes\nand uniqueness but different `storedValues`\
            \ attributes. That means the value of\n`storedValues` is not considered\
            \ by index creation calls when checking if an\nindex is already present\
            \ or needs to be created.\n\nIn unique indexes, only the attributes in\
            \ `fields` are checked for uniqueness,\nbut the attributes in `storedValues`\
            \ are not checked for their uniqueness. \nNon-existing attributes are\
            \ stored as `null` values inside `storedValues`.\n\n"
          items:
            type: string
          type: array
        unique:
          description: |
            If `true`, then create a unique index. Defaults to `false`.
            In unique indexes, only the attributes in `fields` are checked for uniqueness,
            but the attributes in `storedValues` are not checked for their uniqueness.
          type: boolean
        sparse:
          description: |
            If `true`, then create a sparse index. Defaults to `false`.
          type: boolean
        deduplicate:
          description: |
            The attribute controls whether inserting duplicate index values
            from the same document into a unique array index will lead to a unique constraint
            error or not. The default value is `true`, so only a single instance of each
            non-unique index value will be inserted into the index per document. Trying to
            insert a value into the index that already exists in the index will always fail,
            regardless of the value of this attribute.
          type: boolean
        estimates:
          description: |
            This attribute controls whether index selectivity estimates are maintained for the
            index. Not maintaining index selectivity estimates can have a slightly positive
            impact on write performance.
            The downside of turning off index selectivity estimates will be that
            the query optimizer will not be able to determine the usefulness of different
            competing indexes in AQL queries when there are multiple candidate indexes to
            choose from.
            The `estimates` attribute is optional and defaults to `true` if not set. It will
            have no effect on indexes other than `persistent`.
          type: boolean
        cacheEnabled:
          description: |
            This attribute controls whether an extra in-memory hash cache is
            created for the index. The hash cache can be used to speed up index lookups.
            The cache can only be used for queries that look up all index attributes via
            an equality lookup (`==`). The hash cache cannot be used for range scans,
            partial lookups or sorting.
            The cache will be populated lazily upon reading data from the index. Writing data
            into the collection or updating existing data will invalidate entries in the
            cache. The cache may have a negative effect on performance in case index values
            are updated more often than they are read.
            The maximum size of cache entries that can be stored is currently 4 MB, i.e.
            the cumulated size of all index entries for any index lookup value must be
            less than 4 MB. This limitation is there to avoid storing the index entries
            of "super nodes" in the cache.
            `cacheEnabled` defaults to `false` and should only be used for indexes that
            are known to benefit from an extra layer of caching.
          type: boolean
        inBackground:
          description: |
            This attribute can be set to `true` to create the index
            in the background, which will not write-lock the underlying collection for
            as long as if the index is built in the foreground. The default value is `false`.
          type: boolean
      required:
      - fields
      - type
      type: object
    __api_index_multi_dim_post_request:
      properties:
        type:
          description: |
            must be equal to *"zkd"*.
          type: string
        name:
          description: |
            An easy-to-remember name for the index to look it up or refer to it in index hints.
            Index names are subject to the same character restrictions as collection names.
            If omitted, a name is auto-generated so that it is unique with respect to the
            collection, e.g. `idx_832910498`.
          type: string
        fields:
          description: |
            an array of attribute names used for each dimension. Array expansions are not allowed.
          items:
            type: string
          type: array
        unique:
          description: |
            if *true*, then create a unique index.
          type: boolean
        inBackground:
          description: |
            The optional attribute **inBackground** can be set to *true* to create the index
            in the background, which will not write-lock the underlying collection for
            as long as if the index is built in the foreground. The default value is *false*.
          type: boolean
        fieldValueTypes:
          description: |
            must be equal to *"double"*. Currently only doubles are supported as values.
          type: string
      required:
      - fieldValueTypes
      - fields
      - type
      type: object
    __api_index_fulltext_post_request:
      properties:
        type:
          description: |
            must be equal to *"fulltext"*.
          type: string
        name:
          description: |
            An easy-to-remember name for the index to look it up or refer to it in index hints.
            Index names are subject to the same character restrictions as collection names.
            If omitted, a name is auto-generated so that it is unique with respect to the
            collection, e.g. `idx_832910498`.
          type: string
        fields:
          description: |
            an array of attribute names. Currently, the array is limited
            to exactly one attribute.
          items:
            type: string
          type: array
        minLength:
          description: |
            Minimum character length of words to index. Will default
            to a server-defined value if unspecified. It is thus recommended to set
            this value explicitly when creating the index.
          format: int64
          type: integer
        inBackground:
          description: |
            The optional attribute **inBackground** can be set to *true* to create the index
            in the background, which will not write-lock the underlying collection for
            as long as if the index is built in the foreground. The default value is *false*.
          type: boolean
      required:
      - fields
      - minLength
      - type
      type: object
    __api_document__collection___key__delete_request:
      properties:
        document:
          description: |
            A JSON representation of a single document.
          type: object
      required:
      - document
      type: object
    __api_document__collection___key__delete_request_1:
      properties:
        document:
          description: |
            A JSON representation of a document update as an object.
          type: object
      required:
      - document
      type: object
    __api_document__collection__delete_request:
      properties:
        documents:
          description: |
            A JSON representation of an array of documents.
          type: object
      required:
      - documents
      type: object
    __api_document__collection__delete_request_1:
      properties:
        data:
          description: |
            A JSON representation of a single document.
          type: object
      required:
      - data
      type: object
    __api_document__collection__delete_request_2:
      properties:
        array:
          description: |
            A JSON array of strings or documents.
          type: object
      required:
      - array
      type: object
    __api_document__collection__delete_request_3:
      properties:
        documents:
          description: |
            A JSON representation of an array of document updates as objects.
          type: object
      required:
      - documents
      type: object
    __api_document__collection__multiple_post_request:
      properties:
        data:
          description: |
            An array of documents to create.
          type: object
      required:
      - data
      type: object
    __api_batch_post_request:
      properties:
        body:
          description: |
            The multipart batch request, consisting of the envelope and the individual
            batch parts.
          type: string
      required:
      - body
      type: object
    __api_import_document_post_request:
      properties:
        documents:
          description: |
            The body must consist of JSON-encoded arrays of attribute values, with one
            line per document. The first row of the request must be a JSON-encoded
            array of attribute names. These attribute names are used for the data in the
            subsequent lines.
          type: string
      required:
      - documents
      type: object
    __api_import_json_post_request:
      properties:
        documents:
          description: |
            The body must either be a JSON-encoded array of objects or a string with
            multiple JSON objects separated by newlines.
          type: string
      required:
      - documents
      type: object
    __api_foxx_configuration_get_request:
      properties:
        data:
          description: |
            A JSON object mapping configuration option names to their new values.
            Any omitted options will be reset to their default values or marked as unconfigured.
          type: object
      required:
      - data
      type: object
    __api_foxx_configuration_get_request_1:
      properties:
        data:
          description: |
            A JSON object mapping configuration option names to their new values.
            Any omitted options will be ignored.
          type: object
      required:
      - data
      type: object
    __api_foxx_dependencies_get_request:
      properties:
        data:
          description: |
            A JSON object mapping dependency names to their new mount paths.
            Any omitted dependencies will be disabled.
          type: object
      required:
      - data
      type: object
    __api_foxx_dependencies_get_request_1:
      properties:
        data:
          description: |
            A JSON object mapping dependency names to their new mount paths.
            Any omitted dependencies will be ignored.
          type: object
      required:
      - data
      type: object
    __api_foxx_scripts__name__post_request:
      properties:
        data:
          description: |
            An arbitrary JSON value that will be parsed and passed to the
            script as its first argument.
          type: object
      type: object
    __api_collection__collection_name__properties_get_200_response:
      example:
        ? ""
        : keyOptions:
            lastValue: 0
            allowUserKeys: true
            type: type
          schema: "{}"
          replicationFactor: 1
          computedValues:
          - computeOn:
            - computeOn
            - computeOn
            keepNull: true
            expression: expression
            failOnWarning: true
            name: name
            overwrite: true
          - computeOn:
            - computeOn
            - computeOn
            keepNull: true
            expression: expression
            failOnWarning: true
            name: name
            overwrite: true
          numberOfShards: 6
          waitForSync: true
          shardingStrategy: shardingStrategy
          writeConcern: 5
          type: 5
          isSmart: true
          isSystem: true
          cacheEnabled: true
          shardKeys:
          - shardKeys
          - shardKeys
          name: name
          smartGraphAttribute: smartGraphAttribute
          id: id
          smartJoinAttribute: smartJoinAttribute
          globallyUniqueId: globallyUniqueId
      properties:
        ? ""
        : $ref: '#/components/schemas/collection_info'
      required:
      - ""
      type: object
    __api_collection__collection_name__properties_get_request:
      properties:
        waitForSync:
          description: |
            If *true* then the data is synchronized to disk before returning from a
            document create, update, replace or removal operation. (default: false)
          type: boolean
        cacheEnabled:
          description: |
            Whether the in-memory hash cache for documents should be enabled for this
            collection (default: *false*). Can be controlled globally with the `--cache.size`
            startup option. The cache can speed up repeated reads of the same documents via
            their document keys. If the same documents are not fetched often or are
            modified frequently, then you may disable the cache to avoid the maintenance
            costs.
          type: boolean
        schema:
          description: |
            Optional object that specifies the collection level schema for
            documents. The attribute keys `rule`, `level` and `message` must follow the
            rules documented in [Document Schema Validation](https://www.arangodb.com/docs/stable/data-modeling-documents-schema-validation.html)
          type: object
        computedValues:
          $ref: '#/components/schemas/put_api_collection_properties_computed_field'
        replicationFactor:
          description: |
            (The default is *1*): in a cluster, this attribute determines how many copies
            of each shard are kept on different DB-Servers. The value 1 means that only one
            copy (no synchronous replication) is kept. A value of k means that k-1 replicas
            are kept. It can also be the string `"satellite"` for a SatelliteCollection,
            where the replication factor is matched to the number of DB-Servers
            (Enterprise Edition only).
            Any two copies reside on different DB-Servers. Replication between them is
            synchronous, that is, every write operation to the "leader" copy will be replicated
            to all "follower" replicas, before the write operation is reported successful.
            If a server fails, this is detected automatically and one of the servers holding
            copies take over, usually without an error being reported.
          format: int64
          type: integer
        writeConcern:
          description: |
            Write concern for this collection (default: 1).
            It determines how many copies of each shard are required to be
            in sync on the different DB-Servers. If there are less then these many copies
            in the cluster a shard will refuse to write. Writes to shards with enough
            up-to-date copies will succeed at the same time however. The value of
            *writeConcern* can not be larger than *replicationFactor*. _(cluster only)_
          format: int64
          type: integer
      type: object
    __api_collection_get_request:
      properties:
        name:
          description: |
            The name of the collection.
          type: string
        waitForSync:
          description: |
            If `true` then the data is synchronized to disk before returning from a
            document create, update, replace or removal operation. (Default: `false`)
          type: boolean
        isSystem:
          description: |
            If `true`, create a system collection. In this case, the `collection-name`
            should start with an underscore. End-users should normally create non-system
            collections only. API implementors may be required to create system
            collections in very special occasions, but normally a regular collection will do.
            (The default is `false`)
          type: boolean
        schema:
          description: |
            Optional object that specifies the collection level schema for
            documents. The attribute keys `rule`, `level` and `message` must follow the
            rules documented in [Document Schema Validation](https://www.arangodb.com/docs/stable/documents-schema-validation.html)
          type: object
        computedValues:
          $ref: '#/components/schemas/post_api_collection_computed_field'
        keyOptions:
          $ref: '#/components/schemas/post_api_collection_opts'
        type:
          description: |
            (The default is `2`): the type of the collection to create.
            The following values for `type` are valid:
            - `2`: document collection
            - `3`: edge collection
          format: int64
          type: integer
        cacheEnabled:
          description: |
            Whether the in-memory hash cache for documents should be enabled for this
            collection (default: `false`). Can be controlled globally with the `--cache.size`
            startup option. The cache can speed up repeated reads of the same documents via
            their document keys. If the same documents are not fetched often or are
            modified frequently, then you may disable the cache to avoid the maintenance
            costs.
          type: boolean
        numberOfShards:
          description: |
            (The default is `1`): in a cluster, this value determines the
            number of shards to create for the collection. In a single
            server setup, this option is meaningless.
          format: int64
          type: integer
        shardKeys:
          description: |
            (The default is `[ "_key" ]`): in a cluster, this attribute determines
            which document attributes are used to determine the target shard for documents.
            Documents are sent to shards based on the values of their shard key attributes.
            The values of all shard key attributes in a document are hashed,
            and the hash value is used to determine the target shard.
            **Note**: Values of shard key attributes cannot be changed once set.
              This option is meaningless in a single server setup.
          type: string
        replicationFactor:
          description: |
            (The default is `1`): in a cluster, this attribute determines how many copies
            of each shard are kept on different DB-Servers. The value 1 means that only one
            copy (no synchronous replication) is kept. A value of k means that k-1 replicas
            are kept. It can also be the string `"satellite"` for a SatelliteCollection,
            where the replication factor is matched to the number of DB-Servers
            (Enterprise Edition only).
            Any two copies reside on different DB-Servers. Replication between them is
            synchronous, that is, every write operation to the "leader" copy will be replicated
            to all "follower" replicas, before the write operation is reported successful.
            If a server fails, this is detected automatically and one of the servers holding
            copies take over, usually without an error being reported.
          format: int64
          type: integer
        writeConcern:
          description: |
            Write concern for this collection (default: 1).
            It determines how many copies of each shard are required to be
            in sync on the different DB-Servers. If there are less then these many copies
            in the cluster a shard will refuse to write. Writes to shards with enough
            up-to-date copies will succeed at the same time however. The value of
            `writeConcern` cannot be larger than `replicationFactor`. _(cluster only)_
          format: int64
          type: integer
        shardingStrategy:
          description: |
            This attribute specifies the name of the sharding strategy to use for
            the collection. Since ArangoDB 3.4 there are different sharding strategies
            to select from when creating a new collection. The selected `shardingStrategy`
            value remains fixed for the collection and cannot be changed afterwards.
            This is important to make the collection keep its sharding settings and
            always find documents already distributed to shards using the same
            initial sharding algorithm.
            The available sharding strategies are:
            - `community-compat`: default sharding used by ArangoDB
              Community Edition before version 3.4
            - `enterprise-compat`: default sharding used by ArangoDB
              Enterprise Edition before version 3.4
            - `enterprise-smart-edge-compat`: default sharding used by smart edge
              collections in ArangoDB Enterprise Edition before version 3.4
            - `hash`: default sharding used for new collections starting from version 3.4
              (excluding smart edge collections)
            - `enterprise-hash-smart-edge`: default sharding used for new
              smart edge collections starting from version 3.4
            - `enterprise-hex-smart-vertex`: sharding used for vertex collections of
              EnterpriseGraphs
            If no sharding strategy is specified, the default is `hash` for
            all normal collections, `enterprise-hash-smart-edge` for all smart edge
            collections, and `enterprise-hex-smart-vertex` for EnterpriseGraph
            vertex collections (the latter two require the *Enterprise Edition* of ArangoDB).
            Manually overriding the sharding strategy does not yet provide a
            benefit, but it may later in case other sharding strategies are added.
          type: string
        distributeShardsLike:
          description: |
            The name of another collection. If this property is set in a cluster, the
            collection copies the `replicationFactor`, `numberOfShards` and `shardingStrategy`
            properties from the specified collection (referred to as the _prototype collection_)
            and distributes the shards of this collection in the same way as the shards of
            the other collection. In an Enterprise Edition cluster, this data co-location is
            utilized to optimize queries.
            You need to use the same number of `shardKeys` as the prototype collection, but
            you can use different attributes.
            The default is `""`.
            **Note**: Using this parameter has consequences for the prototype
            collection. It can no longer be dropped, before the sharding-imitating
            collections are dropped. Equally, backups and restores of imitating
            collections alone generate warnings (which can be overridden)
            about a missing sharding prototype.
          type: string
        isSmart:
          description: |
            Whether the collection is for a SmartGraph or EnterpriseGraph
            (Enterprise Edition only). This is an internal property.
          type: boolean
        isDisjoint:
          description: |
            Whether the collection is for a Disjoint SmartGraph
            (Enterprise Edition only). This is an internal property.
          type: boolean
        smartGraphAttribute:
          description: |
            The attribute that is used for sharding: vertices with the same value of
            this attribute are placed in the same shard. All vertices are required to
            have this attribute set and it has to be a string. Edges derive the
            attribute from their connected vertices.
            This feature can only be used in the *Enterprise Edition*.
          type: string
        smartJoinAttribute:
          description: |
            In an *Enterprise Edition* cluster, this attribute determines an attribute
            of the collection that must contain the shard key value of the referred-to
            SmartJoin collection. Additionally, the shard key for a document in this
            collection must contain the value of this attribute, followed by a colon,
            followed by the actual primary key of the document.
            This feature can only be used in the *Enterprise Edition* and requires the
            `distributeShardsLike` attribute of the collection to be set to the name
            of another collection. It also requires the `shardKeys` attribute of the
            collection to be set to a single shard key attribute, with an additional ':'
            at the end.
            A further restriction is that whenever documents are stored or updated in the
            collection, the value stored in the `smartJoinAttribute` must be a string.
          type: string
      required:
      - name
      type: object
    __api_collection__collection_name__figures_get_404_response:
      properties:
        count:
          description: |
            The number of documents currently present in the collection.
          format: int64
          type: integer
        figures:
          $ref: '#/components/schemas/collection_figures'
      required:
      - count
      - figures
      type: object
    __api_collection__collection_name__responsibleShard_put_request:
      properties:
        document:
          description: |
            The body must consist of a JSON object with at least the shard key
            attributes set to some values.
          type: object
      required:
      - document
      type: object
    __api_database_get_request:
      properties:
        name:
          description: |
            Has to contain a valid database name. The name must conform to the selected
            naming convention for databases. If the name contains Unicode characters, the
            name must be [NFC-normalized](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms).
            Non-normalized names will be rejected by arangod.
          type: string
        options:
          $ref: '#/components/schemas/get_api_database_new_OPTIONS'
        users:
          $ref: '#/components/schemas/get_api_database_new_USERS'
      required:
      - name
      type: object
    __api_view_searchalias_post_request:
      properties:
        name:
          description: |
            The name of the View.
          type: string
        type:
          description: |
            The type of the View. Must be equal to `"search-alias"`.
            This option is immutable.
          type: string
        indexes:
          $ref: '#/components/schemas/post_api_view_searchalias_indexes'
      required:
      - name
      - type
      type: object
    __api_view__view_name__properties_searchalias_patch_request:
      properties:
        indexes:
          $ref: '#/components/schemas/put_api_view_searchalias_indexes'
      type: object
    __api_view__view_name__properties_searchalias_patch_404_response:
      properties:
        id:
          description: |
            The identifier of the View.
          type: string
        name:
          description: |
            The name of the View.
          type: string
        type:
          description: |
            The View type (`"search-alias"`).
          type: string
        indexes:
          $ref: '#/components/schemas/put_api_view_searchalias_indexes_reply'
      required:
      - id
      - indexes
      - name
      - type
      type: object
    __api_view__view_name__properties_searchalias_patch_request_1:
      properties:
        indexes:
          $ref: '#/components/schemas/patch_api_view_searchalias_indexes'
      type: object
    __api_view__view_name__properties_searchalias_patch_404_response_1:
      properties:
        id:
          description: |
            The identifier of the View.
          type: string
        name:
          description: |
            The name of the View.
          type: string
        type:
          description: |
            The View type (`"search-alias"`).
          type: string
        indexes:
          $ref: '#/components/schemas/patch_api_view_searchalias_indexes_reply'
      required:
      - id
      - indexes
      - name
      - type
      type: object
    __api_view_arangosearch_post_request:
      properties:
        name:
          description: |
            The name of the View.
          type: string
        type:
          description: |
            The type of the View. Must be equal to `"arangosearch"`.
            This option is immutable.
          type: string
        links:
          description: |
            Expects an object with the attribute keys being names of to be linked collections,
            and the link properties as attribute values. See
            [ArangoSearch View Link Properties](https://www.arangodb.com/docs/stable/arangosearch-views.html#link-properties)
            for details.
          type: object
        primarySort:
          description: |+
            A primary sort order can be defined to enable an AQL optimization. If a query
            iterates over all documents of a View, wants to sort them by attribute values
            and the (left-most) fields to sort by as well as their sorting direction match
            with the *primarySort* definition, then the `SORT` operation is optimized away.
            This option is immutable.

            Expects an array of objects, each specifying a field (attribute path) and a
            sort direction (`"asc` for ascending, `"desc"` for descending):
            `[ { "field": "attr", "direction": "asc"}, … ]`

          format: object
          items:
            type: object
          type: array
        primarySortCompression:
          description: |
            Defines how to compress the primary sort data (introduced in v3.7.1).
            ArangoDB v3.5 and v3.6 always compress the index using LZ4.
            This option is immutable.
            - `"lz4"` (default): use LZ4 fast compression.
            - `"none"`: disable compression to trade space for speed.
          type: string
        storedValues:
          description: |
            An array of objects to describe which document attributes to store in the View
            index (introduced in v3.7.1). It can then cover search queries, which means the
            data can be taken from the index directly and accessing the storage engine can
            be avoided.
            Each object is expected in the form
            `{ "fields": [ "attr1", "attr2", ... "attrN" ], "compression": "none" }`,
            where the required `fields` attribute is an array of strings with one or more
            document attribute paths. The specified attributes are placed into a single
            column of the index. A column with all fields that are involved in common
            search queries is ideal for performance. The column should not include too many
            unneeded fields however. The optional `compression` attribute defines the
            compression type used for the internal column-store, which can be `"lz4"`
            (LZ4 fast compression, default) or `"none"` (no compression).
            This option is immutable. Not to be confused with `storeValues`, which allows
            to store meta data about attribute values in the View index.
          format: object
          items:
            type: object
          type: array
        cleanupIntervalStep:
          description: |
            Wait at least this many commits between removing unused files in the
            ArangoSearch data directory (default: 2, to disable use: 0).
            For the case where the consolidation policies merge segments often (i.e. a lot
            of commit+consolidate), a lower value will cause a lot of disk space to be
            wasted.
            For the case where the consolidation policies rarely merge segments (i.e. few
            inserts/deletes), a higher value will impact performance without any added
            benefits.
            _Background:_
              With every "commit" or "consolidate" operation a new state of the View
              internal data-structures is created on disk.
              Old states/snapshots are released once there are no longer any users
              remaining.
              However, the files for the released states/snapshots are left on disk, and
              only removed by "cleanup" operation.
          format: int64
          type: integer
        commitIntervalMsec:
          description: |
            Wait at least this many milliseconds between committing View data store
            changes and making documents visible to queries (default: 1000, to disable
            use: 0).
            For the case where there are a lot of inserts/updates, a lower value, until
            commit, will cause the index not to account for them and memory usage would
            continue to grow.
            For the case where there are a few inserts/updates, a higher value will impact
            performance and waste disk space for each commit call without any added
            benefits.
            _Background:_
              For data retrieval ArangoSearch Views follow the concept of
              "eventually-consistent", i.e. eventually all the data in ArangoDB will be
              matched by corresponding query expressions.
              The concept of ArangoSearch View "commit" operation is introduced to
              control the upper-bound on the time until document addition/removals are
              actually reflected by corresponding query expressions.
              Once a "commit" operation is complete all documents added/removed prior to
              the start of the "commit" operation will be reflected by queries invoked in
              subsequent ArangoDB transactions, in-progress ArangoDB transactions will
              still continue to return a repeatable-read state.
          format: int64
          type: integer
        consolidationIntervalMsec:
          description: |
            Wait at least this many milliseconds between applying 'consolidationPolicy' to
            consolidate View data store and possibly release space on the filesystem
            (default: 10000, to disable use: 0).
            For the case where there are a lot of data modification operations, a higher
            value could potentially have the data store consume more space and file handles.
            For the case where there are a few data modification operations, a lower value
            will impact performance due to no segment candidates available for
            consolidation.
            _Background:_
              For data modification ArangoSearch Views follow the concept of a
              "versioned data store". Thus old versions of data may be removed once there
              are no longer any users of the old data. The frequency of the cleanup and
              compaction operations are governed by 'consolidationIntervalMsec' and the
              candidates for compaction are selected via 'consolidationPolicy'.
          format: int64
          type: integer
        consolidationPolicy:
          description: |
            The consolidation policy to apply for selecting which segments should be merged
            (default: {})
            _Background:_
              With each ArangoDB transaction that inserts documents one or more
              ArangoSearch internal segments gets created.
              Similarly for removed documents the segments that contain such documents
              will have these documents marked as 'deleted'.
              Over time this approach causes a lot of small and sparse segments to be
              created.
              A "consolidation" operation selects one or more segments and copies all of
              their valid documents into a single new segment, thereby allowing the
              search algorithm to perform more optimally and for extra file handles to be
              released once old segments are no longer used.
            Sub-properties:
              - `type` (string, _optional_):
                The segment candidates for the "consolidation" operation are selected based
                upon several possible configurable formulas as defined by their types.
                The currently supported types are:
                - `"tier"` (default): consolidate based on segment byte size and live
                  document count as dictated by the customization attributes. If this type
                  is used, then below `segments*` and `minScore` properties are available.
                - `"bytes_accum"`: consolidate if and only if
                  `{threshold} > (segment_bytes + sum_of_merge_candidate_segment_bytes) / all_segment_bytes`
                  i.e. the sum of all candidate segment byte size is less than the total
                  segment byte size multiplied by the `{threshold}`. If this type is used,
                  then below `threshold` property is available.
              - `threshold` (number, _optional_): value in the range `[0.0, 1.0]`
              - `segmentsBytesFloor` (number, _optional_): Defines the value (in bytes) to
                treat all smaller segments as equal for consolidation selection
                (default: 2097152)
              - `segmentsBytesMax` (number, _optional_): Maximum allowed size of all
                consolidated segments in bytes (default: 5368709120)
              - `segmentsMax` (number, _optional_): The maximum number of segments that will
                be evaluated as candidates for consolidation (default: 10)
              - `segmentsMin` (number, _optional_): The minimum number of segments that will
                be evaluated as candidates for consolidation (default: 1)
              - `minScore` (number, _optional_): (default: 0)
          type: object
        writebufferIdle:
          description: |
            Maximum number of writers (segments) cached in the pool
            (default: 64, use 0 to disable, immutable)
          format: int64
          type: integer
        writebufferActive:
          description: |
            Maximum number of concurrent active writers (segments) that perform a
            transaction. Other writers (segments) wait till current active writers
            (segments) finish (default: 0, use 0 to disable, immutable)
          format: int64
          type: integer
        writebufferSizeMax:
          description: |
            Maximum memory byte size per writer (segment) before a writer (segment) flush
            is triggered. `0` value turns off this limit for any writer (buffer) and data
            will be flushed periodically based on the value defined for the flush thread
            (ArangoDB server startup option). `0` value should be used carefully due to
            high potential memory consumption
            (default: 33554432, use 0 to disable, immutable)
          format: int64
          type: integer
      required:
      - name
      - type
      type: object
    __api_view__view_name__properties_ArangoSearch_patch_request:
      properties:
        links:
          description: |
            Expects an object with the attribute keys being names of to be linked collections,
            and the link properties as attribute values. See
            [ArangoSearch View Link Properties](https://www.arangodb.com/docs/stable/arangosearch-views.html#link-properties)
            for details.
          type: object
        cleanupIntervalStep:
          description: |
            Wait at least this many commits between removing unused files in the
            ArangoSearch data directory (default: 2, to disable use: 0).
            For the case where the consolidation policies merge segments often (i.e. a lot
            of commit+consolidate), a lower value will cause a lot of disk space to be
            wasted.
            For the case where the consolidation policies rarely merge segments (i.e. few
            inserts/deletes), a higher value will impact performance without any added
            benefits.
            _Background:_
              With every "commit" or "consolidate" operation a new state of the View
              internal data-structures is created on disk.
              Old states/snapshots are released once there are no longer any users
              remaining.
              However, the files for the released states/snapshots are left on disk, and
              only removed by "cleanup" operation.
          format: int64
          type: integer
        commitIntervalMsec:
          description: |
            Wait at least this many milliseconds between committing View data store
            changes and making documents visible to queries (default: 1000, to disable
            use: 0).
            For the case where there are a lot of inserts/updates, a lower value, until
            commit, will cause the index not to account for them and memory usage would
            continue to grow.
            For the case where there are a few inserts/updates, a higher value will impact
            performance and waste disk space for each commit call without any added
            benefits.
            _Background:_
              For data retrieval ArangoSearch Views follow the concept of
              "eventually-consistent", i.e. eventually all the data in ArangoDB will be
              matched by corresponding query expressions.
              The concept of ArangoSearch View "commit" operation is introduced to
              control the upper-bound on the time until document addition/removals are
              actually reflected by corresponding query expressions.
              Once a "commit" operation is complete all documents added/removed prior to
              the start of the "commit" operation will be reflected by queries invoked in
              subsequent ArangoDB transactions, in-progress ArangoDB transactions will
              still continue to return a repeatable-read state.
          format: int64
          type: integer
        consolidationIntervalMsec:
          description: |
            Wait at least this many milliseconds between applying 'consolidationPolicy' to
            consolidate View data store and possibly release space on the filesystem
            (default: 10000, to disable use: 0).
            For the case where there are a lot of data modification operations, a higher
            value could potentially have the data store consume more space and file handles.
            For the case where there are a few data modification operations, a lower value
            will impact performance due to no segment candidates available for
            consolidation.
            _Background:_
              For data modification ArangoSearch Views follow the concept of a
              "versioned data store". Thus old versions of data may be removed once there
              are no longer any users of the old data. The frequency of the cleanup and
              compaction operations are governed by 'consolidationIntervalMsec' and the
              candidates for compaction are selected via 'consolidationPolicy'.
          format: int64
          type: integer
        consolidationPolicy:
          description: |
            The consolidation policy to apply for selecting which segments should be merged
            (default: {})
            _Background:_
              With each ArangoDB transaction that inserts documents one or more
              ArangoSearch internal segments gets created.
              Similarly for removed documents the segments that contain such documents
              will have these documents marked as 'deleted'.
              Over time this approach causes a lot of small and sparse segments to be
              created.
              A "consolidation" operation selects one or more segments and copies all of
              their valid documents into a single new segment, thereby allowing the
              search algorithm to perform more optimally and for extra file handles to be
              released once old segments are no longer used.
            Sub-properties:
              - `type` (string, _optional_):
                The segment candidates for the "consolidation" operation are selected based
                upon several possible configurable formulas as defined by their types.
                The currently supported types are:
                - `"tier"` (default): consolidate based on segment byte size and live
                  document count as dictated by the customization attributes. If this type
                  is used, then below `segments*` and `minScore` properties are available.
                - `"bytes_accum"`: consolidate if and only if
                  `{threshold} > (segment_bytes + sum_of_merge_candidate_segment_bytes) / all_segment_bytes`
                  i.e. the sum of all candidate segment byte size is less than the total
                  segment byte size multiplied by the `{threshold}`. If this type is used,
                  then below `threshold` property is available.
              - `threshold` (number, _optional_): value in the range `[0.0, 1.0]`
              - `segmentsBytesFloor` (number, _optional_): Defines the value (in bytes) to
                treat all smaller segments as equal for consolidation selection
                (default: 2097152)
              - `segmentsBytesMax` (number, _optional_): Maximum allowed size of all
                consolidated segments in bytes (default: 5368709120)
              - `segmentsMax` (number, _optional_): The maximum number of segments that will
                be evaluated as candidates for consolidation (default: 10)
              - `segmentsMin` (number, _optional_): The minimum number of segments that will
                be evaluated as candidates for consolidation (default: 1)
              - `minScore` (number, _optional_): (default: 0)
          type: object
      type: object
    __api_replication_applier_config_get_request:
      properties:
        endpoint:
          description: |
            the logger server to connect to (e.g. "tcp://192.168.173.13:8529"). The endpoint must be specified.
          type: string
        database:
          description: |
            the name of the database on the endpoint. If not specified, defaults to the current local database name.
          type: string
        username:
          description: |
            an optional ArangoDB username to use when connecting to the endpoint.
          type: string
        password:
          description: |
            the password to use when connecting to the endpoint.
          type: string
        maxConnectRetries:
          description: |
            the maximum number of connection attempts the applier
            will make in a row. If the applier cannot establish a connection to the
            endpoint in this number of attempts, it will stop itself.
          format: int64
          type: integer
        connectTimeout:
          description: |
            the timeout (in seconds) when attempting to connect to the
            endpoint. This value is used for each connection attempt.
          format: int64
          type: integer
        requestTimeout:
          description: |
            the timeout (in seconds) for individual requests to the endpoint.
          format: int64
          type: integer
        chunkSize:
          description: |
            the requested maximum size for log transfer packets that
            is used when the endpoint is contacted.
          format: int64
          type: integer
        autoStart:
          description: |
            whether or not to auto-start the replication applier on
            (next and following) server starts
          type: boolean
        adaptivePolling:
          description: |
            if set to *true*, the replication applier will fall
            to sleep for an increasingly long period in case the logger server at the
            endpoint does not have any more replication events to apply. Using
            adaptive polling is thus useful to reduce the amount of work for both the
            applier and the logger server for cases when there are only infrequent
            changes. The downside is that when using adaptive polling, it might take
            longer for the replication applier to detect that there are new replication
            events on the logger server.
            Setting *adaptivePolling* to false will make the replication applier
            contact the logger server in a constant interval, regardless of whether
            the logger server provides updates frequently or seldom.
          type: boolean
        includeSystem:
          description: |
            whether or not system collection operations will be applied
          type: boolean
        autoResync:
          description: |
            whether or not the follower should perform a full automatic resynchronization
            with the leader in case the leader cannot serve log data requested by the
            follower, or when the replication is started and no tick value can be found.
          type: boolean
        autoResyncRetries:
          description: |
            number of resynchronization retries that will be performed in a row when
            automatic resynchronization is enabled and kicks in. Setting this to *0*
            will
            effectively disable *autoResync*. Setting it to some other value will limit
            the number of retries that are performed. This helps preventing endless
            retries
            in case resynchronizations always fail.
          format: int64
          type: integer
        initialSyncMaxWaitTime:
          description: |
            the maximum wait time (in seconds) that the initial synchronization will
            wait for a response from the leader when fetching initial collection data.
            This wait time can be used to control after what time the initial
            synchronization
            will give up waiting for a response and fail. This value is relevant even
            for continuous replication when *autoResync* is set to *true* because this
            may re-start the initial synchronization when the leader cannot provide
            log data the follower requires.
            This value will be ignored if set to *0*.
          format: int64
          type: integer
        connectionRetryWaitTime:
          description: |
            the time (in seconds) that the applier will intentionally idle before
            it retries connecting to the leader in case of connection problems.
            This value will be ignored if set to *0*.
          format: int64
          type: integer
        idleMinWaitTime:
          description: |
            the minimum wait time (in seconds) that the applier will intentionally idle
            before fetching more log data from the leader in case the leader has
            already sent all its log data. This wait time can be used to control the
            frequency with which the replication applier sends HTTP log fetch requests
            to the leader in case there is no write activity on the leader.
            This value will be ignored if set to *0*.
          format: int64
          type: integer
        idleMaxWaitTime:
          description: |
            the maximum wait time (in seconds) that the applier will intentionally idle
            before fetching more log data from the leader in case the leader has
            already sent all its log data and there have been previous log fetch attempts
            that resulted in no more log data. This wait time can be used to control the
            maximum frequency with which the replication applier sends HTTP log fetch
            requests to the leader in case there is no write activity on the leader for
            longer periods. This configuration value will only be used if the option
            *adaptivePolling* is set to *true*.
            This value will be ignored if set to *0*.
          format: int64
          type: integer
        requireFromPresent:
          description: |
            if set to *true*, then the replication applier will check
            at start whether the start tick from which it starts or resumes replication is
            still present on the leader. If not, then there would be data loss. If
            *requireFromPresent* is *true*, the replication applier will abort with an
            appropriate error message. If set to *false*, then the replication applier will
            still start, and ignore the data loss.
          type: boolean
        verbose:
          description: |
            if set to *true*, then a log line will be emitted for all operations
            performed by the replication applier. This should be used for debugging replication
            problems only.
          type: boolean
        restrictType:
          description: |
            the configuration for *restrictCollections*; Has to be either *include* or *exclude*
          type: string
        restrictCollections:
          description: |
            the array of collections to include or exclude,
            based on the setting of *restrictType*
          items:
            type: string
          type: array
      required:
      - adaptivePolling
      - autoStart
      - chunkSize
      - connectTimeout
      - database
      - endpoint
      - includeSystem
      - maxConnectRetries
      - password
      - requestTimeout
      - requireFromPresent
      - restrictType
      - verbose
      type: object
    __api_replication_make_follower_put_request:
      properties:
        endpoint:
          description: |
            the leader endpoint to connect to (e.g. "tcp://192.168.173.13:8529").
          type: string
        database:
          description: |
            the database name on the leader (if not specified, defaults to the
            name of the local current database).
          type: string
        username:
          description: |
            an optional ArangoDB username to use when connecting to the leader.
          type: string
        password:
          description: |
            the password to use when connecting to the leader.
          type: string
        includeSystem:
          description: |
            whether or not system collection operations will be applied
          type: boolean
        restrictType:
          description: |
            an optional string value for collection filtering. When
            specified, the allowed values are *include* or *exclude*.
          type: string
        restrictCollections:
          description: |
            an optional array of collections for use with *restrictType*.
            If *restrictType* is *include*, only the specified collections
            will be synchronized. If *restrictType* is *exclude*, all but the specified
            collections will be synchronized.
          items:
            type: string
          type: array
        maxConnectRetries:
          description: |
            the maximum number of connection attempts the applier
            will make in a row. If the applier cannot establish a connection to the
            endpoint in this number of attempts, it will stop itself.
          format: int64
          type: integer
        connectTimeout:
          description: |
            the timeout (in seconds) when attempting to connect to the
            endpoint. This value is used for each connection attempt.
          format: int64
          type: integer
        requestTimeout:
          description: |
            the timeout (in seconds) for individual requests to the endpoint.
          format: int64
          type: integer
        chunkSize:
          description: |
            the requested maximum size for log transfer packets that
            is used when the endpoint is contacted.
          format: int64
          type: integer
        adaptivePolling:
          description: |
            whether or not the replication applier will use adaptive polling.
          type: boolean
        autoResync:
          description: |
            whether or not the follower should perform an automatic resynchronization with
            the leader in case the leader cannot serve log data requested by the follower,
            or when the replication is started and no tick value can be found.
          type: boolean
        autoResyncRetries:
          description: |
            number of resynchronization retries that will be performed in a row when
            automatic resynchronization is enabled and kicks in. Setting this to *0* will
            effectively disable *autoResync*. Setting it to some other value will limit
            the number of retries that are performed. This helps preventing endless retries
            in case resynchronizations always fail.
          format: int64
          type: integer
        initialSyncMaxWaitTime:
          description: |
            the maximum wait time (in seconds) that the initial synchronization will
            wait for a response from the leader when fetching initial collection data.
            This wait time can be used to control after what time the initial synchronization
            will give up waiting for a response and fail. This value is relevant even
            for continuous replication when *autoResync* is set to *true* because this
            may re-start the initial synchronization when the leader cannot provide
            log data the follower requires.
            This value will be ignored if set to *0*.
          format: int64
          type: integer
        connectionRetryWaitTime:
          description: |
            the time (in seconds) that the applier will intentionally idle before
            it retries connecting to the leader in case of connection problems.
            This value will be ignored if set to *0*.
          format: int64
          type: integer
        idleMinWaitTime:
          description: |
            the minimum wait time (in seconds) that the applier will intentionally idle
            before fetching more log data from the leader in case the leader has
            already sent all its log data. This wait time can be used to control the
            frequency with which the replication applier sends HTTP log fetch requests
            to the leader in case there is no write activity on the leader.
            This value will be ignored if set to *0*.
          format: int64
          type: integer
        idleMaxWaitTime:
          description: |
            the maximum wait time (in seconds) that the applier will intentionally idle
            before fetching more log data from the leader in case the leader has
            already sent all its log data and there have been previous log fetch attempts
            that resulted in no more log data. This wait time can be used to control the
            maximum frequency with which the replication applier sends HTTP log fetch
            requests to the leader in case there is no write activity on the leader for
            longer periods. This configuration value will only be used if the option
            *adaptivePolling* is set to *true*.
            This value will be ignored if set to *0*.
          format: int64
          type: integer
        requireFromPresent:
          description: |
            if set to *true*, then the replication applier will check
            at start of its continuous replication if the start tick from the dump phase
            is still present on the leader. If not, then there would be data loss. If
            *requireFromPresent* is *true*, the replication applier will abort with an
            appropriate error message. If set to *false*, then the replication applier will
            still start, and ignore the data loss.
          type: boolean
        verbose:
          description: |
            if set to *true*, then a log line will be emitted for all operations
            performed by the replication applier. This should be used for debugging
            replication
            problems only.
          type: boolean
      required:
      - database
      - endpoint
      - includeSystem
      - password
      type: object
    __api_replication_batch_post_request:
      properties:
        ttl:
          description: |
            The time-to-live for the new batch (in seconds).
          format: int64
          type: integer
      required:
      - ttl
      type: object
    __api_replication_batch__id__delete_request:
      properties:
        ttl:
          description: |
            the time-to-live for the new batch (in seconds)
          format: int64
          type: integer
      required:
      - ttl
      type: object
    __api_replication_sync_put_request:
      properties:
        endpoint:
          description: |
            the leader endpoint to connect to (e.g. "tcp://192.168.173.13:8529").
          type: string
        database:
          description: |
            the database name on the leader (if not specified, defaults to the
            name of the local current database).
          type: string
        username:
          description: |
            an optional ArangoDB username to use when connecting to the endpoint.
          type: string
        password:
          description: |
            the password to use when connecting to the endpoint.
          type: string
        includeSystem:
          description: |
            whether or not system collection operations will be applied
          type: boolean
        incremental:
          description: |
            if set to *true*, then an incremental synchronization method will be used
            for synchronizing data in collections. This method is useful when
            collections already exist locally, and only the remaining differences need
            to be transferred from the remote endpoint. In this case, the incremental
            synchronization can be faster than a full synchronization.
            The default value is *false*, meaning that the complete data from the remote
            collection will be transferred.
          type: boolean
        restrictType:
          description: |
            an optional string value for collection filtering. When
            specified, the allowed values are *include* or *exclude*.
          type: string
        restrictCollections:
          description: |
            an optional array of collections for use with
            *restrictType*. If *restrictType* is *include*, only the specified collections
            will be synchronized. If *restrictType* is *exclude*, all but the specified
            collections will be synchronized.
          items:
            type: string
          type: array
        initialSyncMaxWaitTime:
          description: |
            the maximum wait time (in seconds) that the initial synchronization will
            wait for a response from the leader when fetching initial collection data.
            This wait time can be used to control after what time the initial synchronization
            will give up waiting for a response and fail.
            This value will be ignored if set to *0*.
          format: int64
          type: integer
      required:
      - endpoint
      - password
      type: object
    __api_gharial__graph__edge__collection__post_request:
      properties:
        _from:
          description: |
            The source vertex of this edge. Has to be valid within
            the used edge definition.
          type: string
        _to:
          description: |
            The target vertex of this edge. Has to be valid within
            the used edge definition.
          type: string
      required:
      - _from
      - _to
      type: object
    __api_gharial__graph__edge__collection__post_404_response:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        edge:
          $ref: '#/components/schemas/edge_representation'
        new:
          $ref: '#/components/schemas/edge_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - edge
      - error
      - errorMessage
      - errorNum
      type: object
    __api_gharial__graph__edge__collection___edge__delete_412_response:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        edge:
          $ref: '#/components/schemas/edge_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - edge
      - error
      - errorMessage
      - errorNum
      type: object
    __api_gharial__graph__edge__collection___edge__delete_412_response_1:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        edge:
          $ref: '#/components/schemas/edge_representation'
        new:
          $ref: '#/components/schemas/edge_representation'
        old:
          $ref: '#/components/schemas/edge_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - edge
      - error
      - errorMessage
      - errorNum
      type: object
    __api_gharial__graph__edge__collection___edge__delete_412_response_2:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        removed:
          description: |
            Is set to true if the remove was successful.
          type: boolean
        old:
          $ref: '#/components/schemas/edge_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - error
      - errorMessage
      - errorNum
      - removed
      type: object
    __api_gharial__graph__edge__collection___edge__delete_request:
      properties:
        edge:
          description: |
            The body has to contain a JSON object containing exactly the attributes that should be overwritten, all other attributes remain unchanged.
          type: object
      required:
      - edge
      type: object
    __api_gharial__graph__vertex__collection__delete_request:
      properties:
        vertex:
          description: |
            The body has to be the JSON object to be stored.
          type: object
      required:
      - vertex
      type: object
    __api_gharial__graph__vertex__collection__delete_404_response:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        vertex:
          $ref: '#/components/schemas/vertex_representation'
        new:
          $ref: '#/components/schemas/vertex_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - error
      - errorMessage
      - errorNum
      - vertex
      type: object
    __api_gharial__graph__vertex__collection__delete_404_response_1:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        graph:
          $ref: '#/components/schemas/graph_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - error
      - errorMessage
      - errorNum
      - graph
      type: object
    __api_gharial__graph__vertex__collection___vertex__delete_412_response:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        vertex:
          $ref: '#/components/schemas/vertex_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - error
      - errorMessage
      - errorNum
      - vertex
      type: object
    __api_gharial__graph__vertex__collection___vertex__delete_412_response_1:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        vertex:
          $ref: '#/components/schemas/vertex_representation'
        new:
          $ref: '#/components/schemas/vertex_representation'
        old:
          $ref: '#/components/schemas/vertex_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - error
      - errorMessage
      - errorNum
      - vertex
      type: object
    __api_gharial__graph__vertex__collection___vertex__delete_412_response_2:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        removed:
          description: |
            Is set to true if the remove was successful.
          type: boolean
        old:
          $ref: '#/components/schemas/vertex_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - error
      - errorMessage
      - errorNum
      - removed
      type: object
    __api_gharial__graph__vertex__collection___vertex__delete_request:
      properties:
        vertex:
          description: |
            The body has to contain a JSON object containing exactly the attributes that should be overwritten, all other attributes remain unchanged.
          type: object
      required:
      - vertex
      type: object
    __api_gharial_get_200_response:
      example:
        graphs:
        - ""
        - ""
        code: 0
        error: true
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is false in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        graphs:
          $ref: '#/components/schemas/graph_list'
      required:
      - code
      - error
      - graphs
      type: object
    __api_gharial_get_request:
      properties:
        name:
          description: |
            Name of the graph.
          type: string
        edgeDefinitions:
          $ref: '#/components/schemas/graph_edge_definition'
        orphanCollections:
          description: |
            An array of additional vertex collections.
            Documents within these collections do not have edges within this graph.
          items:
            type: string
          type: array
        isSmart:
          description: |
            Define if the created graph should be smart (Enterprise Edition only).
          type: boolean
        isDisjoint:
          description: |
            Whether to create a Disjoint SmartGraph instead of a regular SmartGraph
            (Enterprise Edition only).
          type: boolean
        options:
          $ref: '#/components/schemas/post_api_gharial_create_opts'
      required:
      - name
      type: object
    __api_gharial__graph__delete_404_response:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        graph:
          $ref: '#/components/schemas/graph_representation'
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
      required:
      - code
      - error
      - errorNum
      - graph
      type: object
    __api_gharial__graph__delete_404_response_1:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
        errorMessage:
          description: |
            A message created for this error.
          type: string
      required:
      - code
      - error
      - errorMessage
      - errorNum
      type: object
    __api_gharial__graph__vertex_get_404_response:
      properties:
        error:
          description: |
            Flag if there was an error (true) or not (false).
            It is true in this response.
          type: boolean
        code:
          description: |
            The response code.
          type: integer
        collections:
          description: |
            The list of all vertex collections within this graph.
            Includes collections in edgeDefinitions as well as orphans.
          items:
            type: string
          type: array
        errorNum:
          description: |
            ArangoDB error number for the error that occurred.
          type: integer
      required:
      - code
      - collections
      - error
      - errorNum
      type: object
    __api_gharial__graph__vertex_get_request:
      properties:
        options:
          $ref: '#/components/schemas/post_api_vertex_create_opts'
      type: object
    __api_gharial__graph__edge_get_request:
      properties:
        collection:
          description: |
            The name of the edge collection to be used.
          type: string
        from:
          description: |
            One or many vertex collections that can contain source vertices.
          items:
            type: string
          type: array
        to:
          description: |
            One or many vertex collections that can contain target vertices.
          items:
            type: string
          type: array
        options:
          $ref: '#/components/schemas/post_api_edgedef_create_opts'
      required:
      - collection
      - from
      - to
      type: object
    __api_gharial__graph__edge__definition__definition_delete_request:
      properties:
        collection:
          description: |
            The name of the edge collection to be used.
          type: string
        from:
          description: |
            One or many vertex collections that can contain source vertices.
          items:
            type: string
          type: array
        to:
          description: |
            One or many vertex collections that can contain target vertices.
          items:
            type: string
          type: array
        options:
          $ref: '#/components/schemas/post_api_edgedef_modify_opts'
      required:
      - collection
      - from
      - to
      type: object
    __api_cursor_post_request:
      properties:
        query:
          description: |
            contains the query string to be executed
          type: string
        count:
          description: |
            indicates whether the number of documents in the result set should be returned in
            the "count" attribute of the result.
            Calculating the "count" attribute might have a performance impact for some queries
            in the future so this option is turned off by default, and "count"
            is only returned when requested.
          type: boolean
        batchSize:
          description: |
            maximum number of result documents to be transferred from
            the server to the client in one roundtrip. If this attribute is
            not set, a server-controlled default value will be used. A *batchSize* value of
            *0* is disallowed.
          format: int64
          type: integer
        ttl:
          description: |
            The time-to-live for the cursor (in seconds). If the result set is small enough
            (less than or equal to `batchSize`) then results are returned right away.
            Otherwise they are stored in memory and will be accessible via the cursor with
            respect to the `ttl`. The cursor will be removed on the server automatically
            after the specified amount of time. This is useful to ensure garbage collection
            of cursors that are not fully fetched by clients. If not set, a server-defined
            value will be used (default: 30 seconds).
          format: int64
          type: integer
        cache:
          description: |
            flag to determine whether the AQL query results cache
            shall be used. If set to *false*, then any query cache lookup will be skipped
            for the query. If set to *true*, it will lead to the query cache being checked
            for the query if the query cache mode is either *on* or *demand*.
          type: boolean
        memoryLimit:
          description: |
            the maximum number of memory (measured in bytes) that the query is allowed to
            use. If set, then the query will fail with error "resource limit exceeded" in
            case it allocates too much memory. A value of *0* indicates that there is no
            memory limit.
          format: int64
          type: integer
        bindVars:
          description: |
            key/value pairs representing the bind parameters.
          format: object
          items:
            type: object
          type: array
        options:
          $ref: '#/components/schemas/post_api_cursor_opts'
      required:
      - query
      type: object
    __api_cursor_post_503_response:
      properties:
        error:
          description: |
            boolean flag to indicate that an error occurred (*true* in this case)
          type: boolean
        code:
          description: |
            the HTTP status code
          format: int64
          type: integer
        result:
          description: |
            An array of result documents (might be empty if query has no results).
          items:
            type: string
          type: array
        hasMore:
          description: |
            A boolean indicator whether there are more results
            available for the cursor on the server.
          type: boolean
        count:
          description: |
            The total number of result documents available (only
            available if the query was executed with the `count` attribute set).
          format: int64
          type: integer
        id:
          description: |
            The ID of a temporary cursor created on the server for fetching more result batches.
          type: string
        extra:
          $ref: '#/components/schemas/post_api_cursor_extra'
        cached:
          description: |
            A boolean flag indicating whether the query result was served
            from the query cache or not. If the query result is served from the query
            cache, the `extra` return attribute will not contain any `stats` sub-attribute
            and no `profile` sub-attribute.
          type: boolean
        errorNum:
          description: |
            the server error number
          format: int64
          type: integer
        errorMessage:
          description: |
            A descriptive error message.
            If the query specification is complete, the server will process the query. If an
            error occurs during query processing, the server will respond with *HTTP 400*.
            Again, the body of the response will contain details about the error.
          type: string
      required:
      - cached
      - code
      - error
      - errorMessage
      - errorNum
      - hasMore
      type: object
    __admin_cluster_maintenance__DB_Server_ID__get_504_response:
      properties:
        error:
          description: |
            Whether an error occurred. `false` in this case.
          type: boolean
        code:
          description: |
            The status code. `200` in this case.
          type: integer
        result:
          $ref: '#/components/schemas/get_cluster_maintenance_dbserver_result'
      required:
      - code
      - error
      type: object
    __admin_cluster_maintenance__DB_Server_ID__get_request:
      properties:
        mode:
          description: |
            The mode to put the DB-Server in. Possible values:
            - `"maintenance"`
            - `"normal"`
          type: string
        timeout:
          description: |
            After how many seconds the maintenance mode shall automatically end.
            You can send another request when the DB-Server is already in maintenance mode
            to extend the timeout.
          type: integer
      required:
      - mode
      type: object
    __admin_cluster_maintenance__DB_Server_ID__get_504_response_1:
      properties:
        error:
          description: |
            Whether an error occurred. `false` in this case.
          type: boolean
        code:
          description: |
            The status code. `200` in this case.
          type: integer
      required:
      - code
      - error
      type: object
    __api_transaction_get_request:
      properties:
        collections:
          description: |
            *collections* must be a JSON object that can have one or all sub-attributes
            *read*, *write* or *exclusive*, each being an array of collection names or a
            single collection name as string. Collections that will be written to in the
            transaction must be declared with the *write* or *exclusive* attribute or it
            will fail, whereas non-declared collections from which is solely read will be
            added lazily. The optional sub-attribute *allowImplicit* can be set to *false*
            to let transactions fail in case of undeclared collections for reading.
            Collections for reading should be fully declared if possible, to avoid
            deadlocks.
          type: string
        action:
          description: |
            the actual transaction operations to be executed, in the
            form of stringified JavaScript code. The code will be executed on server
            side, with late binding. It is thus critical that the code specified in
            *action* properly sets up all the variables it needs.
            If the code specified in *action* ends with a return statement, the
            value returned will also be returned by the REST API in the *result*
            attribute if the transaction committed successfully.
          type: string
        waitForSync:
          description: |
            an optional boolean flag that, if set, will force the
            transaction to write all data to disk before returning.
          type: boolean
        allowImplicit:
          description: |
            Allow reading from undeclared collections.
          type: boolean
        lockTimeout:
          description: |
            an optional numeric value that can be used to set a
            timeout in seconds for waiting on collection locks. This option is only
            meaningful when using exclusive locks. If not specified, a default value of
            900 seconds will be used. Setting *lockTimeout* to *0* will make ArangoDB
            not time out waiting for a lock.
          format: int64
          type: integer
        params:
          description: |
            optional arguments passed to *action*.
          type: string
        maxTransactionSize:
          description: |
            Transaction size limit in bytes.
          format: int64
          type: integer
      required:
      - action
      - collections
      type: object
    __api_transaction_begin_post_request:
      properties:
        collections:
          description: |
            *collections* must be a JSON object that can have one or all sub-attributes
            *read*, *write* or *exclusive*, each being an array of collection names or a
            single collection name as string. Collections that will be written to in the
            transaction must be declared with the *write* or *exclusive* attribute or it
            will fail, whereas non-declared collections from which is solely read will be
            added lazily.
          type: string
        waitForSync:
          description: |
            an optional boolean flag that, if set, will force the
            transaction to write all data to disk before returning.
          type: boolean
        allowImplicit:
          description: "Allow reading from undeclared collections. \n\n"
          type: boolean
        lockTimeout:
          description: |
            an optional numeric value that can be used to set a
            timeout in seconds for waiting on collection locks. This option is only
            meaningful when using exclusive locks. If not specified, a default
            value will be used. Setting *lockTimeout* to *0* will make ArangoDB
            not time out waiting for a lock.
          format: int64
          type: integer
        maxTransactionSize:
          description: |
            Transaction size limit in bytes.
          format: int64
          type: integer
      required:
      - collections
      type: object
